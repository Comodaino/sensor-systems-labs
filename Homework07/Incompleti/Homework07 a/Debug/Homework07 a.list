
Homework07 a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009a70  08009a70  0000aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e10  08009e10  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e10  08009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e18  08009e18  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e18  08009e18  0000ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e1c  08009e1c  0000ae1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009e20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d4  08009ff4  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08009ff4  0000b4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103ae  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c7  00000000  00000000  0001b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c81  00000000  00000000  0001e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017577  00000000  00000000  0001f3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc1  00000000  00000000  00036948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c79  00000000  00000000  00048609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  000da2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000df7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a58 	.word	0x08009a58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009a58 	.word	0x08009a58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_I2C_MasterRxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int times_called = 0;

HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
	if(hi2c = &hi2c1){
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000eb2:	607b      	str	r3, [r7, #4]
		if(times_called == 0){
 8000eb4:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <HAL_I2C_MasterRxCpltCallback+0x1c>
			times_called = 1;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
			return HAL_OK;
 8000ec2:	e059      	b.n	8000f78 <HAL_I2C_MasterRxCpltCallback+0xd0>
		}
		times_called=0;
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		if(value[0]>127){
 8000eca:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da22      	bge.n	8000f1a <HAL_I2C_MasterRxCpltCallback+0x72>
			value[0] = value[0] & 0b01111111;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000ee0:	701a      	strb	r2, [r3, #0]
			temp = value[0]<<8 | value[1];
 8000ee2:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4a27      	ldr	r2, [pc, #156]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000eea:	7852      	ldrb	r2, [r2, #1]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef6:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
			temp = -128 + temp/256.0f;
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000f90 <HAL_I2C_MasterRxCpltCallback+0xe8>
 8000f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000f94 <HAL_I2C_MasterRxCpltCallback+0xec>
 8000f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
 8000f18:	e016      	b.n	8000f48 <HAL_I2C_MasterRxCpltCallback+0xa0>
		}else{
			temp = value[0]<<8 | value[1];
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000f22:	7852      	ldrb	r2, [r2, #1]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
			temp = temp/256.0f;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000f90 <HAL_I2C_MasterRxCpltCallback+0xe8>
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f44:	edc3 7a00 	vstr	s15, [r3]
		}
		snprintf(output, 100, "Temp:  %.3f C\r\n", temp);
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb03 	bl	8000558 <__aeabi_f2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	e9cd 2300 	strd	r2, r3, [sp]
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <HAL_I2C_MasterRxCpltCallback+0xf0>)
 8000f5c:	2164      	movs	r1, #100	@ 0x64
 8000f5e:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8000f60:	f006 fc3a 	bl	80077d8 <sniprintf>
		HAL_UART_Transmit_DMA(&huart2, output, strlen(output));
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8000f66:	f7ff f98b 	bl	8000280 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	490a      	ldr	r1, [pc, #40]	@ (8000f9c <HAL_I2C_MasterRxCpltCallback+0xf4>)
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <HAL_I2C_MasterRxCpltCallback+0xf8>)
 8000f74:	f004 ff02 	bl	8005d7c <HAL_UART_Transmit_DMA>
	}
}
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001f0 	.word	0x200001f0
 8000f84:	20000350 	.word	0x20000350
 8000f88:	20000334 	.word	0x20000334
 8000f8c:	2000034c 	.word	0x2000034c
 8000f90:	43800000 	.word	0x43800000
 8000f94:	43000000 	.word	0x43000000
 8000f98:	08009a70 	.word	0x08009a70
 8000f9c:	20000338 	.word	0x20000338
 8000fa0:	2000028c 	.word	0x2000028c

08000fa4 <HAL_TIM_PeriodElapsedCallback>:

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if(htim = &htim2){
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fae:	607b      	str	r3, [r7, #4]
		HAL_I2C_Master_Receive_IT(&hi2c1, READ_ADDRESS, value, 2);
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fb4:	2191      	movs	r1, #145	@ 0x91
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fb8:	f001 fdf0 	bl	8002b9c <HAL_I2C_Master_Receive_IT>
		HAL_I2C_Master_Receive_IT(&hi2c1, READ_ADDRESS, value, 2);
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fc0:	2191      	movs	r1, #145	@ 0x91
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fc4:	f001 fdea 	bl	8002b9c <HAL_I2C_Master_Receive_IT>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000244 	.word	0x20000244
 8000fd4:	20000334 	.word	0x20000334
 8000fd8:	200001f0 	.word	0x200001f0

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe2:	f000 fc51 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f81d 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fea:	f000 f94d 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fee:	f000 f92b 	bl	8001248 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f8ff 	bl	80011f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ff6:	f000 f881 	bl	80010fc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ffa:	f000 f8ad 	bl	8001158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <main+0x40>)
 8001000:	f004 fa82 	bl	8005508 <HAL_TIM_Base_Start_IT>
	HAL_I2C_Master_Transmit(&hi2c1, WRITE_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	2200      	movs	r2, #0
 800100e:	2190      	movs	r1, #144	@ 0x90
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <main+0x44>)
 8001012:	f001 fcc5 	bl	80029a0 <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <main+0x3a>
 800101a:	bf00      	nop
 800101c:	20000244 	.word	0x20000244
 8001020:	200001f0 	.word	0x200001f0

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	@ 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	@ 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fc47 	bl	80078c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <SystemClock_Config+0xd0>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <SystemClock_Config+0xd0>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <SystemClock_Config+0xd0>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <SystemClock_Config+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001070:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <SystemClock_Config+0xd4>)
 8001072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <SystemClock_Config+0xd4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2310      	movs	r3, #16
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001090:	2302      	movs	r3, #2
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001094:	2300      	movs	r3, #0
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001098:	2310      	movs	r3, #16
 800109a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800109c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fd42 	bl	8004b38 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ba:	f000 f953 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 ffa4 	bl	8005028 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010e6:	f000 f93d 	bl	8001364 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3750      	adds	r7, #80	@ 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <MX_I2C1_Init+0x50>)
 800113a:	f001 fad7 	bl	80026ec <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f90e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001f0 	.word	0x200001f0
 8001150:	40005400 	.word	0x40005400
 8001154:	000186a0 	.word	0x000186a0

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001176:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800117e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800118c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_TIM2_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_TIM2_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119e:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011a0:	f004 f962 	bl	8005468 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011aa:	f000 f8db 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011bc:	f004 faf6 	bl	80057ac <HAL_TIM_ConfigClockSource>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011c6:	f000 f8cd 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_TIM2_Init+0x98>)
 80011d8:	f004 fcfe 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011e2:	f000 f8bf 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000244 	.word	0x20000244

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f004 fd56 	bl	8005cdc <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f895 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000028c 	.word	0x2000028c
 8001244:	40004400 	.word	0x40004400

08001248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_DMA_Init+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <MX_DMA_Init+0x3c>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_DMA_Init+0x3c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2011      	movs	r0, #17
 8001270:	f000 fc57 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001274:	2011      	movs	r0, #17
 8001276:	f000 fc70 	bl	8001b5a <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2120      	movs	r1, #32
 8001312:	4812      	ldr	r0, [pc, #72]	@ (800135c <MX_GPIO_Init+0xd4>)
 8001314:	f001 f9d0 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800131e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480c      	ldr	r0, [pc, #48]	@ (8001360 <MX_GPIO_Init+0xd8>)
 8001330:	f001 f83e 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001334:	2320      	movs	r3, #32
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_GPIO_Init+0xd4>)
 800134c:	f001 f830 	bl	80023b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020800 	.word	0x40020800

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001384:	6453      	str	r3, [r2, #68]	@ 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f000 fbac 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_I2C_MspInit+0xa4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13c      	bne.n	800145c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001410:	2304      	movs	r3, #4
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4814      	ldr	r0, [pc, #80]	@ (800146c <HAL_I2C_MspInit+0xac>)
 800141c:	f000 ffc8 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 800142a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800142e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_I2C_MspInit+0xa8>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	201f      	movs	r0, #31
 8001442:	f000 fb6e 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001446:	201f      	movs	r0, #31
 8001448:	f000 fb87 	bl	8001b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2020      	movs	r0, #32
 8001452:	f000 fb66 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001456:	2020      	movs	r0, #32
 8001458:	f000 fb7f 	bl	8001b5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001480:	d115      	bne.n	80014ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_TIM_Base_MspInit+0x48>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_TIM_Base_MspInit+0x48>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_TIM_Base_MspInit+0x48>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	201c      	movs	r0, #28
 80014a4:	f000 fb3d 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a8:	201c      	movs	r0, #28
 80014aa:	f000 fb56 	bl	8001b5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a34      	ldr	r2, [pc, #208]	@ (80015ac <HAL_UART_MspInit+0xf0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d161      	bne.n	80015a2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a2b      	ldr	r2, [pc, #172]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <HAL_UART_MspInit+0xf4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001516:	230c      	movs	r3, #12
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001526:	2307      	movs	r3, #7
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4820      	ldr	r0, [pc, #128]	@ (80015b4 <HAL_UART_MspInit+0xf8>)
 8001532:	f000 ff3d 	bl	80023b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001538:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <HAL_UART_MspInit+0x100>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800153e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001542:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001546:	2240      	movs	r2, #64	@ 0x40
 8001548:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001552:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001556:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001576:	4810      	ldr	r0, [pc, #64]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 8001578:	f000 fb0a 	bl	8001b90 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001582:	f7ff feef 	bl	8001364 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800158a:	639a      	str	r2, [r3, #56]	@ 0x38
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_UART_MspInit+0xfc>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2026      	movs	r0, #38	@ 0x26
 8001598:	f000 fac3 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159c:	2026      	movs	r0, #38	@ 0x26
 800159e:	f000 fadc 	bl	8001b5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	200002d4 	.word	0x200002d4
 80015bc:	400260a0 	.word	0x400260a0

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f989 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA1_Stream6_IRQHandler+0x10>)
 8001626:	f000 fc4b 	bl	8001ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200002d4 	.word	0x200002d4

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f003 ffc7 	bl	80055cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000244 	.word	0x20000244

08001648 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <I2C1_EV_IRQHandler+0x10>)
 800164e:	f001 fb4f 	bl	8002cf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001f0 	.word	0x200001f0

0800165c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <I2C1_ER_IRQHandler+0x10>)
 8001662:	f001 fc98 	bl	8002f96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001f0 	.word	0x200001f0

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <USART2_IRQHandler+0x10>)
 8001676:	f004 fbf1 	bl	8005e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000028c 	.word	0x2000028c

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169e:	f006 f965 	bl	800796c <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <_exit+0x12>

080016ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e00a      	b.n	80016f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016dc:	f3af 8000 	nop.w
 80016e0:	4601      	mov	r1, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <_read+0x12>
  }

  return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e009      	b.n	800172a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf1      	blt.n	8001716 <_write+0x12>
  }
  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_close>:

int _close(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001764:	605a      	str	r2, [r3, #4]
  return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_isatty>:

int _isatty(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f006 f8ca 	bl	800796c <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20018000 	.word	0x20018000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000354 	.word	0x20000354
 800180c:	200004a8 	.word	0x200004a8

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001862:	f006 f889 	bl	8007978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fbb9 	bl	8000fdc <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800186c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001878:	08009e20 	.word	0x08009e20
  ldr r2, =_sbss
 800187c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001880:	200004a8 	.word	0x200004a8

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f92b 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fd58 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f943 	bl	8001b76 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001908:	f000 f90b 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	20000358 	.word	0x20000358

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000358 	.word	0x20000358

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff29 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff3e 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff31 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff feda 	bl	8001954 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e099      	b.n	8001ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	e00f      	b.n	8001bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff fec1 	bl	8001954 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d908      	bls.n	8001bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e078      	b.n	8001ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e8      	bne.n	8001bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <HAL_DMA_Init+0x158>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	4313      	orrs	r3, r2
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d117      	bne.n	8001cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb0f 	bl	80022b8 <DMA_CheckFifoParam>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2240      	movs	r2, #64	@ 0x40
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e016      	b.n	8001ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fac6 	bl	800224c <DMA_CalcBaseAndBitshift>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc8:	223f      	movs	r2, #63	@ 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	f010803f 	.word	0xf010803f

08001cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_DMA_Start_IT+0x26>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e040      	b.n	8001d94 <HAL_DMA_Start_IT+0xa8>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d12f      	bne.n	8001d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fa58 	bl	80021f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	223f      	movs	r2, #63	@ 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0216 	orr.w	r2, r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0208 	orr.w	r2, r2, #8
 8001d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e005      	b.n	8001d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001daa:	f7ff fdd3 	bl	8001954 <HAL_GetTick>
 8001dae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2280      	movs	r2, #128	@ 0x80
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e052      	b.n	8001e74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0216 	bic.w	r2, r2, #22
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_DMA_Abort+0x62>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0208 	bic.w	r2, r2, #8
 8001e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1e:	e013      	b.n	8001e48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e20:	f7ff fd98 	bl	8001954 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d90c      	bls.n	8001e48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e015      	b.n	8001e74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e4      	bne.n	8001e20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	223f      	movs	r2, #63	@ 0x3f
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2280      	movs	r2, #128	@ 0x80
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00c      	b.n	8001eb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8002108 <HAL_DMA_IRQHandler+0x248>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a8e      	ldr	r2, [pc, #568]	@ (800210c <HAL_DMA_IRQHandler+0x24c>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	2208      	movs	r2, #8
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01a      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	2208      	movs	r2, #8
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	2201      	movs	r2, #1
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d012      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	2201      	movs	r2, #1
 8001f50:	409a      	lsls	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	2204      	movs	r2, #4
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d012      	beq.n	8001f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2204      	movs	r2, #4
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d043      	beq.n	8002030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d03c      	beq.n	8002030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2210      	movs	r2, #16
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d018      	beq.n	8002002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d108      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d024      	beq.n	8002030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
 8001fee:	e01f      	b.n	8002030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
 8002000:	e016      	b.n	8002030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0208 	bic.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2220      	movs	r2, #32
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 808f 	beq.w	8002160 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8087 	beq.w	8002160 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	2220      	movs	r2, #32
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b05      	cmp	r3, #5
 8002068:	d136      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0216 	bic.w	r2, r2, #22
 8002078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <HAL_DMA_IRQHandler+0x1da>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0208 	bic.w	r2, r2, #8
 80020a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	223f      	movs	r2, #63	@ 0x3f
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d07e      	beq.n	80021cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
        }
        return;
 80020d6:	e079      	b.n	80021cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01d      	beq.n	8002122 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d031      	beq.n	8002160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e02c      	b.n	8002160 <HAL_DMA_IRQHandler+0x2a0>
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000
 800210c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d023      	beq.n	8002160 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e01e      	b.n	8002160 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10f      	bne.n	8002150 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0210 	bic.w	r2, r2, #16
 800213e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	2b00      	cmp	r3, #0
 8002166:	d032      	beq.n	80021ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d022      	beq.n	80021ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2205      	movs	r2, #5
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	d307      	bcc.n	80021a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f2      	bne.n	800218c <HAL_DMA_IRQHandler+0x2cc>
 80021a6:	e000      	b.n	80021aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e000      	b.n	80021ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80021cc:	bf00      	nop
    }
  }
}
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800220c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b40      	cmp	r3, #64	@ 0x40
 800221c:	d108      	bne.n	8002230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222e:	e007      	b.n	8002240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	60da      	str	r2, [r3, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3b10      	subs	r3, #16
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x64>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d909      	bls.n	800228e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	1d1a      	adds	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	659a      	str	r2, [r3, #88]	@ 0x58
 800228c:	e007      	b.n	800229e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	aaaaaaab 	.word	0xaaaaaaab
 80022b4:	08009a98 	.word	0x08009a98

080022b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11f      	bne.n	8002312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d856      	bhi.n	8002386 <DMA_CheckFifoParam+0xce>
 80022d8:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <DMA_CheckFifoParam+0x28>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	08002303 	.word	0x08002303
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002387 	.word	0x08002387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d046      	beq.n	800238a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e043      	b.n	800238a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800230a:	d140      	bne.n	800238e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e03d      	b.n	800238e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800231a:	d121      	bne.n	8002360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d837      	bhi.n	8002392 <DMA_CheckFifoParam+0xda>
 8002322:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <DMA_CheckFifoParam+0x70>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002339 	.word	0x08002339
 800232c:	0800233f 	.word	0x0800233f
 8002330:	08002339 	.word	0x08002339
 8002334:	08002351 	.word	0x08002351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      break;
 800233c:	e030      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d025      	beq.n	8002396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234e:	e022      	b.n	8002396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002358:	d11f      	bne.n	800239a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235e:	e01c      	b.n	800239a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d903      	bls.n	800236e <DMA_CheckFifoParam+0xb6>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d003      	beq.n	8002374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800236c:	e018      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
      break;
 8002372:	e015      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e00b      	b.n	800239e <DMA_CheckFifoParam+0xe6>
      break;
 8002386:	bf00      	nop
 8002388:	e00a      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e008      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e006      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e004      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e002      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800239a:	bf00      	nop
 800239c:	e000      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
    }
  } 
  
  return status; 
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e159      	b.n	8002680 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8148 	bne.w	800267a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a2 	beq.w	800267a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b57      	ldr	r3, [pc, #348]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a56      	ldr	r2, [pc, #344]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b54      	ldr	r3, [pc, #336]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a52      	ldr	r2, [pc, #328]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a49      	ldr	r2, [pc, #292]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x202>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a48      	ldr	r2, [pc, #288]	@ (80026a4 <HAL_GPIO_Init+0x2f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x1fe>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a47      	ldr	r2, [pc, #284]	@ (80026a8 <HAL_GPIO_Init+0x2f8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x1fa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a46      	ldr	r2, [pc, #280]	@ (80026ac <HAL_GPIO_Init+0x2fc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x1f6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a45      	ldr	r2, [pc, #276]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x1f2>
 800259e:	2304      	movs	r3, #4
 80025a0:	e008      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025a6:	2303      	movs	r3, #3
 80025a8:	e004      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_GPIO_Init+0x204>
 80025b2:	2300      	movs	r3, #0
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f002 0203 	and.w	r2, r2, #3
 80025ba:	0092      	lsls	r2, r2, #2
 80025bc:	4093      	lsls	r3, r2
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c4:	4935      	ldr	r1, [pc, #212]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a2f      	ldr	r2, [pc, #188]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a24      	ldr	r2, [pc, #144]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264a:	4a1a      	ldr	r2, [pc, #104]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b0f      	cmp	r3, #15
 8002684:	f67f aea2 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40013800 	.word	0x40013800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d4:	e003      	b.n	80026de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	619a      	str	r2, [r3, #24]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e12b      	b.n	8002956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fe54 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002750:	f002 fe62 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8002754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a81      	ldr	r2, [pc, #516]	@ (8002960 <HAL_I2C_Init+0x274>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d807      	bhi.n	8002770 <HAL_I2C_Init+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a80      	ldr	r2, [pc, #512]	@ (8002964 <HAL_I2C_Init+0x278>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e006      	b.n	800277e <HAL_I2C_Init+0x92>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7d      	ldr	r2, [pc, #500]	@ (8002968 <HAL_I2C_Init+0x27c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0e7      	b.n	8002956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a78      	ldr	r2, [pc, #480]	@ (800296c <HAL_I2C_Init+0x280>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d802      	bhi.n	80027c0 <HAL_I2C_Init+0xd4>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	e009      	b.n	80027d4 <HAL_I2C_Init+0xe8>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	4a69      	ldr	r2, [pc, #420]	@ (8002970 <HAL_I2C_Init+0x284>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	430b      	orrs	r3, r1
 80027da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	495c      	ldr	r1, [pc, #368]	@ (8002960 <HAL_I2C_Init+0x274>)
 80027f0:	428b      	cmp	r3, r1
 80027f2:	d819      	bhi.n	8002828 <HAL_I2C_Init+0x13c>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e59      	subs	r1, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002808:	400b      	ands	r3, r1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_Init+0x138>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e59      	subs	r1, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb1 f3f3 	udiv	r3, r1, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	e051      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002824:	2304      	movs	r3, #4
 8002826:	e04f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d111      	bne.n	8002854 <HAL_I2C_Init+0x168>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e012      	b.n	800287a <HAL_I2C_Init+0x18e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e58      	subs	r0, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	0099      	lsls	r1, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x196>
 800287e:	2301      	movs	r3, #1
 8002880:	e022      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10e      	bne.n	80028a8 <HAL_I2C_Init+0x1bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e58      	subs	r0, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	440b      	add	r3, r1
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Init+0x1dc>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	6809      	ldr	r1, [r1, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6911      	ldr	r1, [r2, #16]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	000186a0 	.word	0x000186a0
 8002964:	001e847f 	.word	0x001e847f
 8002968:	003d08ff 	.word	0x003d08ff
 800296c:	431bde83 	.word	0x431bde83
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d103      	bne.n	8002992 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	460b      	mov	r3, r1
 80029ae:	817b      	strh	r3, [r7, #10]
 80029b0:	4613      	mov	r3, r2
 80029b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7fe ffce 	bl	8001954 <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	f040 80e0 	bne.w	8002b88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	2201      	movs	r2, #1
 80029d0:	4970      	ldr	r1, [pc, #448]	@ (8002b94 <HAL_I2C_Master_Transmit+0x1f4>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 fe8a 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	e0d3      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x50>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0cc      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d007      	beq.n	8002a16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2221      	movs	r2, #33	@ 0x21
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2210      	movs	r2, #16
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a50      	ldr	r2, [pc, #320]	@ (8002b98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f001 fd1a 	bl	8004498 <I2C_MasterRequestWrite>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e08d      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a84:	e066      	b.n	8002b54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f001 ff48 	bl	8004920 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d107      	bne.n	8002aae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0x188>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f001 ff3f 	bl	80049b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e01a      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d194      	bne.n	8002a86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	00100002 	.word	0x00100002
 8002b98:	ffff0000 	.word	0xffff0000

08002b9c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
 8002bac:	4613      	mov	r3, r2
 8002bae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 8089 	bne.w	8002cd4 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_I2C_Master_Receive_IT+0x148>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	4a47      	ldr	r2, [pc, #284]	@ (8002ce8 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a1a      	lsrs	r2, r3, #8
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009a      	lsls	r2, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d112      	bne.n	8002c0e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e063      	b.n	8002cd6 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d0df      	beq.n	8002bdc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Master_Receive_IT+0x8e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e055      	b.n	8002cd6 <HAL_I2C_Master_Receive_IT+0x13a>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d007      	beq.n	8002c50 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2222      	movs	r2, #34	@ 0x22
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	893a      	ldrh	r2, [r7, #8]
 8002c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	@ (8002cec <HAL_I2C_Master_Receive_IT+0x150>)
 8002c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002c92:	897a      	ldrh	r2, [r7, #10]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002cae:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	14f8b589 	.word	0x14f8b589
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d003      	beq.n	8002d28 <HAL_I2C_EV_IRQHandler+0x38>
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	f040 80b1 	bne.w	8002e8a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_I2C_EV_IRQHandler+0x6e>
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d48:	d003      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x62>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_EV_IRQHandler+0x66>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_EV_IRQHandler+0x68>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f000 8114 	beq.w	8002f86 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_I2C_EV_IRQHandler+0x90>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 fec5 	bl	8004b02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fd70 	bl	800385e <I2C_Master_SB>
 8002d7e:	e083      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0xac>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fde8 	bl	800396a <I2C_Master_ADD10>
 8002d9a:	e075      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fe04 	bl	80039be <I2C_Master_ADDR>
 8002db6:	e067      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d036      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd0:	f000 80db 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_I2C_EV_IRQHandler+0x10a>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_I2C_EV_IRQHandler+0x10a>
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9cc 	bl	8003190 <I2C_MasterTransmit_TXE>
 8002df8:	e046      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80c2 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80bc 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e12:	7bbb      	ldrb	r3, [r7, #14]
 8002e14:	2b21      	cmp	r3, #33	@ 0x21
 8002e16:	d103      	bne.n	8002e20 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa55 	bl	80032c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1e:	e0b4      	b.n	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b40      	cmp	r3, #64	@ 0x40
 8002e24:	f040 80b1 	bne.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fac3 	bl	80033b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e2e:	e0ac      	b.n	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3e:	f000 80a4 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x178>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x178>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb3f 	bl	80034e4 <I2C_MasterReceive_RXNE>
 8002e66:	e00f      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808b 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8085 	beq.w	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fbf7 	bl	8003674 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e86:	e080      	b.n	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
 8002e88:	e07f      	b.n	8002f8a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e007      	b.n	8002eac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_I2C_EV_IRQHandler+0x1ea>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ed0:	69b9      	ldr	r1, [r7, #24]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 ffc2 	bl	8003e5c <I2C_Slave_ADDR>
 8002ed8:	e05a      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_I2C_EV_IRQHandler+0x206>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fffc 	bl	8003eec <I2C_Slave_STOPF>
 8002ef4:	e04c      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ef6:	7bbb      	ldrb	r3, [r7, #14]
 8002ef8:	2b21      	cmp	r3, #33	@ 0x21
 8002efa:	d002      	beq.n	8002f02 <HAL_I2C_EV_IRQHandler+0x212>
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	2b29      	cmp	r3, #41	@ 0x29
 8002f00:	d120      	bne.n	8002f44 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_I2C_EV_IRQHandler+0x238>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_I2C_EV_IRQHandler+0x238>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fedd 	bl	8003ce0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f26:	e032      	b.n	8002f8e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02d      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x29e>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d028      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 ff0c 	bl	8003d5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f42:	e024      	b.n	8002f8e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <HAL_I2C_EV_IRQHandler+0x27a>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_I2C_EV_IRQHandler+0x27a>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 ff1a 	bl	8003d9c <I2C_SlaveReceive_RXNE>
 8002f68:	e012      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ff4a 	bl	8003e18 <I2C_SlaveReceive_BTF>
 8002f84:	e004      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f90:	3720      	adds	r7, #32
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b08a      	sub	sp, #40	@ 0x28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x4a>
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002fde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <HAL_I2C_ER_IRQHandler+0x70>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003004:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d03e      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0xf8>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d039      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800301a:	7efb      	ldrb	r3, [r7, #27]
 800301c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003034:	7ebb      	ldrb	r3, [r7, #26]
 8003036:	2b20      	cmp	r3, #32
 8003038:	d112      	bne.n	8003060 <HAL_I2C_ER_IRQHandler+0xca>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <HAL_I2C_ER_IRQHandler+0xca>
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b21      	cmp	r3, #33	@ 0x21
 8003044:	d008      	beq.n	8003058 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b29      	cmp	r3, #41	@ 0x29
 800304a:	d005      	beq.n	8003058 <HAL_I2C_ER_IRQHandler+0xc2>
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b28      	cmp	r3, #40	@ 0x28
 8003050:	d106      	bne.n	8003060 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b21      	cmp	r3, #33	@ 0x21
 8003056:	d103      	bne.n	8003060 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 f877 	bl	800414c <I2C_Slave_AF>
 800305e:	e016      	b.n	800308e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003068:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003072:	7efb      	ldrb	r3, [r7, #27]
 8003074:	2b10      	cmp	r3, #16
 8003076:	d002      	beq.n	800307e <HAL_I2C_ER_IRQHandler+0xe8>
 8003078:	7efb      	ldrb	r3, [r7, #27]
 800307a:	2b40      	cmp	r3, #64	@ 0x40
 800307c:	d107      	bne.n	800308e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <HAL_I2C_ER_IRQHandler+0x11e>
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80030b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f001 f8b4 	bl	8004234 <I2C_ITError>
  }
}
 80030cc:	bf00      	nop
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
 800311c:	4613      	mov	r3, r2
 800311e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d150      	bne.n	8003258 <I2C_MasterTransmit_TXE+0xc8>
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b21      	cmp	r3, #33	@ 0x21
 80031ba:	d14d      	bne.n	8003258 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d01d      	beq.n	80031fe <I2C_MasterTransmit_TXE+0x6e>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d01a      	beq.n	80031fe <I2C_MasterTransmit_TXE+0x6e>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ce:	d016      	beq.n	80031fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2211      	movs	r2, #17
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff6c 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031fc:	e060      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800320c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d107      	bne.n	8003248 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff7d 	bl	8003140 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003246:	e03b      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff3f 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003256:	e033      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b21      	cmp	r3, #33	@ 0x21
 800325c:	d005      	beq.n	800326a <I2C_MasterTransmit_TXE+0xda>
 800325e:	7bbb      	ldrb	r3, [r7, #14]
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d12d      	bne.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b22      	cmp	r3, #34	@ 0x22
 8003268:	d12a      	bne.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003282:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003284:	e01c      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d103      	bne.n	800329a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f88e 	bl	80033b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003298:	e012      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032be:	e7ff      	b.n	80032c0 <I2C_MasterTransmit_TXE+0x130>
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b21      	cmp	r3, #33	@ 0x21
 80032e0:	d164      	bne.n	80033ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003310:	e04c      	b.n	80033ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d01d      	beq.n	8003354 <I2C_MasterTransmit_BTF+0x8c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d01a      	beq.n	8003354 <I2C_MasterTransmit_BTF+0x8c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003324:	d016      	beq.n	8003354 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003334:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2211      	movs	r2, #17
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fec1 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
}
 8003352:	e02b      	b.n	80033ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003362:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d107      	bne.n	800339e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fed2 	bl	8003140 <HAL_I2C_MemTxCpltCallback>
}
 800339c:	e006      	b.n	80033ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fe94 	bl	80030d4 <HAL_I2C_MasterTxCpltCallback>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11d      	bne.n	8003408 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10b      	bne.n	80033ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80033ea:	e077      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	121b      	asrs	r3, r3, #8
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003406:	e069      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10b      	bne.n	8003428 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003414:	b2da      	uxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003426:	e059      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342c:	2b02      	cmp	r3, #2
 800342e:	d152      	bne.n	80034d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b22      	cmp	r3, #34	@ 0x22
 8003434:	d10d      	bne.n	8003452 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003444:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003450:	e044      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b21      	cmp	r3, #33	@ 0x21
 8003460:	d112      	bne.n	8003488 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003486:	e029      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d124      	bne.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	2b21      	cmp	r3, #33	@ 0x21
 8003496:	d121      	bne.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fe36 	bl	8003140 <HAL_I2C_MemTxCpltCallback>
}
 80034d4:	e002      	b.n	80034dc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fa4c 	bl	8002974 <I2C_Flush_DR>
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b22      	cmp	r3, #34	@ 0x22
 80034f6:	f040 80b9 	bne.w	800366c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d921      	bls.n	8003552 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b03      	cmp	r3, #3
 800353c:	f040 8096 	bne.w	800366c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003550:	e08c      	b.n	800366c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	2b02      	cmp	r3, #2
 8003558:	d07f      	beq.n	800365a <I2C_MasterReceive_RXNE+0x176>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <I2C_MasterReceive_RXNE+0x82>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d179      	bne.n	800365a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f001 fa6a 	bl	8004a40 <I2C_WaitOnSTOPRequestThroughIT>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14c      	bne.n	800360c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003580:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003590:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d10a      	bne.n	80035e2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fdba 	bl	8003154 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035e0:	e044      	b.n	800366c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d002      	beq.n	80035f6 <I2C_MasterReceive_RXNE+0x112>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d103      	bne.n	80035fe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80035fc:	e002      	b.n	8003604 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2212      	movs	r2, #18
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fd fc4f 	bl	8000ea8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800360a:	e02f      	b.n	800366c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800361a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fd88 	bl	8003168 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003658:	e008      	b.n	800366c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	605a      	str	r2, [r3, #4]
}
 800366a:	e7ff      	b.n	800366c <I2C_MasterReceive_RXNE+0x188>
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036c2:	e0c8      	b.n	8003856 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d129      	bne.n	8003722 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00a      	beq.n	80036fa <I2C_MasterReceive_BTF+0x86>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d007      	beq.n	80036fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003720:	e099      	b.n	8003856 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 8081 	bne.w	8003830 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <I2C_MasterReceive_BTF+0xc6>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d108      	bne.n	800374c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e019      	b.n	8003780 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <I2C_MasterReceive_BTF+0xe4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d108      	bne.n	800376a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e00a      	b.n	8003780 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b10      	cmp	r3, #16
 800376e:	d007      	beq.n	8003780 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80037da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b40      	cmp	r3, #64	@ 0x40
 80037ee:	d10a      	bne.n	8003806 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fca8 	bl	8003154 <HAL_I2C_MemRxCpltCallback>
}
 8003804:	e027      	b.n	8003856 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d002      	beq.n	800381a <I2C_MasterReceive_BTF+0x1a6>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b20      	cmp	r3, #32
 8003818:	d103      	bne.n	8003822 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003820:	e002      	b.n	8003828 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2212      	movs	r2, #18
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fd fb3d 	bl	8000ea8 <HAL_I2C_MasterRxCpltCallback>
}
 800382e:	e012      	b.n	8003856 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d117      	bne.n	80038a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800388a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800388c:	e067      	b.n	800395e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
}
 80038a0:	e05d      	b.n	800395e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038aa:	d133      	bne.n	8003914 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b21      	cmp	r3, #33	@ 0x21
 80038b6:	d109      	bne.n	80038cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038c8:	611a      	str	r2, [r3, #16]
 80038ca:	e008      	b.n	80038de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <I2C_Master_SB+0x92>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d032      	beq.n	800395e <I2C_Master_SB+0x100>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02d      	beq.n	800395e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003910:	605a      	str	r2, [r3, #4]
}
 8003912:	e024      	b.n	800395e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10e      	bne.n	800393a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	b29b      	uxth	r3, r3
 8003922:	11db      	asrs	r3, r3, #7
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f063 030f 	orn	r3, r3, #15
 8003930:	b2da      	uxtb	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]
}
 8003938:	e011      	b.n	800395e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10d      	bne.n	800395e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	b29b      	uxth	r3, r3
 8003948:	11db      	asrs	r3, r3, #7
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0306 	and.w	r3, r3, #6
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f063 030e 	orn	r3, r3, #14
 8003956:	b2da      	uxtb	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <I2C_Master_ADD10+0x26>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00c      	beq.n	80039b2 <I2C_Master_ADD10+0x48>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039b0:	605a      	str	r2, [r3, #4]
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039be:	b480      	push	{r7}
 80039c0:	b091      	sub	sp, #68	@ 0x44
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b22      	cmp	r3, #34	@ 0x22
 80039e6:	f040 8169 	bne.w	8003cbc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <I2C_Master_ADDR+0x54>
 80039f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039f6:	2b40      	cmp	r3, #64	@ 0x40
 80039f8:	d10b      	bne.n	8003a12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	e160      	b.n	8003cd4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <I2C_Master_ADDR+0x98>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a22:	d118      	bne.n	8003a56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a24:	2300      	movs	r3, #0
 8003a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a54:	e13e      	b.n	8003cd4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d113      	bne.n	8003a88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e115      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f040 808a 	bne.w	8003ba8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a9a:	d137      	bne.n	8003b0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aba:	d113      	bne.n	8003ae4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	e0e7      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e0d3      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d02e      	beq.n	8003b70 <I2C_Master_ADDR+0x1b2>
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d02b      	beq.n	8003b70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1a:	2b12      	cmp	r3, #18
 8003b1c:	d102      	bne.n	8003b24 <I2C_Master_ADDR+0x166>
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d125      	bne.n	8003b70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00e      	beq.n	8003b48 <I2C_Master_ADDR+0x18a>
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d00b      	beq.n	8003b48 <I2C_Master_ADDR+0x18a>
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d008      	beq.n	8003b48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e007      	b.n	8003b58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	e0a1      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e085      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d14d      	bne.n	8003c4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d016      	beq.n	8003be6 <I2C_Master_ADDR+0x228>
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d013      	beq.n	8003be6 <I2C_Master_ADDR+0x228>
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d010      	beq.n	8003be6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e007      	b.n	8003bf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c04:	d117      	bne.n	8003c36 <I2C_Master_ADDR+0x278>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c0c:	d00b      	beq.n	8003c26 <I2C_Master_ADDR+0x268>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d008      	beq.n	8003c26 <I2C_Master_ADDR+0x268>
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d005      	beq.n	8003c26 <I2C_Master_ADDR+0x268>
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d002      	beq.n	8003c26 <I2C_Master_ADDR+0x268>
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d107      	bne.n	8003c36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	e032      	b.n	8003cb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6c:	d117      	bne.n	8003c9e <I2C_Master_ADDR+0x2e0>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c74:	d00b      	beq.n	8003c8e <I2C_Master_ADDR+0x2d0>
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d008      	beq.n	8003c8e <I2C_Master_ADDR+0x2d0>
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d005      	beq.n	8003c8e <I2C_Master_ADDR+0x2d0>
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d002      	beq.n	8003c8e <I2C_Master_ADDR+0x2d0>
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d107      	bne.n	8003c9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003cba:	e00b      	b.n	8003cd4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	e7ff      	b.n	8003cd4 <I2C_Master_ADDR+0x316>
 8003cd4:	bf00      	nop
 8003cd6:	3744      	adds	r7, #68	@ 0x44
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02b      	beq.n	8003d52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d114      	bne.n	8003d52 <I2C_SlaveTransmit_TXE+0x72>
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b29      	cmp	r3, #41	@ 0x29
 8003d2c:	d111      	bne.n	8003d52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2221      	movs	r2, #33	@ 0x21
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2228      	movs	r2, #40	@ 0x28
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff f9cb 	bl	80030e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d011      	beq.n	8003d90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003daa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d02c      	beq.n	8003e10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d114      	bne.n	8003e10 <I2C_SlaveReceive_RXNE+0x74>
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dea:	d111      	bne.n	8003e10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2222      	movs	r2, #34	@ 0x22
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2228      	movs	r2, #40	@ 0x28
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff f976 	bl	80030fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e76:	2b28      	cmp	r3, #40	@ 0x28
 8003e78:	d125      	bne.n	8003ec6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	81bb      	strh	r3, [r7, #12]
 8003ea8:	e002      	b.n	8003eb0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003eb8:	89ba      	ldrh	r2, [r7, #12]
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff f926 	bl	8003110 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ec4:	e00e      	b.n	8003ee4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f48:	d172      	bne.n	8004030 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b22      	cmp	r3, #34	@ 0x22
 8003f4e:	d002      	beq.n	8003f56 <I2C_Slave_STOPF+0x6a>
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f54:	d135      	bne.n	8003fc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe f920 	bl	80021d4 <HAL_DMA_GetState>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d049      	beq.n	800402e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	4a69      	ldr	r2, [pc, #420]	@ (8004144 <I2C_Slave_STOPF+0x258>)
 8003fa0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd ff68 	bl	8001e7c <HAL_DMA_Abort_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d03d      	beq.n	800402e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc0:	e035      	b.n	800402e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f043 0204 	orr.w	r2, r3, #4
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe f8ea 	bl	80021d4 <HAL_DMA_GetState>
 8004000:	4603      	mov	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d014      	beq.n	8004030 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400a:	4a4e      	ldr	r2, [pc, #312]	@ (8004144 <I2C_Slave_STOPF+0x258>)
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd ff32 	bl	8001e7c <HAL_DMA_Abort_IT>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004028:	4610      	mov	r0, r2
 800402a:	4798      	blx	r3
 800402c:	e000      	b.n	8004030 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800402e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03e      	beq.n	80040b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d112      	bne.n	800406e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d112      	bne.n	80040a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	f043 0204 	orr.w	r2, r3, #4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8b7 	bl	8004234 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040c6:	e039      	b.n	800413c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80040cc:	d109      	bne.n	80040e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2228      	movs	r2, #40	@ 0x28
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff f80d 	bl	80030fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b28      	cmp	r3, #40	@ 0x28
 80040ec:	d111      	bne.n	8004112 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <I2C_Slave_STOPF+0x25c>)
 80040f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff f80e 	bl	800312c <HAL_I2C_ListenCpltCallback>
}
 8004110:	e014      	b.n	800413c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	2b22      	cmp	r3, #34	@ 0x22
 8004118:	d002      	beq.n	8004120 <I2C_Slave_STOPF+0x234>
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b22      	cmp	r3, #34	@ 0x22
 800411e:	d10d      	bne.n	800413c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe ffe0 	bl	80030fc <HAL_I2C_SlaveRxCpltCallback>
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	0800459d 	.word	0x0800459d
 8004148:	ffff0000 	.word	0xffff0000

0800414c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d002      	beq.n	800416e <I2C_Slave_AF+0x22>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b20      	cmp	r3, #32
 800416c:	d129      	bne.n	80041c2 <I2C_Slave_AF+0x76>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b28      	cmp	r3, #40	@ 0x28
 8004172:	d126      	bne.n	80041c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a2e      	ldr	r2, [pc, #184]	@ (8004230 <I2C_Slave_AF+0xe4>)
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004188:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004192:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe ffb6 	bl	800312c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041c0:	e031      	b.n	8004226 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b21      	cmp	r3, #33	@ 0x21
 80041c6:	d129      	bne.n	800421c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a19      	ldr	r2, [pc, #100]	@ (8004230 <I2C_Slave_AF+0xe4>)
 80041cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2221      	movs	r2, #33	@ 0x21
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe fbb0 	bl	8002974 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe ff67 	bl	80030e8 <HAL_I2C_SlaveTxCpltCallback>
}
 800421a:	e004      	b.n	8004226 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004224:	615a      	str	r2, [r3, #20]
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	ffff0000 	.word	0xffff0000

08004234 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004242:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800424a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	2b10      	cmp	r3, #16
 8004250:	d002      	beq.n	8004258 <I2C_ITError+0x24>
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d10a      	bne.n	800426e <I2C_ITError+0x3a>
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b22      	cmp	r3, #34	@ 0x22
 800425c:	d107      	bne.n	800426e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800426c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004274:	2b28      	cmp	r3, #40	@ 0x28
 8004276:	d107      	bne.n	8004288 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2228      	movs	r2, #40	@ 0x28
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004286:	e015      	b.n	80042b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004296:	d00a      	beq.n	80042ae <I2C_ITError+0x7a>
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b60      	cmp	r3, #96	@ 0x60
 800429c:	d007      	beq.n	80042ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c2:	d162      	bne.n	800438a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d020      	beq.n	8004324 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004490 <I2C_ITError+0x25c>)
 80042e8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd fdc4 	bl	8001e7c <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8089 	beq.w	800440e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800431e:	4610      	mov	r0, r2
 8004320:	4798      	blx	r3
 8004322:	e074      	b.n	800440e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	4a59      	ldr	r2, [pc, #356]	@ (8004490 <I2C_ITError+0x25c>)
 800432a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fda3 	bl	8001e7c <HAL_DMA_Abort_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d068      	beq.n	800440e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d10b      	bne.n	8004362 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004384:	4610      	mov	r0, r2
 8004386:	4798      	blx	r3
 8004388:	e041      	b.n	800440e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b60      	cmp	r3, #96	@ 0x60
 8004394:	d125      	bne.n	80043e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	d10b      	bne.n	80043ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fece 	bl	800317c <HAL_I2C_AbortCpltCallback>
 80043e0:	e015      	b.n	800440e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d10b      	bne.n	8004408 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fe fead 	bl	8003168 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800444a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d113      	bne.n	8004488 <I2C_ITError+0x254>
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b28      	cmp	r3, #40	@ 0x28
 8004464:	d110      	bne.n	8004488 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <I2C_ITError+0x260>)
 800446a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fe fe52 	bl	800312c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	0800459d 	.word	0x0800459d
 8004494:	ffff0000 	.word	0xffff0000

08004498 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	460b      	mov	r3, r1
 80044a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d006      	beq.n	80044c2 <I2C_MasterRequestWrite+0x2a>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d003      	beq.n	80044c2 <I2C_MasterRequestWrite+0x2a>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044c0:	d108      	bne.n	80044d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e00b      	b.n	80044ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	2b12      	cmp	r3, #18
 80044da:	d107      	bne.n	80044ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f8f7 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00d      	beq.n	8004520 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004512:	d103      	bne.n	800451c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e035      	b.n	800458c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004528:	d108      	bne.n	800453c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	e01b      	b.n	8004574 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800453c:	897b      	ldrh	r3, [r7, #10]
 800453e:	11db      	asrs	r3, r3, #7
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0306 	and.w	r3, r3, #6
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f063 030f 	orn	r3, r3, #15
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	490e      	ldr	r1, [pc, #56]	@ (8004594 <I2C_MasterRequestWrite+0xfc>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f940 	bl	80047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e010      	b.n	800458c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800456a:	897b      	ldrh	r3, [r7, #10]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4907      	ldr	r1, [pc, #28]	@ (8004598 <I2C_MasterRequestWrite+0x100>)
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f930 	bl	80047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	00010008 	.word	0x00010008
 8004598:	00010002 	.word	0x00010002

0800459c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045b6:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <I2C_DMAAbort+0x148>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	4a4a      	ldr	r2, [pc, #296]	@ (80046e8 <I2C_DMAAbort+0x14c>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0a1a      	lsrs	r2, r3, #8
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00da      	lsls	r2, r3, #3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80045e2:	e00a      	b.n	80045fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f8:	d0ea      	beq.n	80045d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	2200      	movs	r2, #0
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	2200      	movs	r2, #0
 8004618:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004628:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463c:	2200      	movs	r2, #0
 800463e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464c:	2200      	movs	r2, #0
 800464e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b60      	cmp	r3, #96	@ 0x60
 800466a:	d10e      	bne.n	800468a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7fe fd7a 	bl	800317c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004688:	e027      	b.n	80046da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004690:	2b28      	cmp	r3, #40	@ 0x28
 8004692:	d117      	bne.n	80046c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2228      	movs	r2, #40	@ 0x28
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046c2:	e007      	b.n	80046d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f7fe fd47 	bl	8003168 <HAL_I2C_ErrorCallback>
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000000 	.word	0x20000000
 80046e8:	14f8b589 	.word	0x14f8b589

080046ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fc:	e048      	b.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004704:	d044      	beq.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fd f925 	bl	8001954 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d139      	bne.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10d      	bne.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	e00c      	b.n	800475c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	43da      	mvns	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	d116      	bne.n	8004790 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e023      	b.n	80047d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10d      	bne.n	80047b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	e00c      	b.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	43da      	mvns	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4013      	ands	r3, r2
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d093      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ee:	e071      	b.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fe:	d123      	bne.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e067      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800484e:	d041      	beq.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004850:	f7fd f880 	bl	8001954 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d302      	bcc.n	8004866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d136      	bne.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10c      	bne.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	43da      	mvns	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e00b      	b.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e021      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10c      	bne.n	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	43da      	mvns	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e00b      	b.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	f47f af6d 	bne.w	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492c:	e034      	b.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8b8 	bl	8004aa4 <I2C_IsAcknowledgeFailed>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e034      	b.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004944:	d028      	beq.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd f805 	bl	8001954 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11d      	bne.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	d016      	beq.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	2b80      	cmp	r3, #128	@ 0x80
 80049a4:	d1c3      	bne.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049bc:	e034      	b.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f870 	bl	8004aa4 <I2C_IsAcknowledgeFailed>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e034      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049d4:	d028      	beq.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fc ffbd 	bl	8001954 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11d      	bne.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d016      	beq.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e007      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d1c3      	bne.n	80049be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	08db      	lsrs	r3, r3, #3
 8004a52:	4a13      	ldr	r2, [pc, #76]	@ (8004aa0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	0a1a      	lsrs	r2, r3, #8
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e008      	b.n	8004a90 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8c:	d0e9      	beq.n	8004a62 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	14f8b589 	.word	0x14f8b589

08004aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aba:	d11b      	bne.n	8004af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f043 0204 	orr.w	r2, r3, #4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004b12:	d103      	bne.n	8004b1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b1a:	e007      	b.n	8004b2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004b24:	d102      	bne.n	8004b2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e267      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d075      	beq.n	8004c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b56:	4b88      	ldr	r3, [pc, #544]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b62:	4b85      	ldr	r3, [pc, #532]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d112      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6e:	4b82      	ldr	r3, [pc, #520]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05b      	beq.n	8004c40 <HAL_RCC_OscConfig+0x108>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d157      	bne.n	8004c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e242      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9c:	d106      	bne.n	8004bac <HAL_RCC_OscConfig+0x74>
 8004b9e:	4b76      	ldr	r3, [pc, #472]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a75      	ldr	r2, [pc, #468]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e01d      	b.n	8004be8 <HAL_RCC_OscConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x98>
 8004bb6:	4b70      	ldr	r3, [pc, #448]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6f      	ldr	r2, [pc, #444]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0xb0>
 8004bd0:	4b69      	ldr	r3, [pc, #420]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a68      	ldr	r2, [pc, #416]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b66      	ldr	r3, [pc, #408]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a65      	ldr	r2, [pc, #404]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fc feb0 	bl	8001954 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fc feac 	bl	8001954 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	@ 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e207      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xc0>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fc fe9c 	bl	8001954 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fc fe98 	bl	8001954 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e1f3      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	4b51      	ldr	r3, [pc, #324]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0xe8>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d063      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5a:	4b47      	ldr	r3, [pc, #284]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d11c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c66:	4b44      	ldr	r3, [pc, #272]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	4b41      	ldr	r3, [pc, #260]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x152>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1c7      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4937      	ldr	r1, [pc, #220]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	e03a      	b.n	8004d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca8:	4b34      	ldr	r3, [pc, #208]	@ (8004d7c <HAL_RCC_OscConfig+0x244>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fc fe51 	bl	8001954 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb6:	f7fc fe4d 	bl	8001954 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e1a8      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd4:	4b28      	ldr	r3, [pc, #160]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4925      	ldr	r1, [pc, #148]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	e015      	b.n	8004d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cea:	4b24      	ldr	r3, [pc, #144]	@ (8004d7c <HAL_RCC_OscConfig+0x244>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fe30 	bl	8001954 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fc fe2c 	bl	8001954 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e187      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d036      	beq.n	8004d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2a:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <HAL_RCC_OscConfig+0x248>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fc fe10 	bl	8001954 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d38:	f7fc fe0c 	bl	8001954 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e167      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x200>
 8004d56:	e01b      	b.n	8004d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <HAL_RCC_OscConfig+0x248>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fc fdf9 	bl	8001954 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	e00e      	b.n	8004d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d66:	f7fc fdf5 	bl	8001954 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d907      	bls.n	8004d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e150      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	42470000 	.word	0x42470000
 8004d80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d84:	4b88      	ldr	r3, [pc, #544]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ea      	bne.n	8004d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8097 	beq.w	8004ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da2:	4b81      	ldr	r3, [pc, #516]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b77      	ldr	r3, [pc, #476]	@ (8004fac <HAL_RCC_OscConfig+0x474>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d118      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dda:	4b74      	ldr	r3, [pc, #464]	@ (8004fac <HAL_RCC_OscConfig+0x474>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a73      	ldr	r2, [pc, #460]	@ (8004fac <HAL_RCC_OscConfig+0x474>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de6:	f7fc fdb5 	bl	8001954 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fc fdb1 	bl	8001954 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e10c      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b6a      	ldr	r3, [pc, #424]	@ (8004fac <HAL_RCC_OscConfig+0x474>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x2ea>
 8004e14:	4b64      	ldr	r3, [pc, #400]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e18:	4a63      	ldr	r2, [pc, #396]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e20:	e01c      	b.n	8004e5c <HAL_RCC_OscConfig+0x324>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x30c>
 8004e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e36:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0x324>
 8004e44:	4b58      	ldr	r3, [pc, #352]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	4a57      	ldr	r2, [pc, #348]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e50:	4b55      	ldr	r3, [pc, #340]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	4a54      	ldr	r2, [pc, #336]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f023 0304 	bic.w	r3, r3, #4
 8004e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fd76 	bl	8001954 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fc fd72 	bl	8001954 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0cb      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ee      	beq.n	8004e6c <HAL_RCC_OscConfig+0x334>
 8004e8e:	e014      	b.n	8004eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e90:	f7fc fd60 	bl	8001954 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e98:	f7fc fd5c 	bl	8001954 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0b5      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eae:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ee      	bne.n	8004e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	4a38      	ldr	r2, [pc, #224]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80a1 	beq.w	8005018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ed6:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d05c      	beq.n	8004f9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d141      	bne.n	8004f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eea:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <HAL_RCC_OscConfig+0x478>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fd30 	bl	8001954 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fc fd2c 	bl	8001954 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e087      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	491b      	ldr	r1, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f40:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <HAL_RCC_OscConfig+0x478>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fc fd05 	bl	8001954 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fc fd01 	bl	8001954 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e05c      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f60:	4b11      	ldr	r3, [pc, #68]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x416>
 8004f6c:	e054      	b.n	8005018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <HAL_RCC_OscConfig+0x478>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fc fcee 	bl	8001954 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fc fcea 	bl	8001954 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e045      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <HAL_RCC_OscConfig+0x470>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x444>
 8004f9a:	e03d      	b.n	8005018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e038      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40007000 	.word	0x40007000
 8004fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <HAL_RCC_OscConfig+0x4ec>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d028      	beq.n	8005014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d121      	bne.n	8005014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d11a      	bne.n	8005014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d111      	bne.n	8005014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d107      	bne.n	8005014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0cc      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800503c:	4b68      	ldr	r3, [pc, #416]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d90c      	bls.n	8005064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b65      	ldr	r3, [pc, #404]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b63      	ldr	r3, [pc, #396]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b8      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a58      	ldr	r2, [pc, #352]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005094:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a52      	ldr	r2, [pc, #328]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800509e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b50      	ldr	r3, [pc, #320]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	494d      	ldr	r1, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d044      	beq.n	8005148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d119      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d003      	beq.n	80050e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e6:	4b3f      	ldr	r3, [pc, #252]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e06f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	4b3b      	ldr	r3, [pc, #236]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e067      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005106:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4934      	ldr	r1, [pc, #208]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005118:	f7fc fc1c 	bl	8001954 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	e00a      	b.n	8005136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fc fc18 	bl	8001954 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e04f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 020c 	and.w	r2, r3, #12
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d1eb      	bne.n	8005120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d20c      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e032      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4916      	ldr	r1, [pc, #88]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ae:	f000 f821 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc fb7c 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023c00 	.word	0x40023c00
 80051e4:	40023800 	.word	0x40023800
 80051e8:	08009a80 	.word	0x08009a80
 80051ec:	20000000 	.word	0x20000000
 80051f0:	20000004 	.word	0x20000004

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b094      	sub	sp, #80	@ 0x50
 80051fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800520c:	4b79      	ldr	r3, [pc, #484]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d00d      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x40>
 8005218:	2b08      	cmp	r3, #8
 800521a:	f200 80e1 	bhi.w	80053e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x34>
 8005222:	2b04      	cmp	r3, #4
 8005224:	d003      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x3a>
 8005226:	e0db      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005228:	4b73      	ldr	r3, [pc, #460]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800522a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800522c:	e0db      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800522e:	4b73      	ldr	r3, [pc, #460]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005230:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005232:	e0d8      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005234:	4b6f      	ldr	r3, [pc, #444]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800523c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800523e:	4b6d      	ldr	r3, [pc, #436]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d063      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524a:	4b6a      	ldr	r3, [pc, #424]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	2200      	movs	r2, #0
 8005252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005254:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525c:	633b      	str	r3, [r7, #48]	@ 0x30
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
 8005262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	f04f 0000 	mov.w	r0, #0
 800526e:	f04f 0100 	mov.w	r1, #0
 8005272:	0159      	lsls	r1, r3, #5
 8005274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005278:	0150      	lsls	r0, r2, #5
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4621      	mov	r1, r4
 8005280:	1a51      	subs	r1, r2, r1
 8005282:	6139      	str	r1, [r7, #16]
 8005284:	4629      	mov	r1, r5
 8005286:	eb63 0301 	sbc.w	r3, r3, r1
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005298:	4659      	mov	r1, fp
 800529a:	018b      	lsls	r3, r1, #6
 800529c:	4651      	mov	r1, sl
 800529e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052a2:	4651      	mov	r1, sl
 80052a4:	018a      	lsls	r2, r1, #6
 80052a6:	4651      	mov	r1, sl
 80052a8:	ebb2 0801 	subs.w	r8, r2, r1
 80052ac:	4659      	mov	r1, fp
 80052ae:	eb63 0901 	sbc.w	r9, r3, r1
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c6:	4690      	mov	r8, r2
 80052c8:	4699      	mov	r9, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	eb18 0303 	adds.w	r3, r8, r3
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	462b      	mov	r3, r5
 80052d4:	eb49 0303 	adc.w	r3, r9, r3
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052e6:	4629      	mov	r1, r5
 80052e8:	024b      	lsls	r3, r1, #9
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052f0:	4621      	mov	r1, r4
 80052f2:	024a      	lsls	r2, r1, #9
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052fa:	2200      	movs	r2, #0
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005304:	f7fb fc58 	bl	8000bb8 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005310:	e058      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005312:	4b38      	ldr	r3, [pc, #224]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	2200      	movs	r2, #0
 800531a:	4618      	mov	r0, r3
 800531c:	4611      	mov	r1, r2
 800531e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005322:	623b      	str	r3, [r7, #32]
 8005324:	2300      	movs	r3, #0
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
 8005328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	0159      	lsls	r1, r3, #5
 800533a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800533e:	0150      	lsls	r0, r2, #5
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4641      	mov	r1, r8
 8005346:	ebb2 0a01 	subs.w	sl, r2, r1
 800534a:	4649      	mov	r1, r9
 800534c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800535c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005364:	ebb2 040a 	subs.w	r4, r2, sl
 8005368:	eb63 050b 	sbc.w	r5, r3, fp
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	00eb      	lsls	r3, r5, #3
 8005376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	4643      	mov	r3, r8
 8005382:	18e3      	adds	r3, r4, r3
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	464b      	mov	r3, r9
 8005388:	eb45 0303 	adc.w	r3, r5, r3
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800539a:	4629      	mov	r1, r5
 800539c:	028b      	lsls	r3, r1, #10
 800539e:	4621      	mov	r1, r4
 80053a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053a4:	4621      	mov	r1, r4
 80053a6:	028a      	lsls	r2, r1, #10
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ae:	2200      	movs	r2, #0
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	61fa      	str	r2, [r7, #28]
 80053b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b8:	f7fb fbfe 	bl	8000bb8 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4613      	mov	r3, r2
 80053c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053c4:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	3301      	adds	r3, #1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053de:	e002      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3750      	adds	r7, #80	@ 0x50
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	007a1200 	.word	0x007a1200

08005400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005404:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <HAL_RCC_GetHCLKFreq+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000000 	.word	0x20000000

08005418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800541c:	f7ff fff0 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0a9b      	lsrs	r3, r3, #10
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	@ (800543c <HAL_RCC_GetPCLK1Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	08009a90 	.word	0x08009a90

08005440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005444:	f7ff ffdc 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0b5b      	lsrs	r3, r3, #13
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	08009a90 	.word	0x08009a90

08005468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e041      	b.n	80054fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb ffee 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f000 fa70 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d001      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e044      	b.n	80055aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1e      	ldr	r2, [pc, #120]	@ (80055b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800554a:	d013      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1a      	ldr	r2, [pc, #104]	@ (80055bc <HAL_TIM_Base_Start_IT+0xb4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x6c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d111      	bne.n	8005598 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d010      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	e007      	b.n	80055a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d020      	beq.n	8005630 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0202 	mvn.w	r2, #2
 8005600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f999 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f98b 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f99c 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d020      	beq.n	800567c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0204 	mvn.w	r2, #4
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f973 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f965 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f976 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01b      	beq.n	80056c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0208 	mvn.w	r2, #8
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2204      	movs	r2, #4
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f94d 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f93f 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f950 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d020      	beq.n	8005714 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0210 	mvn.w	r2, #16
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2208      	movs	r2, #8
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f927 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f919 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f92a 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0201 	mvn.w	r2, #1
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb fc36 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fab6 	bl	8005cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00c      	beq.n	8005780 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f8fb 	bl	8005976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0220 	mvn.w	r2, #32
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa88 	bl	8005cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0b4      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x186>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005800:	d03e      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0xd4>
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005806:	f200 8087 	bhi.w	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580e:	f000 8086 	beq.w	800591e <HAL_TIM_ConfigClockSource+0x172>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005816:	d87f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b70      	cmp	r3, #112	@ 0x70
 800581a:	d01a      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xa6>
 800581c:	2b70      	cmp	r3, #112	@ 0x70
 800581e:	d87b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b60      	cmp	r3, #96	@ 0x60
 8005822:	d050      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005824:	2b60      	cmp	r3, #96	@ 0x60
 8005826:	d877      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b50      	cmp	r3, #80	@ 0x50
 800582a:	d03c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xfa>
 800582c:	2b50      	cmp	r3, #80	@ 0x50
 800582e:	d873      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d058      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005834:	2b40      	cmp	r3, #64	@ 0x40
 8005836:	d86f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b30      	cmp	r3, #48	@ 0x30
 800583a:	d064      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b30      	cmp	r3, #48	@ 0x30
 800583e:	d86b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d060      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d867      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05c      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b10      	cmp	r3, #16
 800584e:	d05a      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	e062      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	f000 f999 	bl	8005b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	609a      	str	r2, [r3, #8]
      break;
 800587e:	e04f      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	f000 f982 	bl	8005b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058a2:	609a      	str	r2, [r3, #8]
      break;
 80058a4:	e03c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 f8f6 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2150      	movs	r1, #80	@ 0x50
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f94f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 80058c4:	e02c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 f915 	bl	8005b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2160      	movs	r1, #96	@ 0x60
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 f93f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 80058e4:	e01c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 f8d6 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2140      	movs	r1, #64	@ 0x40
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f92f 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005904:	e00c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f000 f926 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005916:	e003      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e000      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a88 <TIM_Base_SetConfig+0xfc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_Base_SetConfig+0x38>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d00b      	beq.n	80059c4 <TIM_Base_SetConfig+0x38>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a37      	ldr	r2, [pc, #220]	@ (8005a8c <TIM_Base_SetConfig+0x100>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_Base_SetConfig+0x38>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a36      	ldr	r2, [pc, #216]	@ (8005a90 <TIM_Base_SetConfig+0x104>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x38>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a35      	ldr	r2, [pc, #212]	@ (8005a94 <TIM_Base_SetConfig+0x108>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a88 <TIM_Base_SetConfig+0xfc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01b      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e4:	d017      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a28      	ldr	r2, [pc, #160]	@ (8005a8c <TIM_Base_SetConfig+0x100>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a27      	ldr	r2, [pc, #156]	@ (8005a90 <TIM_Base_SetConfig+0x104>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00f      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a26      	ldr	r2, [pc, #152]	@ (8005a94 <TIM_Base_SetConfig+0x108>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <TIM_Base_SetConfig+0x10c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a24      	ldr	r2, [pc, #144]	@ (8005a9c <TIM_Base_SetConfig+0x110>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a23      	ldr	r2, [pc, #140]	@ (8005aa0 <TIM_Base_SetConfig+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d108      	bne.n	8005a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a88 <TIM_Base_SetConfig+0xfc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d105      	bne.n	8005a7a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f023 0201 	bic.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0201 	bic.w	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 030a 	bic.w	r3, r3, #10
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0210 	bic.w	r2, r3, #16
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f043 0307 	orr.w	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e050      	b.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d018      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3c:	d013      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00e      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d009      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a15      	ldr	r2, [pc, #84]	@ (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a13      	ldr	r2, [pc, #76]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10c      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40014000 	.word	0x40014000

08005cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e042      	b.n	8005d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb fbda 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	@ 0x24
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fdcb 	bl	80068bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	@ 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d156      	bne.n	8005e44 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Transmit_DMA+0x26>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e04f      	b.n	8005e46 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2221      	movs	r2, #33	@ 0x21
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <HAL_UART_Transmit_DMA+0xd4>)
 8005dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	4a20      	ldr	r2, [pc, #128]	@ (8005e54 <HAL_UART_Transmit_DMA+0xd8>)
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	4a1f      	ldr	r2, [pc, #124]	@ (8005e58 <HAL_UART_Transmit_DMA+0xdc>)
 8005ddc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	2200      	movs	r2, #0
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005de6:	f107 0308 	add.w	r3, r7, #8
 8005dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	f7fb ff75 	bl	8001cec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6a39      	ldr	r1, [r7, #32]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3730      	adds	r7, #48	@ 0x30
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	080063e9 	.word	0x080063e9
 8005e54:	08006483 	.word	0x08006483
 8005e58:	0800649f 	.word	0x0800649f

08005e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x66>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fc40 	bl	8006740 <UART_Receive_IT>
      return;
 8005ec0:	e25b      	b.n	800637a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80de 	beq.w	8006088 <HAL_UART_IRQHandler+0x22c>
 8005ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005edc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80d1 	beq.w	8006088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_UART_IRQHandler+0xae>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_UART_IRQHandler+0xd2>
 8005f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_UART_IRQHandler+0xf6>
 8005f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d011      	beq.n	8005f82 <HAL_UART_IRQHandler+0x126>
 8005f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7a:	f043 0208 	orr.w	r2, r3, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 81f2 	beq.w	8006370 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_UART_IRQHandler+0x14e>
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fbcb 	bl	8006740 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x17a>
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d04f      	beq.n	8006076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fad3 	bl	8006582 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d141      	bne.n	800606e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3314      	adds	r3, #20
 8005ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006016:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800601a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800602e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1d9      	bne.n	8005fea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d013      	beq.n	8006066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006042:	4a7e      	ldr	r2, [pc, #504]	@ (800623c <HAL_UART_IRQHandler+0x3e0>)
 8006044:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	4618      	mov	r0, r3
 800604c:	f7fb ff16 	bl	8001e7c <HAL_DMA_Abort_IT>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006064:	e00e      	b.n	8006084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9a8 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	e00a      	b.n	8006084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9a4 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	e006      	b.n	8006084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9a0 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006082:	e175      	b.n	8006370 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	bf00      	nop
    return;
 8006086:	e173      	b.n	8006370 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 814f 	bne.w	8006330 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8148 	beq.w	8006330 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8141 	beq.w	8006330 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	f040 80b6 	bne.w	8006240 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8145 	beq.w	8006374 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060f2:	429a      	cmp	r2, r3
 80060f4:	f080 813e 	bcs.w	8006374 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610a:	f000 8088 	beq.w	800621e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800612c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800613a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800613e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006146:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1d9      	bne.n	800610e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800616a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800617e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006182:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006186:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e1      	bne.n	800615a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e3      	bne.n	8006196 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ee:	f023 0310 	bic.w	r3, r3, #16
 80061f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006200:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006202:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006206:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800620e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e3      	bne.n	80061dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	4618      	mov	r0, r3
 800621a:	f7fb fdbf 	bl	8001d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b29b      	uxth	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f8cb 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800623a:	e09b      	b.n	8006374 <HAL_UART_IRQHandler+0x518>
 800623c:	08006649 	.word	0x08006649
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006248:	b29b      	uxth	r3, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 808e 	beq.w	8006378 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800625c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8089 	beq.w	8006378 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800627c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800628a:	647a      	str	r2, [r7, #68]	@ 0x44
 800628c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006290:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e3      	bne.n	8006266 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	623b      	str	r3, [r7, #32]
   return(result);
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80062c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e3      	bne.n	800629e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006308:	61fa      	str	r2, [r7, #28]
 800630a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	617b      	str	r3, [r7, #20]
   return(result);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e3      	bne.n	80062e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f851 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800632e:	e023      	b.n	8006378 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <HAL_UART_IRQHandler+0x4f4>
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f991 	bl	8006670 <UART_Transmit_IT>
    return;
 800634e:	e014      	b.n	800637a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <HAL_UART_IRQHandler+0x51e>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f9d1 	bl	8006710 <UART_EndTransmit_IT>
    return;
 800636e:	e004      	b.n	800637a <HAL_UART_IRQHandler+0x51e>
    return;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <HAL_UART_IRQHandler+0x51e>
      return;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_UART_IRQHandler+0x51e>
      return;
 8006378:	bf00      	nop
  }
}
 800637a:	37e8      	adds	r7, #232	@ 0xe8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b090      	sub	sp, #64	@ 0x40
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d137      	bne.n	8006474 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006406:	2200      	movs	r2, #0
 8006408:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800640a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	623b      	str	r3, [r7, #32]
   return(result);
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006420:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800642a:	633a      	str	r2, [r7, #48]	@ 0x30
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e5      	bne.n	800640a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60fb      	str	r3, [r7, #12]
   return(result);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
 8006456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800645e:	61fa      	str	r2, [r7, #28]
 8006460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	617b      	str	r3, [r7, #20]
   return(result);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006472:	e002      	b.n	800647a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006474:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006476:	f7ff ff83 	bl	8006380 <HAL_UART_TxCpltCallback>
}
 800647a:	bf00      	nop
 800647c:	3740      	adds	r7, #64	@ 0x40
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff ff7f 	bl	8006394 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ba:	2b80      	cmp	r3, #128	@ 0x80
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b21      	cmp	r3, #33	@ 0x21
 80064d0:	d108      	bne.n	80064e4 <UART_DMAError+0x46>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80064de:	68b8      	ldr	r0, [r7, #8]
 80064e0:	f000 f827 	bl	8006532 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b40      	cmp	r3, #64	@ 0x40
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b22      	cmp	r3, #34	@ 0x22
 8006504:	d108      	bne.n	8006518 <UART_DMAError+0x7a>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006512:	68b8      	ldr	r0, [r7, #8]
 8006514:	f000 f835 	bl	8006582 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	f043 0210 	orr.w	r2, r3, #16
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f7ff ff49 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006532:	b480      	push	{r7}
 8006534:	b089      	sub	sp, #36	@ 0x24
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	60bb      	str	r3, [r7, #8]
   return(result);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	61ba      	str	r2, [r7, #24]
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6979      	ldr	r1, [r7, #20]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	613b      	str	r3, [r7, #16]
   return(result);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006576:	bf00      	nop
 8006578:	3724      	adds	r7, #36	@ 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006582:	b480      	push	{r7}
 8006584:	b095      	sub	sp, #84	@ 0x54
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e5      	bne.n	800658a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d119      	bne.n	800662e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	60bb      	str	r3, [r7, #8]
   return(result);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0310 	bic.w	r3, r3, #16
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800661a:	61ba      	str	r2, [r7, #24]
 800661c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800663c:	bf00      	nop
 800663e:	3754      	adds	r7, #84	@ 0x54
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff feaa 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b21      	cmp	r3, #33	@ 0x21
 8006682:	d13e      	bne.n	8006702 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668c:	d114      	bne.n	80066b8 <UART_Transmit_IT+0x48>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d110      	bne.n	80066b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]
 80066b6:	e008      	b.n	80066ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6211      	str	r1, [r2, #32]
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4619      	mov	r1, r3
 80066d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	e000      	b.n	8006704 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006702:	2302      	movs	r3, #2
  }
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006726:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fe25 	bl	8006380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	@ 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b22      	cmp	r3, #34	@ 0x22
 8006752:	f040 80ae 	bne.w	80068b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675e:	d117      	bne.n	8006790 <UART_Receive_IT+0x50>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d113      	bne.n	8006790 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	b29a      	uxth	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	629a      	str	r2, [r3, #40]	@ 0x28
 800678e:	e026      	b.n	80067de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a2:	d007      	beq.n	80067b4 <UART_Receive_IT+0x74>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <UART_Receive_IT+0x82>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e008      	b.n	80067d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4619      	mov	r1, r3
 80067ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d15d      	bne.n	80068ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0220 	bic.w	r2, r2, #32
 8006800:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	d135      	bne.n	80068a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	613b      	str	r3, [r7, #16]
   return(result);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685e:	623a      	str	r2, [r7, #32]
 8006860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	69f9      	ldr	r1, [r7, #28]
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	61bb      	str	r3, [r7, #24]
   return(result);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d10a      	bne.n	8006896 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fd97 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
 80068a2:	e002      	b.n	80068aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fd7f 	bl	80063a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e002      	b.n	80068b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	@ 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b0c0      	sub	sp, #256	@ 0x100
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d8:	68d9      	ldr	r1, [r3, #12]
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	ea40 0301 	orr.w	r3, r0, r1
 80068e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006914:	f021 010c 	bic.w	r1, r1, #12
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006922:	430b      	orrs	r3, r1
 8006924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006936:	6999      	ldr	r1, [r3, #24]
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	ea40 0301 	orr.w	r3, r0, r1
 8006942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b8f      	ldr	r3, [pc, #572]	@ (8006b88 <UART_SetConfig+0x2cc>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d005      	beq.n	800695c <UART_SetConfig+0xa0>
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b8d      	ldr	r3, [pc, #564]	@ (8006b8c <UART_SetConfig+0x2d0>)
 8006958:	429a      	cmp	r2, r3
 800695a:	d104      	bne.n	8006966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fe fd70 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8006960:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006964:	e003      	b.n	800696e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006966:	f7fe fd57 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 800696a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006978:	f040 810c 	bne.w	8006b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006986:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800698a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800698e:	4622      	mov	r2, r4
 8006990:	462b      	mov	r3, r5
 8006992:	1891      	adds	r1, r2, r2
 8006994:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006996:	415b      	adcs	r3, r3
 8006998:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800699a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800699e:	4621      	mov	r1, r4
 80069a0:	eb12 0801 	adds.w	r8, r2, r1
 80069a4:	4629      	mov	r1, r5
 80069a6:	eb43 0901 	adc.w	r9, r3, r1
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069be:	4690      	mov	r8, r2
 80069c0:	4699      	mov	r9, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	eb18 0303 	adds.w	r3, r8, r3
 80069c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069cc:	462b      	mov	r3, r5
 80069ce:	eb49 0303 	adc.w	r3, r9, r3
 80069d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069ea:	460b      	mov	r3, r1
 80069ec:	18db      	adds	r3, r3, r3
 80069ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80069f0:	4613      	mov	r3, r2
 80069f2:	eb42 0303 	adc.w	r3, r2, r3
 80069f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a00:	f7fa f8da 	bl	8000bb8 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4b61      	ldr	r3, [pc, #388]	@ (8006b90 <UART_SetConfig+0x2d4>)
 8006a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	011c      	lsls	r4, r3, #4
 8006a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	1891      	adds	r1, r2, r2
 8006a2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a2c:	415b      	adcs	r3, r3
 8006a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a34:	4641      	mov	r1, r8
 8006a36:	eb12 0a01 	adds.w	sl, r2, r1
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a54:	4692      	mov	sl, r2
 8006a56:	469b      	mov	fp, r3
 8006a58:	4643      	mov	r3, r8
 8006a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a62:	464b      	mov	r3, r9
 8006a64:	eb4b 0303 	adc.w	r3, fp, r3
 8006a68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a80:	460b      	mov	r3, r1
 8006a82:	18db      	adds	r3, r3, r3
 8006a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a86:	4613      	mov	r3, r2
 8006a88:	eb42 0303 	adc.w	r3, r2, r3
 8006a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a96:	f7fa f88f 	bl	8000bb8 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8006b90 <UART_SetConfig+0x2d4>)
 8006aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2264      	movs	r2, #100	@ 0x64
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	1acb      	subs	r3, r1, r3
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ab6:	4b36      	ldr	r3, [pc, #216]	@ (8006b90 <UART_SetConfig+0x2d4>)
 8006ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ac4:	441c      	add	r4, r3
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	1891      	adds	r1, r2, r2
 8006ade:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ae0:	415b      	adcs	r3, r3
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ae8:	4641      	mov	r1, r8
 8006aea:	1851      	adds	r1, r2, r1
 8006aec:	6339      	str	r1, [r7, #48]	@ 0x30
 8006aee:	4649      	mov	r1, r9
 8006af0:	414b      	adcs	r3, r1
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b00:	4659      	mov	r1, fp
 8006b02:	00cb      	lsls	r3, r1, #3
 8006b04:	4651      	mov	r1, sl
 8006b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0a:	4651      	mov	r1, sl
 8006b0c:	00ca      	lsls	r2, r1, #3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	4642      	mov	r2, r8
 8006b16:	189b      	adds	r3, r3, r2
 8006b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	460a      	mov	r2, r1
 8006b20:	eb42 0303 	adc.w	r3, r2, r3
 8006b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	18db      	adds	r3, r3, r3
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b42:	4613      	mov	r3, r2
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b52:	f7fa f831 	bl	8000bb8 <__aeabi_uldivmod>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <UART_SetConfig+0x2d4>)
 8006b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	2164      	movs	r1, #100	@ 0x64
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	3332      	adds	r3, #50	@ 0x32
 8006b6e:	4a08      	ldr	r2, [pc, #32]	@ (8006b90 <UART_SetConfig+0x2d4>)
 8006b70:	fba2 2303 	umull	r2, r3, r2, r3
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	f003 0207 	and.w	r2, r3, #7
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4422      	add	r2, r4
 8006b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b84:	e106      	b.n	8006d94 <UART_SetConfig+0x4d8>
 8006b86:	bf00      	nop
 8006b88:	40011000 	.word	0x40011000
 8006b8c:	40011400 	.word	0x40011400
 8006b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ba6:	4642      	mov	r2, r8
 8006ba8:	464b      	mov	r3, r9
 8006baa:	1891      	adds	r1, r2, r2
 8006bac:	6239      	str	r1, [r7, #32]
 8006bae:	415b      	adcs	r3, r3
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	1854      	adds	r4, r2, r1
 8006bba:	4649      	mov	r1, r9
 8006bbc:	eb43 0501 	adc.w	r5, r3, r1
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	00eb      	lsls	r3, r5, #3
 8006bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bce:	00e2      	lsls	r2, r4, #3
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	4643      	mov	r3, r8
 8006bd6:	18e3      	adds	r3, r4, r3
 8006bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bdc:	464b      	mov	r3, r9
 8006bde:	eb45 0303 	adc.w	r3, r5, r3
 8006be2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c02:	4629      	mov	r1, r5
 8006c04:	008b      	lsls	r3, r1, #2
 8006c06:	4621      	mov	r1, r4
 8006c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	008a      	lsls	r2, r1, #2
 8006c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c14:	f7f9 ffd0 	bl	8000bb8 <__aeabi_uldivmod>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4b60      	ldr	r3, [pc, #384]	@ (8006da0 <UART_SetConfig+0x4e4>)
 8006c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	011c      	lsls	r4, r3, #4
 8006c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	1891      	adds	r1, r2, r2
 8006c3e:	61b9      	str	r1, [r7, #24]
 8006c40:	415b      	adcs	r3, r3
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c48:	4641      	mov	r1, r8
 8006c4a:	1851      	adds	r1, r2, r1
 8006c4c:	6139      	str	r1, [r7, #16]
 8006c4e:	4649      	mov	r1, r9
 8006c50:	414b      	adcs	r3, r1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c60:	4659      	mov	r1, fp
 8006c62:	00cb      	lsls	r3, r1, #3
 8006c64:	4651      	mov	r1, sl
 8006c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6a:	4651      	mov	r1, sl
 8006c6c:	00ca      	lsls	r2, r1, #3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	4619      	mov	r1, r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	4642      	mov	r2, r8
 8006c76:	189b      	adds	r3, r3, r2
 8006c78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	460a      	mov	r2, r1
 8006c80:	eb42 0303 	adc.w	r3, r2, r3
 8006c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	008b      	lsls	r3, r1, #2
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006caa:	4641      	mov	r1, r8
 8006cac:	008a      	lsls	r2, r1, #2
 8006cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006cb2:	f7f9 ff81 	bl	8000bb8 <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4b38      	ldr	r3, [pc, #224]	@ (8006da0 <UART_SetConfig+0x4e4>)
 8006cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	@ 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	3332      	adds	r3, #50	@ 0x32
 8006cd0:	4a33      	ldr	r2, [pc, #204]	@ (8006da0 <UART_SetConfig+0x4e4>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cdc:	441c      	add	r4, r3
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ce6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	1851      	adds	r1, r2, r1
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	4649      	mov	r1, r9
 8006d04:	414b      	adcs	r3, r1
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d14:	4659      	mov	r1, fp
 8006d16:	00cb      	lsls	r3, r1, #3
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1e:	4651      	mov	r1, sl
 8006d20:	00ca      	lsls	r2, r1, #3
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	4642      	mov	r2, r8
 8006d2a:	189b      	adds	r3, r3, r2
 8006d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d2e:	464b      	mov	r3, r9
 8006d30:	460a      	mov	r2, r1
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d42:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d50:	4649      	mov	r1, r9
 8006d52:	008b      	lsls	r3, r1, #2
 8006d54:	4641      	mov	r1, r8
 8006d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	008a      	lsls	r2, r1, #2
 8006d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d62:	f7f9 ff29 	bl	8000bb8 <__aeabi_uldivmod>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <UART_SetConfig+0x4e4>)
 8006d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	2164      	movs	r1, #100	@ 0x64
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	3332      	adds	r3, #50	@ 0x32
 8006d7e:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <UART_SetConfig+0x4e4>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4422      	add	r2, r4
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da0:	51eb851f 	.word	0x51eb851f

08006da4 <__cvt>:
 8006da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	ec57 6b10 	vmov	r6, r7, d0
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4619      	mov	r1, r3
 8006db2:	463b      	mov	r3, r7
 8006db4:	bfbb      	ittet	lt
 8006db6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006dba:	461f      	movlt	r7, r3
 8006dbc:	2300      	movge	r3, #0
 8006dbe:	232d      	movlt	r3, #45	@ 0x2d
 8006dc0:	700b      	strb	r3, [r1, #0]
 8006dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006dc8:	4691      	mov	r9, r2
 8006dca:	f023 0820 	bic.w	r8, r3, #32
 8006dce:	bfbc      	itt	lt
 8006dd0:	4632      	movlt	r2, r6
 8006dd2:	4616      	movlt	r6, r2
 8006dd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dd8:	d005      	beq.n	8006de6 <__cvt+0x42>
 8006dda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dde:	d100      	bne.n	8006de2 <__cvt+0x3e>
 8006de0:	3401      	adds	r4, #1
 8006de2:	2102      	movs	r1, #2
 8006de4:	e000      	b.n	8006de8 <__cvt+0x44>
 8006de6:	2103      	movs	r1, #3
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	ab02      	add	r3, sp, #8
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	ec47 6b10 	vmov	d0, r6, r7
 8006df4:	4653      	mov	r3, sl
 8006df6:	4622      	mov	r2, r4
 8006df8:	f000 fe6e 	bl	8007ad8 <_dtoa_r>
 8006dfc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e00:	4605      	mov	r5, r0
 8006e02:	d119      	bne.n	8006e38 <__cvt+0x94>
 8006e04:	f019 0f01 	tst.w	r9, #1
 8006e08:	d00e      	beq.n	8006e28 <__cvt+0x84>
 8006e0a:	eb00 0904 	add.w	r9, r0, r4
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2300      	movs	r3, #0
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e1a:	b108      	cbz	r0, 8006e20 <__cvt+0x7c>
 8006e1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e20:	2230      	movs	r2, #48	@ 0x30
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	454b      	cmp	r3, r9
 8006e26:	d31e      	bcc.n	8006e66 <__cvt+0xc2>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e2c:	1b5b      	subs	r3, r3, r5
 8006e2e:	4628      	mov	r0, r5
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	b004      	add	sp, #16
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e3c:	eb00 0904 	add.w	r9, r0, r4
 8006e40:	d1e5      	bne.n	8006e0e <__cvt+0x6a>
 8006e42:	7803      	ldrb	r3, [r0, #0]
 8006e44:	2b30      	cmp	r3, #48	@ 0x30
 8006e46:	d10a      	bne.n	8006e5e <__cvt+0xba>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e54:	b918      	cbnz	r0, 8006e5e <__cvt+0xba>
 8006e56:	f1c4 0401 	rsb	r4, r4, #1
 8006e5a:	f8ca 4000 	str.w	r4, [sl]
 8006e5e:	f8da 3000 	ldr.w	r3, [sl]
 8006e62:	4499      	add	r9, r3
 8006e64:	e7d3      	b.n	8006e0e <__cvt+0x6a>
 8006e66:	1c59      	adds	r1, r3, #1
 8006e68:	9103      	str	r1, [sp, #12]
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e7d9      	b.n	8006e22 <__cvt+0x7e>

08006e6e <__exponent>:
 8006e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e70:	2900      	cmp	r1, #0
 8006e72:	bfba      	itte	lt
 8006e74:	4249      	neglt	r1, r1
 8006e76:	232d      	movlt	r3, #45	@ 0x2d
 8006e78:	232b      	movge	r3, #43	@ 0x2b
 8006e7a:	2909      	cmp	r1, #9
 8006e7c:	7002      	strb	r2, [r0, #0]
 8006e7e:	7043      	strb	r3, [r0, #1]
 8006e80:	dd29      	ble.n	8006ed6 <__exponent+0x68>
 8006e82:	f10d 0307 	add.w	r3, sp, #7
 8006e86:	461d      	mov	r5, r3
 8006e88:	270a      	movs	r7, #10
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e90:	fb07 1416 	mls	r4, r7, r6, r1
 8006e94:	3430      	adds	r4, #48	@ 0x30
 8006e96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	2c63      	cmp	r4, #99	@ 0x63
 8006e9e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	dcf1      	bgt.n	8006e8a <__exponent+0x1c>
 8006ea6:	3130      	adds	r1, #48	@ 0x30
 8006ea8:	1e94      	subs	r4, r2, #2
 8006eaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eae:	1c41      	adds	r1, r0, #1
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	42ab      	cmp	r3, r5
 8006eb4:	d30a      	bcc.n	8006ecc <__exponent+0x5e>
 8006eb6:	f10d 0309 	add.w	r3, sp, #9
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	42ac      	cmp	r4, r5
 8006ebe:	bf88      	it	hi
 8006ec0:	2300      	movhi	r3, #0
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	4403      	add	r3, r0
 8006ec6:	1a18      	subs	r0, r3, r0
 8006ec8:	b003      	add	sp, #12
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ecc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ed0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ed4:	e7ed      	b.n	8006eb2 <__exponent+0x44>
 8006ed6:	2330      	movs	r3, #48	@ 0x30
 8006ed8:	3130      	adds	r1, #48	@ 0x30
 8006eda:	7083      	strb	r3, [r0, #2]
 8006edc:	70c1      	strb	r1, [r0, #3]
 8006ede:	1d03      	adds	r3, r0, #4
 8006ee0:	e7f1      	b.n	8006ec6 <__exponent+0x58>
	...

08006ee4 <_printf_float>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	b08d      	sub	sp, #52	@ 0x34
 8006eea:	460c      	mov	r4, r1
 8006eec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	461f      	mov	r7, r3
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	f000 fcef 	bl	80078d8 <_localeconv_r>
 8006efa:	6803      	ldr	r3, [r0, #0]
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 f9be 	bl	8000280 <strlen>
 8006f04:	2300      	movs	r3, #0
 8006f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	9005      	str	r0, [sp, #20]
 8006f0e:	3307      	adds	r3, #7
 8006f10:	f023 0307 	bic.w	r3, r3, #7
 8006f14:	f103 0208 	add.w	r2, r3, #8
 8006f18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f1c:	f8d4 b000 	ldr.w	fp, [r4]
 8006f20:	f8c8 2000 	str.w	r2, [r8]
 8006f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f2c:	9307      	str	r3, [sp, #28]
 8006f2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3a:	4b9c      	ldr	r3, [pc, #624]	@ (80071ac <_printf_float+0x2c8>)
 8006f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f40:	f7f9 fdfc 	bl	8000b3c <__aeabi_dcmpun>
 8006f44:	bb70      	cbnz	r0, 8006fa4 <_printf_float+0xc0>
 8006f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f4a:	4b98      	ldr	r3, [pc, #608]	@ (80071ac <_printf_float+0x2c8>)
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f50:	f7f9 fdd6 	bl	8000b00 <__aeabi_dcmple>
 8006f54:	bb30      	cbnz	r0, 8006fa4 <_printf_float+0xc0>
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 fdc5 	bl	8000aec <__aeabi_dcmplt>
 8006f62:	b110      	cbz	r0, 8006f6a <_printf_float+0x86>
 8006f64:	232d      	movs	r3, #45	@ 0x2d
 8006f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f6a:	4a91      	ldr	r2, [pc, #580]	@ (80071b0 <_printf_float+0x2cc>)
 8006f6c:	4b91      	ldr	r3, [pc, #580]	@ (80071b4 <_printf_float+0x2d0>)
 8006f6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f72:	bf94      	ite	ls
 8006f74:	4690      	movls	r8, r2
 8006f76:	4698      	movhi	r8, r3
 8006f78:	2303      	movs	r3, #3
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	f02b 0304 	bic.w	r3, fp, #4
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	9700      	str	r7, [sp, #0]
 8006f88:	4633      	mov	r3, r6
 8006f8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 f9d2 	bl	8007338 <_printf_common>
 8006f94:	3001      	adds	r0, #1
 8006f96:	f040 808d 	bne.w	80070b4 <_printf_float+0x1d0>
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f9e:	b00d      	add	sp, #52	@ 0x34
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fdc6 	bl	8000b3c <__aeabi_dcmpun>
 8006fb0:	b140      	cbz	r0, 8006fc4 <_printf_float+0xe0>
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfbc      	itt	lt
 8006fb8:	232d      	movlt	r3, #45	@ 0x2d
 8006fba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80071b8 <_printf_float+0x2d4>)
 8006fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80071bc <_printf_float+0x2d8>)
 8006fc2:	e7d4      	b.n	8006f6e <_printf_float+0x8a>
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006fca:	9206      	str	r2, [sp, #24]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	d13b      	bne.n	8007048 <_printf_float+0x164>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	6063      	str	r3, [r4, #4]
 8006fd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	9303      	str	r3, [sp, #12]
 8006fde:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fe0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fe4:	ab09      	add	r3, sp, #36	@ 0x24
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	ec49 8b10 	vmov	d0, r8, r9
 8006fee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7ff fed6 	bl	8006da4 <__cvt>
 8006ff8:	9b06      	ldr	r3, [sp, #24]
 8006ffa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ffc:	2b47      	cmp	r3, #71	@ 0x47
 8006ffe:	4680      	mov	r8, r0
 8007000:	d129      	bne.n	8007056 <_printf_float+0x172>
 8007002:	1cc8      	adds	r0, r1, #3
 8007004:	db02      	blt.n	800700c <_printf_float+0x128>
 8007006:	6863      	ldr	r3, [r4, #4]
 8007008:	4299      	cmp	r1, r3
 800700a:	dd41      	ble.n	8007090 <_printf_float+0x1ac>
 800700c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007010:	fa5f fa8a 	uxtb.w	sl, sl
 8007014:	3901      	subs	r1, #1
 8007016:	4652      	mov	r2, sl
 8007018:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800701c:	9109      	str	r1, [sp, #36]	@ 0x24
 800701e:	f7ff ff26 	bl	8006e6e <__exponent>
 8007022:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007024:	1813      	adds	r3, r2, r0
 8007026:	2a01      	cmp	r2, #1
 8007028:	4681      	mov	r9, r0
 800702a:	6123      	str	r3, [r4, #16]
 800702c:	dc02      	bgt.n	8007034 <_printf_float+0x150>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d501      	bpl.n	8007038 <_printf_float+0x154>
 8007034:	3301      	adds	r3, #1
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0a2      	beq.n	8006f86 <_printf_float+0xa2>
 8007040:	232d      	movs	r3, #45	@ 0x2d
 8007042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007046:	e79e      	b.n	8006f86 <_printf_float+0xa2>
 8007048:	9a06      	ldr	r2, [sp, #24]
 800704a:	2a47      	cmp	r2, #71	@ 0x47
 800704c:	d1c2      	bne.n	8006fd4 <_printf_float+0xf0>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1c0      	bne.n	8006fd4 <_printf_float+0xf0>
 8007052:	2301      	movs	r3, #1
 8007054:	e7bd      	b.n	8006fd2 <_printf_float+0xee>
 8007056:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800705a:	d9db      	bls.n	8007014 <_printf_float+0x130>
 800705c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007060:	d118      	bne.n	8007094 <_printf_float+0x1b0>
 8007062:	2900      	cmp	r1, #0
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	dd0b      	ble.n	8007080 <_printf_float+0x19c>
 8007068:	6121      	str	r1, [r4, #16]
 800706a:	b913      	cbnz	r3, 8007072 <_printf_float+0x18e>
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	07d0      	lsls	r0, r2, #31
 8007070:	d502      	bpl.n	8007078 <_printf_float+0x194>
 8007072:	3301      	adds	r3, #1
 8007074:	440b      	add	r3, r1
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	65a1      	str	r1, [r4, #88]	@ 0x58
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	e7db      	b.n	8007038 <_printf_float+0x154>
 8007080:	b913      	cbnz	r3, 8007088 <_printf_float+0x1a4>
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	07d2      	lsls	r2, r2, #31
 8007086:	d501      	bpl.n	800708c <_printf_float+0x1a8>
 8007088:	3302      	adds	r3, #2
 800708a:	e7f4      	b.n	8007076 <_printf_float+0x192>
 800708c:	2301      	movs	r3, #1
 800708e:	e7f2      	b.n	8007076 <_printf_float+0x192>
 8007090:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007096:	4299      	cmp	r1, r3
 8007098:	db05      	blt.n	80070a6 <_printf_float+0x1c2>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	6121      	str	r1, [r4, #16]
 800709e:	07d8      	lsls	r0, r3, #31
 80070a0:	d5ea      	bpl.n	8007078 <_printf_float+0x194>
 80070a2:	1c4b      	adds	r3, r1, #1
 80070a4:	e7e7      	b.n	8007076 <_printf_float+0x192>
 80070a6:	2900      	cmp	r1, #0
 80070a8:	bfd4      	ite	le
 80070aa:	f1c1 0202 	rsble	r2, r1, #2
 80070ae:	2201      	movgt	r2, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	e7e0      	b.n	8007076 <_printf_float+0x192>
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	055a      	lsls	r2, r3, #21
 80070b8:	d407      	bmi.n	80070ca <_printf_float+0x1e6>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	4642      	mov	r2, r8
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b8      	blx	r7
 80070c4:	3001      	adds	r0, #1
 80070c6:	d12b      	bne.n	8007120 <_printf_float+0x23c>
 80070c8:	e767      	b.n	8006f9a <_printf_float+0xb6>
 80070ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070ce:	f240 80dd 	bls.w	800728c <_printf_float+0x3a8>
 80070d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	f7f9 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d033      	beq.n	800714a <_printf_float+0x266>
 80070e2:	4a37      	ldr	r2, [pc, #220]	@ (80071c0 <_printf_float+0x2dc>)
 80070e4:	2301      	movs	r3, #1
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b8      	blx	r7
 80070ec:	3001      	adds	r0, #1
 80070ee:	f43f af54 	beq.w	8006f9a <_printf_float+0xb6>
 80070f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070f6:	4543      	cmp	r3, r8
 80070f8:	db02      	blt.n	8007100 <_printf_float+0x21c>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	07d8      	lsls	r0, r3, #31
 80070fe:	d50f      	bpl.n	8007120 <_printf_float+0x23c>
 8007100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af45 	beq.w	8006f9a <_printf_float+0xb6>
 8007110:	f04f 0900 	mov.w	r9, #0
 8007114:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007118:	f104 0a1a 	add.w	sl, r4, #26
 800711c:	45c8      	cmp	r8, r9
 800711e:	dc09      	bgt.n	8007134 <_printf_float+0x250>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	079b      	lsls	r3, r3, #30
 8007124:	f100 8103 	bmi.w	800732e <_printf_float+0x44a>
 8007128:	68e0      	ldr	r0, [r4, #12]
 800712a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712c:	4298      	cmp	r0, r3
 800712e:	bfb8      	it	lt
 8007130:	4618      	movlt	r0, r3
 8007132:	e734      	b.n	8006f9e <_printf_float+0xba>
 8007134:	2301      	movs	r3, #1
 8007136:	4652      	mov	r2, sl
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f af2b 	beq.w	8006f9a <_printf_float+0xb6>
 8007144:	f109 0901 	add.w	r9, r9, #1
 8007148:	e7e8      	b.n	800711c <_printf_float+0x238>
 800714a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	dc39      	bgt.n	80071c4 <_printf_float+0x2e0>
 8007150:	4a1b      	ldr	r2, [pc, #108]	@ (80071c0 <_printf_float+0x2dc>)
 8007152:	2301      	movs	r3, #1
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af1d 	beq.w	8006f9a <_printf_float+0xb6>
 8007160:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007164:	ea59 0303 	orrs.w	r3, r9, r3
 8007168:	d102      	bne.n	8007170 <_printf_float+0x28c>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	d5d7      	bpl.n	8007120 <_printf_float+0x23c>
 8007170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f af0d 	beq.w	8006f9a <_printf_float+0xb6>
 8007180:	f04f 0a00 	mov.w	sl, #0
 8007184:	f104 0b1a 	add.w	fp, r4, #26
 8007188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800718a:	425b      	negs	r3, r3
 800718c:	4553      	cmp	r3, sl
 800718e:	dc01      	bgt.n	8007194 <_printf_float+0x2b0>
 8007190:	464b      	mov	r3, r9
 8007192:	e793      	b.n	80070bc <_printf_float+0x1d8>
 8007194:	2301      	movs	r3, #1
 8007196:	465a      	mov	r2, fp
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f aefb 	beq.w	8006f9a <_printf_float+0xb6>
 80071a4:	f10a 0a01 	add.w	sl, sl, #1
 80071a8:	e7ee      	b.n	8007188 <_printf_float+0x2a4>
 80071aa:	bf00      	nop
 80071ac:	7fefffff 	.word	0x7fefffff
 80071b0:	08009aa0 	.word	0x08009aa0
 80071b4:	08009aa4 	.word	0x08009aa4
 80071b8:	08009aa8 	.word	0x08009aa8
 80071bc:	08009aac 	.word	0x08009aac
 80071c0:	08009ab0 	.word	0x08009ab0
 80071c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071ca:	4553      	cmp	r3, sl
 80071cc:	bfa8      	it	ge
 80071ce:	4653      	movge	r3, sl
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	4699      	mov	r9, r3
 80071d4:	dc36      	bgt.n	8007244 <_printf_float+0x360>
 80071d6:	f04f 0b00 	mov.w	fp, #0
 80071da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071de:	f104 021a 	add.w	r2, r4, #26
 80071e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071e4:	9306      	str	r3, [sp, #24]
 80071e6:	eba3 0309 	sub.w	r3, r3, r9
 80071ea:	455b      	cmp	r3, fp
 80071ec:	dc31      	bgt.n	8007252 <_printf_float+0x36e>
 80071ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f0:	459a      	cmp	sl, r3
 80071f2:	dc3a      	bgt.n	800726a <_printf_float+0x386>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	07da      	lsls	r2, r3, #31
 80071f8:	d437      	bmi.n	800726a <_printf_float+0x386>
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	ebaa 0903 	sub.w	r9, sl, r3
 8007200:	9b06      	ldr	r3, [sp, #24]
 8007202:	ebaa 0303 	sub.w	r3, sl, r3
 8007206:	4599      	cmp	r9, r3
 8007208:	bfa8      	it	ge
 800720a:	4699      	movge	r9, r3
 800720c:	f1b9 0f00 	cmp.w	r9, #0
 8007210:	dc33      	bgt.n	800727a <_printf_float+0x396>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800721a:	f104 0b1a 	add.w	fp, r4, #26
 800721e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007220:	ebaa 0303 	sub.w	r3, sl, r3
 8007224:	eba3 0309 	sub.w	r3, r3, r9
 8007228:	4543      	cmp	r3, r8
 800722a:	f77f af79 	ble.w	8007120 <_printf_float+0x23c>
 800722e:	2301      	movs	r3, #1
 8007230:	465a      	mov	r2, fp
 8007232:	4631      	mov	r1, r6
 8007234:	4628      	mov	r0, r5
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	f43f aeae 	beq.w	8006f9a <_printf_float+0xb6>
 800723e:	f108 0801 	add.w	r8, r8, #1
 8007242:	e7ec      	b.n	800721e <_printf_float+0x33a>
 8007244:	4642      	mov	r2, r8
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	d1c2      	bne.n	80071d6 <_printf_float+0x2f2>
 8007250:	e6a3      	b.n	8006f9a <_printf_float+0xb6>
 8007252:	2301      	movs	r3, #1
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	47b8      	blx	r7
 800725c:	3001      	adds	r0, #1
 800725e:	f43f ae9c 	beq.w	8006f9a <_printf_float+0xb6>
 8007262:	9a06      	ldr	r2, [sp, #24]
 8007264:	f10b 0b01 	add.w	fp, fp, #1
 8007268:	e7bb      	b.n	80071e2 <_printf_float+0x2fe>
 800726a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d1c0      	bne.n	80071fa <_printf_float+0x316>
 8007278:	e68f      	b.n	8006f9a <_printf_float+0xb6>
 800727a:	9a06      	ldr	r2, [sp, #24]
 800727c:	464b      	mov	r3, r9
 800727e:	4442      	add	r2, r8
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	d1c3      	bne.n	8007212 <_printf_float+0x32e>
 800728a:	e686      	b.n	8006f9a <_printf_float+0xb6>
 800728c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007290:	f1ba 0f01 	cmp.w	sl, #1
 8007294:	dc01      	bgt.n	800729a <_printf_float+0x3b6>
 8007296:	07db      	lsls	r3, r3, #31
 8007298:	d536      	bpl.n	8007308 <_printf_float+0x424>
 800729a:	2301      	movs	r3, #1
 800729c:	4642      	mov	r2, r8
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae78 	beq.w	8006f9a <_printf_float+0xb6>
 80072aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae70 	beq.w	8006f9a <_printf_float+0xb6>
 80072ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072be:	2200      	movs	r2, #0
 80072c0:	2300      	movs	r3, #0
 80072c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80072c6:	f7f9 fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ca:	b9c0      	cbnz	r0, 80072fe <_printf_float+0x41a>
 80072cc:	4653      	mov	r3, sl
 80072ce:	f108 0201 	add.w	r2, r8, #1
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	d10c      	bne.n	80072f6 <_printf_float+0x412>
 80072dc:	e65d      	b.n	8006f9a <_printf_float+0xb6>
 80072de:	2301      	movs	r3, #1
 80072e0:	465a      	mov	r2, fp
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f ae56 	beq.w	8006f9a <_printf_float+0xb6>
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	45d0      	cmp	r8, sl
 80072f4:	dbf3      	blt.n	80072de <_printf_float+0x3fa>
 80072f6:	464b      	mov	r3, r9
 80072f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072fc:	e6df      	b.n	80070be <_printf_float+0x1da>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0b1a 	add.w	fp, r4, #26
 8007306:	e7f4      	b.n	80072f2 <_printf_float+0x40e>
 8007308:	2301      	movs	r3, #1
 800730a:	4642      	mov	r2, r8
 800730c:	e7e1      	b.n	80072d2 <_printf_float+0x3ee>
 800730e:	2301      	movs	r3, #1
 8007310:	464a      	mov	r2, r9
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae3e 	beq.w	8006f9a <_printf_float+0xb6>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	4543      	cmp	r3, r8
 800732a:	dcf0      	bgt.n	800730e <_printf_float+0x42a>
 800732c:	e6fc      	b.n	8007128 <_printf_float+0x244>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	f104 0919 	add.w	r9, r4, #25
 8007336:	e7f4      	b.n	8007322 <_printf_float+0x43e>

08007338 <_printf_common>:
 8007338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	4616      	mov	r6, r2
 800733e:	4698      	mov	r8, r3
 8007340:	688a      	ldr	r2, [r1, #8]
 8007342:	690b      	ldr	r3, [r1, #16]
 8007344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007348:	4293      	cmp	r3, r2
 800734a:	bfb8      	it	lt
 800734c:	4613      	movlt	r3, r2
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007354:	4607      	mov	r7, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b10a      	cbz	r2, 800735e <_printf_common+0x26>
 800735a:	3301      	adds	r3, #1
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	0699      	lsls	r1, r3, #26
 8007362:	bf42      	ittt	mi
 8007364:	6833      	ldrmi	r3, [r6, #0]
 8007366:	3302      	addmi	r3, #2
 8007368:	6033      	strmi	r3, [r6, #0]
 800736a:	6825      	ldr	r5, [r4, #0]
 800736c:	f015 0506 	ands.w	r5, r5, #6
 8007370:	d106      	bne.n	8007380 <_printf_common+0x48>
 8007372:	f104 0a19 	add.w	sl, r4, #25
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	6832      	ldr	r2, [r6, #0]
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	42ab      	cmp	r3, r5
 800737e:	dc26      	bgt.n	80073ce <_printf_common+0x96>
 8007380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	3b00      	subs	r3, #0
 8007388:	bf18      	it	ne
 800738a:	2301      	movne	r3, #1
 800738c:	0692      	lsls	r2, r2, #26
 800738e:	d42b      	bmi.n	80073e8 <_printf_common+0xb0>
 8007390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007394:	4641      	mov	r1, r8
 8007396:	4638      	mov	r0, r7
 8007398:	47c8      	blx	r9
 800739a:	3001      	adds	r0, #1
 800739c:	d01e      	beq.n	80073dc <_printf_common+0xa4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	f003 0306 	and.w	r3, r3, #6
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	bf02      	ittt	eq
 80073aa:	68e5      	ldreq	r5, [r4, #12]
 80073ac:	6833      	ldreq	r3, [r6, #0]
 80073ae:	1aed      	subeq	r5, r5, r3
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	bf0c      	ite	eq
 80073b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b8:	2500      	movne	r5, #0
 80073ba:	4293      	cmp	r3, r2
 80073bc:	bfc4      	itt	gt
 80073be:	1a9b      	subgt	r3, r3, r2
 80073c0:	18ed      	addgt	r5, r5, r3
 80073c2:	2600      	movs	r6, #0
 80073c4:	341a      	adds	r4, #26
 80073c6:	42b5      	cmp	r5, r6
 80073c8:	d11a      	bne.n	8007400 <_printf_common+0xc8>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e008      	b.n	80073e0 <_printf_common+0xa8>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4652      	mov	r2, sl
 80073d2:	4641      	mov	r1, r8
 80073d4:	4638      	mov	r0, r7
 80073d6:	47c8      	blx	r9
 80073d8:	3001      	adds	r0, #1
 80073da:	d103      	bne.n	80073e4 <_printf_common+0xac>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	3501      	adds	r5, #1
 80073e6:	e7c6      	b.n	8007376 <_printf_common+0x3e>
 80073e8:	18e1      	adds	r1, r4, r3
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	2030      	movs	r0, #48	@ 0x30
 80073ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073f2:	4422      	add	r2, r4
 80073f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073fc:	3302      	adds	r3, #2
 80073fe:	e7c7      	b.n	8007390 <_printf_common+0x58>
 8007400:	2301      	movs	r3, #1
 8007402:	4622      	mov	r2, r4
 8007404:	4641      	mov	r1, r8
 8007406:	4638      	mov	r0, r7
 8007408:	47c8      	blx	r9
 800740a:	3001      	adds	r0, #1
 800740c:	d0e6      	beq.n	80073dc <_printf_common+0xa4>
 800740e:	3601      	adds	r6, #1
 8007410:	e7d9      	b.n	80073c6 <_printf_common+0x8e>
	...

08007414 <_printf_i>:
 8007414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	7e0f      	ldrb	r7, [r1, #24]
 800741a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800741c:	2f78      	cmp	r7, #120	@ 0x78
 800741e:	4691      	mov	r9, r2
 8007420:	4680      	mov	r8, r0
 8007422:	460c      	mov	r4, r1
 8007424:	469a      	mov	sl, r3
 8007426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800742a:	d807      	bhi.n	800743c <_printf_i+0x28>
 800742c:	2f62      	cmp	r7, #98	@ 0x62
 800742e:	d80a      	bhi.n	8007446 <_printf_i+0x32>
 8007430:	2f00      	cmp	r7, #0
 8007432:	f000 80d2 	beq.w	80075da <_printf_i+0x1c6>
 8007436:	2f58      	cmp	r7, #88	@ 0x58
 8007438:	f000 80b9 	beq.w	80075ae <_printf_i+0x19a>
 800743c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007444:	e03a      	b.n	80074bc <_printf_i+0xa8>
 8007446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800744a:	2b15      	cmp	r3, #21
 800744c:	d8f6      	bhi.n	800743c <_printf_i+0x28>
 800744e:	a101      	add	r1, pc, #4	@ (adr r1, 8007454 <_printf_i+0x40>)
 8007450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074c1 	.word	0x080074c1
 800745c:	0800743d 	.word	0x0800743d
 8007460:	0800743d 	.word	0x0800743d
 8007464:	0800743d 	.word	0x0800743d
 8007468:	0800743d 	.word	0x0800743d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800743d 	.word	0x0800743d
 8007474:	0800743d 	.word	0x0800743d
 8007478:	0800743d 	.word	0x0800743d
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080075c1 	.word	0x080075c1
 8007484:	080074eb 	.word	0x080074eb
 8007488:	0800757b 	.word	0x0800757b
 800748c:	0800743d 	.word	0x0800743d
 8007490:	0800743d 	.word	0x0800743d
 8007494:	080075e3 	.word	0x080075e3
 8007498:	0800743d 	.word	0x0800743d
 800749c:	080074eb 	.word	0x080074eb
 80074a0:	0800743d 	.word	0x0800743d
 80074a4:	0800743d 	.word	0x0800743d
 80074a8:	08007583 	.word	0x08007583
 80074ac:	6833      	ldr	r3, [r6, #0]
 80074ae:	1d1a      	adds	r2, r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6032      	str	r2, [r6, #0]
 80074b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074bc:	2301      	movs	r3, #1
 80074be:	e09d      	b.n	80075fc <_printf_i+0x1e8>
 80074c0:	6833      	ldr	r3, [r6, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6031      	str	r1, [r6, #0]
 80074c8:	0606      	lsls	r6, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xbc>
 80074cc:	681d      	ldr	r5, [r3, #0]
 80074ce:	e003      	b.n	80074d8 <_printf_i+0xc4>
 80074d0:	0645      	lsls	r5, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xb8>
 80074d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074d8:	2d00      	cmp	r5, #0
 80074da:	da03      	bge.n	80074e4 <_printf_i+0xd0>
 80074dc:	232d      	movs	r3, #45	@ 0x2d
 80074de:	426d      	negs	r5, r5
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e4:	4859      	ldr	r0, [pc, #356]	@ (800764c <_printf_i+0x238>)
 80074e6:	230a      	movs	r3, #10
 80074e8:	e011      	b.n	800750e <_printf_i+0xfa>
 80074ea:	6821      	ldr	r1, [r4, #0]
 80074ec:	6833      	ldr	r3, [r6, #0]
 80074ee:	0608      	lsls	r0, r1, #24
 80074f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80074f4:	d402      	bmi.n	80074fc <_printf_i+0xe8>
 80074f6:	0649      	lsls	r1, r1, #25
 80074f8:	bf48      	it	mi
 80074fa:	b2ad      	uxthmi	r5, r5
 80074fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80074fe:	4853      	ldr	r0, [pc, #332]	@ (800764c <_printf_i+0x238>)
 8007500:	6033      	str	r3, [r6, #0]
 8007502:	bf14      	ite	ne
 8007504:	230a      	movne	r3, #10
 8007506:	2308      	moveq	r3, #8
 8007508:	2100      	movs	r1, #0
 800750a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800750e:	6866      	ldr	r6, [r4, #4]
 8007510:	60a6      	str	r6, [r4, #8]
 8007512:	2e00      	cmp	r6, #0
 8007514:	bfa2      	ittt	ge
 8007516:	6821      	ldrge	r1, [r4, #0]
 8007518:	f021 0104 	bicge.w	r1, r1, #4
 800751c:	6021      	strge	r1, [r4, #0]
 800751e:	b90d      	cbnz	r5, 8007524 <_printf_i+0x110>
 8007520:	2e00      	cmp	r6, #0
 8007522:	d04b      	beq.n	80075bc <_printf_i+0x1a8>
 8007524:	4616      	mov	r6, r2
 8007526:	fbb5 f1f3 	udiv	r1, r5, r3
 800752a:	fb03 5711 	mls	r7, r3, r1, r5
 800752e:	5dc7      	ldrb	r7, [r0, r7]
 8007530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007534:	462f      	mov	r7, r5
 8007536:	42bb      	cmp	r3, r7
 8007538:	460d      	mov	r5, r1
 800753a:	d9f4      	bls.n	8007526 <_printf_i+0x112>
 800753c:	2b08      	cmp	r3, #8
 800753e:	d10b      	bne.n	8007558 <_printf_i+0x144>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	07df      	lsls	r7, r3, #31
 8007544:	d508      	bpl.n	8007558 <_printf_i+0x144>
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	6861      	ldr	r1, [r4, #4]
 800754a:	4299      	cmp	r1, r3
 800754c:	bfde      	ittt	le
 800754e:	2330      	movle	r3, #48	@ 0x30
 8007550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007554:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007558:	1b92      	subs	r2, r2, r6
 800755a:	6122      	str	r2, [r4, #16]
 800755c:	f8cd a000 	str.w	sl, [sp]
 8007560:	464b      	mov	r3, r9
 8007562:	aa03      	add	r2, sp, #12
 8007564:	4621      	mov	r1, r4
 8007566:	4640      	mov	r0, r8
 8007568:	f7ff fee6 	bl	8007338 <_printf_common>
 800756c:	3001      	adds	r0, #1
 800756e:	d14a      	bne.n	8007606 <_printf_i+0x1f2>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007574:	b004      	add	sp, #16
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	f043 0320 	orr.w	r3, r3, #32
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	4833      	ldr	r0, [pc, #204]	@ (8007650 <_printf_i+0x23c>)
 8007584:	2778      	movs	r7, #120	@ 0x78
 8007586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	6831      	ldr	r1, [r6, #0]
 800758e:	061f      	lsls	r7, r3, #24
 8007590:	f851 5b04 	ldr.w	r5, [r1], #4
 8007594:	d402      	bmi.n	800759c <_printf_i+0x188>
 8007596:	065f      	lsls	r7, r3, #25
 8007598:	bf48      	it	mi
 800759a:	b2ad      	uxthmi	r5, r5
 800759c:	6031      	str	r1, [r6, #0]
 800759e:	07d9      	lsls	r1, r3, #31
 80075a0:	bf44      	itt	mi
 80075a2:	f043 0320 	orrmi.w	r3, r3, #32
 80075a6:	6023      	strmi	r3, [r4, #0]
 80075a8:	b11d      	cbz	r5, 80075b2 <_printf_i+0x19e>
 80075aa:	2310      	movs	r3, #16
 80075ac:	e7ac      	b.n	8007508 <_printf_i+0xf4>
 80075ae:	4827      	ldr	r0, [pc, #156]	@ (800764c <_printf_i+0x238>)
 80075b0:	e7e9      	b.n	8007586 <_printf_i+0x172>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f023 0320 	bic.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	e7f6      	b.n	80075aa <_printf_i+0x196>
 80075bc:	4616      	mov	r6, r2
 80075be:	e7bd      	b.n	800753c <_printf_i+0x128>
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	6961      	ldr	r1, [r4, #20]
 80075c6:	1d18      	adds	r0, r3, #4
 80075c8:	6030      	str	r0, [r6, #0]
 80075ca:	062e      	lsls	r6, r5, #24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0x1c0>
 80075d0:	6019      	str	r1, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0x1c6>
 80075d4:	0668      	lsls	r0, r5, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0x1bc>
 80075d8:	8019      	strh	r1, [r3, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	4616      	mov	r6, r2
 80075e0:	e7bc      	b.n	800755c <_printf_i+0x148>
 80075e2:	6833      	ldr	r3, [r6, #0]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	6032      	str	r2, [r6, #0]
 80075e8:	681e      	ldr	r6, [r3, #0]
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7f8 fdf6 	bl	80001e0 <memchr>
 80075f4:	b108      	cbz	r0, 80075fa <_printf_i+0x1e6>
 80075f6:	1b80      	subs	r0, r0, r6
 80075f8:	6060      	str	r0, [r4, #4]
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	2300      	movs	r3, #0
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007604:	e7aa      	b.n	800755c <_printf_i+0x148>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	4632      	mov	r2, r6
 800760a:	4649      	mov	r1, r9
 800760c:	4640      	mov	r0, r8
 800760e:	47d0      	blx	sl
 8007610:	3001      	adds	r0, #1
 8007612:	d0ad      	beq.n	8007570 <_printf_i+0x15c>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	079b      	lsls	r3, r3, #30
 8007618:	d413      	bmi.n	8007642 <_printf_i+0x22e>
 800761a:	68e0      	ldr	r0, [r4, #12]
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	4298      	cmp	r0, r3
 8007620:	bfb8      	it	lt
 8007622:	4618      	movlt	r0, r3
 8007624:	e7a6      	b.n	8007574 <_printf_i+0x160>
 8007626:	2301      	movs	r3, #1
 8007628:	4632      	mov	r2, r6
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d09d      	beq.n	8007570 <_printf_i+0x15c>
 8007634:	3501      	adds	r5, #1
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	9903      	ldr	r1, [sp, #12]
 800763a:	1a5b      	subs	r3, r3, r1
 800763c:	42ab      	cmp	r3, r5
 800763e:	dcf2      	bgt.n	8007626 <_printf_i+0x212>
 8007640:	e7eb      	b.n	800761a <_printf_i+0x206>
 8007642:	2500      	movs	r5, #0
 8007644:	f104 0619 	add.w	r6, r4, #25
 8007648:	e7f5      	b.n	8007636 <_printf_i+0x222>
 800764a:	bf00      	nop
 800764c:	08009ab2 	.word	0x08009ab2
 8007650:	08009ac3 	.word	0x08009ac3

08007654 <std>:
 8007654:	2300      	movs	r3, #0
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	e9c0 3300 	strd	r3, r3, [r0]
 800765e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007662:	6083      	str	r3, [r0, #8]
 8007664:	8181      	strh	r1, [r0, #12]
 8007666:	6643      	str	r3, [r0, #100]	@ 0x64
 8007668:	81c2      	strh	r2, [r0, #14]
 800766a:	6183      	str	r3, [r0, #24]
 800766c:	4619      	mov	r1, r3
 800766e:	2208      	movs	r2, #8
 8007670:	305c      	adds	r0, #92	@ 0x5c
 8007672:	f000 f928 	bl	80078c6 <memset>
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <std+0x58>)
 8007678:	6263      	str	r3, [r4, #36]	@ 0x24
 800767a:	4b0d      	ldr	r3, [pc, #52]	@ (80076b0 <std+0x5c>)
 800767c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <std+0x60>)
 8007680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007682:	4b0d      	ldr	r3, [pc, #52]	@ (80076b8 <std+0x64>)
 8007684:	6323      	str	r3, [r4, #48]	@ 0x30
 8007686:	4b0d      	ldr	r3, [pc, #52]	@ (80076bc <std+0x68>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	429c      	cmp	r4, r3
 800768c:	d006      	beq.n	800769c <std+0x48>
 800768e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007692:	4294      	cmp	r4, r2
 8007694:	d002      	beq.n	800769c <std+0x48>
 8007696:	33d0      	adds	r3, #208	@ 0xd0
 8007698:	429c      	cmp	r4, r3
 800769a:	d105      	bne.n	80076a8 <std+0x54>
 800769c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	f000 b98c 	b.w	80079c0 <__retarget_lock_init_recursive>
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	bf00      	nop
 80076ac:	08007841 	.word	0x08007841
 80076b0:	08007863 	.word	0x08007863
 80076b4:	0800789b 	.word	0x0800789b
 80076b8:	080078bf 	.word	0x080078bf
 80076bc:	2000035c 	.word	0x2000035c

080076c0 <stdio_exit_handler>:
 80076c0:	4a02      	ldr	r2, [pc, #8]	@ (80076cc <stdio_exit_handler+0xc>)
 80076c2:	4903      	ldr	r1, [pc, #12]	@ (80076d0 <stdio_exit_handler+0x10>)
 80076c4:	4803      	ldr	r0, [pc, #12]	@ (80076d4 <stdio_exit_handler+0x14>)
 80076c6:	f000 b869 	b.w	800779c <_fwalk_sglue>
 80076ca:	bf00      	nop
 80076cc:	2000000c 	.word	0x2000000c
 80076d0:	0800931d 	.word	0x0800931d
 80076d4:	2000001c 	.word	0x2000001c

080076d8 <cleanup_stdio>:
 80076d8:	6841      	ldr	r1, [r0, #4]
 80076da:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <cleanup_stdio+0x34>)
 80076dc:	4299      	cmp	r1, r3
 80076de:	b510      	push	{r4, lr}
 80076e0:	4604      	mov	r4, r0
 80076e2:	d001      	beq.n	80076e8 <cleanup_stdio+0x10>
 80076e4:	f001 fe1a 	bl	800931c <_fflush_r>
 80076e8:	68a1      	ldr	r1, [r4, #8]
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <cleanup_stdio+0x38>)
 80076ec:	4299      	cmp	r1, r3
 80076ee:	d002      	beq.n	80076f6 <cleanup_stdio+0x1e>
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 fe13 	bl	800931c <_fflush_r>
 80076f6:	68e1      	ldr	r1, [r4, #12]
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <cleanup_stdio+0x3c>)
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d004      	beq.n	8007708 <cleanup_stdio+0x30>
 80076fe:	4620      	mov	r0, r4
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	f001 be0a 	b.w	800931c <_fflush_r>
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop
 800770c:	2000035c 	.word	0x2000035c
 8007710:	200003c4 	.word	0x200003c4
 8007714:	2000042c 	.word	0x2000042c

08007718 <global_stdio_init.part.0>:
 8007718:	b510      	push	{r4, lr}
 800771a:	4b0b      	ldr	r3, [pc, #44]	@ (8007748 <global_stdio_init.part.0+0x30>)
 800771c:	4c0b      	ldr	r4, [pc, #44]	@ (800774c <global_stdio_init.part.0+0x34>)
 800771e:	4a0c      	ldr	r2, [pc, #48]	@ (8007750 <global_stdio_init.part.0+0x38>)
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	4620      	mov	r0, r4
 8007724:	2200      	movs	r2, #0
 8007726:	2104      	movs	r1, #4
 8007728:	f7ff ff94 	bl	8007654 <std>
 800772c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007730:	2201      	movs	r2, #1
 8007732:	2109      	movs	r1, #9
 8007734:	f7ff ff8e 	bl	8007654 <std>
 8007738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800773c:	2202      	movs	r2, #2
 800773e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007742:	2112      	movs	r1, #18
 8007744:	f7ff bf86 	b.w	8007654 <std>
 8007748:	20000494 	.word	0x20000494
 800774c:	2000035c 	.word	0x2000035c
 8007750:	080076c1 	.word	0x080076c1

08007754 <__sfp_lock_acquire>:
 8007754:	4801      	ldr	r0, [pc, #4]	@ (800775c <__sfp_lock_acquire+0x8>)
 8007756:	f000 b934 	b.w	80079c2 <__retarget_lock_acquire_recursive>
 800775a:	bf00      	nop
 800775c:	2000049d 	.word	0x2000049d

08007760 <__sfp_lock_release>:
 8007760:	4801      	ldr	r0, [pc, #4]	@ (8007768 <__sfp_lock_release+0x8>)
 8007762:	f000 b92f 	b.w	80079c4 <__retarget_lock_release_recursive>
 8007766:	bf00      	nop
 8007768:	2000049d 	.word	0x2000049d

0800776c <__sinit>:
 800776c:	b510      	push	{r4, lr}
 800776e:	4604      	mov	r4, r0
 8007770:	f7ff fff0 	bl	8007754 <__sfp_lock_acquire>
 8007774:	6a23      	ldr	r3, [r4, #32]
 8007776:	b11b      	cbz	r3, 8007780 <__sinit+0x14>
 8007778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777c:	f7ff bff0 	b.w	8007760 <__sfp_lock_release>
 8007780:	4b04      	ldr	r3, [pc, #16]	@ (8007794 <__sinit+0x28>)
 8007782:	6223      	str	r3, [r4, #32]
 8007784:	4b04      	ldr	r3, [pc, #16]	@ (8007798 <__sinit+0x2c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f5      	bne.n	8007778 <__sinit+0xc>
 800778c:	f7ff ffc4 	bl	8007718 <global_stdio_init.part.0>
 8007790:	e7f2      	b.n	8007778 <__sinit+0xc>
 8007792:	bf00      	nop
 8007794:	080076d9 	.word	0x080076d9
 8007798:	20000494 	.word	0x20000494

0800779c <_fwalk_sglue>:
 800779c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a0:	4607      	mov	r7, r0
 80077a2:	4688      	mov	r8, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	2600      	movs	r6, #0
 80077a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ac:	f1b9 0901 	subs.w	r9, r9, #1
 80077b0:	d505      	bpl.n	80077be <_fwalk_sglue+0x22>
 80077b2:	6824      	ldr	r4, [r4, #0]
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d1f7      	bne.n	80077a8 <_fwalk_sglue+0xc>
 80077b8:	4630      	mov	r0, r6
 80077ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d907      	bls.n	80077d4 <_fwalk_sglue+0x38>
 80077c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077c8:	3301      	adds	r3, #1
 80077ca:	d003      	beq.n	80077d4 <_fwalk_sglue+0x38>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4638      	mov	r0, r7
 80077d0:	47c0      	blx	r8
 80077d2:	4306      	orrs	r6, r0
 80077d4:	3568      	adds	r5, #104	@ 0x68
 80077d6:	e7e9      	b.n	80077ac <_fwalk_sglue+0x10>

080077d8 <sniprintf>:
 80077d8:	b40c      	push	{r2, r3}
 80077da:	b530      	push	{r4, r5, lr}
 80077dc:	4b17      	ldr	r3, [pc, #92]	@ (800783c <sniprintf+0x64>)
 80077de:	1e0c      	subs	r4, r1, #0
 80077e0:	681d      	ldr	r5, [r3, #0]
 80077e2:	b09d      	sub	sp, #116	@ 0x74
 80077e4:	da08      	bge.n	80077f8 <sniprintf+0x20>
 80077e6:	238b      	movs	r3, #139	@ 0x8b
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ee:	b01d      	add	sp, #116	@ 0x74
 80077f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f4:	b002      	add	sp, #8
 80077f6:	4770      	bx	lr
 80077f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007800:	bf14      	ite	ne
 8007802:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007806:	4623      	moveq	r3, r4
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	9307      	str	r3, [sp, #28]
 800780c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007810:	9002      	str	r0, [sp, #8]
 8007812:	9006      	str	r0, [sp, #24]
 8007814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007818:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800781a:	ab21      	add	r3, sp, #132	@ 0x84
 800781c:	a902      	add	r1, sp, #8
 800781e:	4628      	mov	r0, r5
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	f001 fbfb 	bl	800901c <_svfiprintf_r>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	bfbc      	itt	lt
 800782a:	238b      	movlt	r3, #139	@ 0x8b
 800782c:	602b      	strlt	r3, [r5, #0]
 800782e:	2c00      	cmp	r4, #0
 8007830:	d0dd      	beq.n	80077ee <sniprintf+0x16>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e7d9      	b.n	80077ee <sniprintf+0x16>
 800783a:	bf00      	nop
 800783c:	20000018 	.word	0x20000018

08007840 <__sread>:
 8007840:	b510      	push	{r4, lr}
 8007842:	460c      	mov	r4, r1
 8007844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007848:	f000 f86c 	bl	8007924 <_read_r>
 800784c:	2800      	cmp	r0, #0
 800784e:	bfab      	itete	ge
 8007850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007852:	89a3      	ldrhlt	r3, [r4, #12]
 8007854:	181b      	addge	r3, r3, r0
 8007856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800785a:	bfac      	ite	ge
 800785c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800785e:	81a3      	strhlt	r3, [r4, #12]
 8007860:	bd10      	pop	{r4, pc}

08007862 <__swrite>:
 8007862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007866:	461f      	mov	r7, r3
 8007868:	898b      	ldrh	r3, [r1, #12]
 800786a:	05db      	lsls	r3, r3, #23
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	4616      	mov	r6, r2
 8007872:	d505      	bpl.n	8007880 <__swrite+0x1e>
 8007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007878:	2302      	movs	r3, #2
 800787a:	2200      	movs	r2, #0
 800787c:	f000 f840 	bl	8007900 <_lseek_r>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	4632      	mov	r2, r6
 800788e:	463b      	mov	r3, r7
 8007890:	4628      	mov	r0, r5
 8007892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007896:	f000 b857 	b.w	8007948 <_write_r>

0800789a <__sseek>:
 800789a:	b510      	push	{r4, lr}
 800789c:	460c      	mov	r4, r1
 800789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a2:	f000 f82d 	bl	8007900 <_lseek_r>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	bf15      	itete	ne
 80078ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078b6:	81a3      	strheq	r3, [r4, #12]
 80078b8:	bf18      	it	ne
 80078ba:	81a3      	strhne	r3, [r4, #12]
 80078bc:	bd10      	pop	{r4, pc}

080078be <__sclose>:
 80078be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c2:	f000 b80d 	b.w	80078e0 <_close_r>

080078c6 <memset>:
 80078c6:	4402      	add	r2, r0
 80078c8:	4603      	mov	r3, r0
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d100      	bne.n	80078d0 <memset+0xa>
 80078ce:	4770      	bx	lr
 80078d0:	f803 1b01 	strb.w	r1, [r3], #1
 80078d4:	e7f9      	b.n	80078ca <memset+0x4>
	...

080078d8 <_localeconv_r>:
 80078d8:	4800      	ldr	r0, [pc, #0]	@ (80078dc <_localeconv_r+0x4>)
 80078da:	4770      	bx	lr
 80078dc:	20000158 	.word	0x20000158

080078e0 <_close_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	@ (80078fc <_close_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 ff26 	bl	800173c <_close>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_close_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_close_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000498 	.word	0x20000498

08007900 <_lseek_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d07      	ldr	r5, [pc, #28]	@ (8007920 <_lseek_r+0x20>)
 8007904:	4604      	mov	r4, r0
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	2200      	movs	r2, #0
 800790c:	602a      	str	r2, [r5, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7f9 ff3b 	bl	800178a <_lseek>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_lseek_r+0x1e>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_lseek_r+0x1e>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000498 	.word	0x20000498

08007924 <_read_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	@ (8007944 <_read_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7f9 fec9 	bl	80016ca <_read>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_read_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_read_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000498 	.word	0x20000498

08007948 <_write_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	@ (8007968 <_write_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fed4 	bl	8001704 <_write>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_write_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_write_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000498 	.word	0x20000498

0800796c <__errno>:
 800796c:	4b01      	ldr	r3, [pc, #4]	@ (8007974 <__errno+0x8>)
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000018 	.word	0x20000018

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	@ (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	@ (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	@ (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	@ (80079bc <__libc_init_array+0x44>)
 800798c:	f002 f864 	bl	8009a58 <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	08009e18 	.word	0x08009e18
 80079b4:	08009e18 	.word	0x08009e18
 80079b8:	08009e18 	.word	0x08009e18
 80079bc:	08009e1c 	.word	0x08009e1c

080079c0 <__retarget_lock_init_recursive>:
 80079c0:	4770      	bx	lr

080079c2 <__retarget_lock_acquire_recursive>:
 80079c2:	4770      	bx	lr

080079c4 <__retarget_lock_release_recursive>:
 80079c4:	4770      	bx	lr

080079c6 <quorem>:
 80079c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	6903      	ldr	r3, [r0, #16]
 80079cc:	690c      	ldr	r4, [r1, #16]
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	4607      	mov	r7, r0
 80079d2:	db7e      	blt.n	8007ad2 <quorem+0x10c>
 80079d4:	3c01      	subs	r4, #1
 80079d6:	f101 0814 	add.w	r8, r1, #20
 80079da:	00a3      	lsls	r3, r4, #2
 80079dc:	f100 0514 	add.w	r5, r0, #20
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079f0:	3301      	adds	r3, #1
 80079f2:	429a      	cmp	r2, r3
 80079f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80079fc:	d32e      	bcc.n	8007a5c <quorem+0x96>
 80079fe:	f04f 0a00 	mov.w	sl, #0
 8007a02:	46c4      	mov	ip, r8
 8007a04:	46ae      	mov	lr, r5
 8007a06:	46d3      	mov	fp, sl
 8007a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a0c:	b298      	uxth	r0, r3
 8007a0e:	fb06 a000 	mla	r0, r6, r0, sl
 8007a12:	0c02      	lsrs	r2, r0, #16
 8007a14:	0c1b      	lsrs	r3, r3, #16
 8007a16:	fb06 2303 	mla	r3, r6, r3, r2
 8007a1a:	f8de 2000 	ldr.w	r2, [lr]
 8007a1e:	b280      	uxth	r0, r0
 8007a20:	b292      	uxth	r2, r2
 8007a22:	1a12      	subs	r2, r2, r0
 8007a24:	445a      	add	r2, fp
 8007a26:	f8de 0000 	ldr.w	r0, [lr]
 8007a2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a3e:	45e1      	cmp	r9, ip
 8007a40:	f84e 2b04 	str.w	r2, [lr], #4
 8007a44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a48:	d2de      	bcs.n	8007a08 <quorem+0x42>
 8007a4a:	9b00      	ldr	r3, [sp, #0]
 8007a4c:	58eb      	ldr	r3, [r5, r3]
 8007a4e:	b92b      	cbnz	r3, 8007a5c <quorem+0x96>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	3b04      	subs	r3, #4
 8007a54:	429d      	cmp	r5, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	d32f      	bcc.n	8007aba <quorem+0xf4>
 8007a5a:	613c      	str	r4, [r7, #16]
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f001 f979 	bl	8008d54 <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	db25      	blt.n	8007ab2 <quorem+0xec>
 8007a66:	4629      	mov	r1, r5
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a6e:	f8d1 c000 	ldr.w	ip, [r1]
 8007a72:	fa1f fe82 	uxth.w	lr, r2
 8007a76:	fa1f f38c 	uxth.w	r3, ip
 8007a7a:	eba3 030e 	sub.w	r3, r3, lr
 8007a7e:	4403      	add	r3, r0
 8007a80:	0c12      	lsrs	r2, r2, #16
 8007a82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a90:	45c1      	cmp	r9, r8
 8007a92:	f841 3b04 	str.w	r3, [r1], #4
 8007a96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a9a:	d2e6      	bcs.n	8007a6a <quorem+0xa4>
 8007a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa4:	b922      	cbnz	r2, 8007ab0 <quorem+0xea>
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	429d      	cmp	r5, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	d30b      	bcc.n	8007ac6 <quorem+0x100>
 8007aae:	613c      	str	r4, [r7, #16]
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	3b04      	subs	r3, #4
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1cb      	bne.n	8007a5a <quorem+0x94>
 8007ac2:	3c01      	subs	r4, #1
 8007ac4:	e7c6      	b.n	8007a54 <quorem+0x8e>
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1ef      	bne.n	8007aae <quorem+0xe8>
 8007ace:	3c01      	subs	r4, #1
 8007ad0:	e7ea      	b.n	8007aa8 <quorem+0xe2>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e7ee      	b.n	8007ab4 <quorem+0xee>
	...

08007ad8 <_dtoa_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	69c7      	ldr	r7, [r0, #28]
 8007ade:	b099      	sub	sp, #100	@ 0x64
 8007ae0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ae4:	ec55 4b10 	vmov	r4, r5, d0
 8007ae8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007aea:	9109      	str	r1, [sp, #36]	@ 0x24
 8007aec:	4683      	mov	fp, r0
 8007aee:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007af2:	b97f      	cbnz	r7, 8007b14 <_dtoa_r+0x3c>
 8007af4:	2010      	movs	r0, #16
 8007af6:	f000 fdfd 	bl	80086f4 <malloc>
 8007afa:	4602      	mov	r2, r0
 8007afc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b00:	b920      	cbnz	r0, 8007b0c <_dtoa_r+0x34>
 8007b02:	4ba7      	ldr	r3, [pc, #668]	@ (8007da0 <_dtoa_r+0x2c8>)
 8007b04:	21ef      	movs	r1, #239	@ 0xef
 8007b06:	48a7      	ldr	r0, [pc, #668]	@ (8007da4 <_dtoa_r+0x2cc>)
 8007b08:	f001 fc68 	bl	80093dc <__assert_func>
 8007b0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b10:	6007      	str	r7, [r0, #0]
 8007b12:	60c7      	str	r7, [r0, #12]
 8007b14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b18:	6819      	ldr	r1, [r3, #0]
 8007b1a:	b159      	cbz	r1, 8007b34 <_dtoa_r+0x5c>
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	604a      	str	r2, [r1, #4]
 8007b20:	2301      	movs	r3, #1
 8007b22:	4093      	lsls	r3, r2
 8007b24:	608b      	str	r3, [r1, #8]
 8007b26:	4658      	mov	r0, fp
 8007b28:	f000 feda 	bl	80088e0 <_Bfree>
 8007b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	1e2b      	subs	r3, r5, #0
 8007b36:	bfb9      	ittee	lt
 8007b38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b3c:	9303      	strlt	r3, [sp, #12]
 8007b3e:	2300      	movge	r3, #0
 8007b40:	6033      	strge	r3, [r6, #0]
 8007b42:	9f03      	ldr	r7, [sp, #12]
 8007b44:	4b98      	ldr	r3, [pc, #608]	@ (8007da8 <_dtoa_r+0x2d0>)
 8007b46:	bfbc      	itt	lt
 8007b48:	2201      	movlt	r2, #1
 8007b4a:	6032      	strlt	r2, [r6, #0]
 8007b4c:	43bb      	bics	r3, r7
 8007b4e:	d112      	bne.n	8007b76 <_dtoa_r+0x9e>
 8007b50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b5c:	4323      	orrs	r3, r4
 8007b5e:	f000 854d 	beq.w	80085fc <_dtoa_r+0xb24>
 8007b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007dbc <_dtoa_r+0x2e4>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 854f 	beq.w	800860c <_dtoa_r+0xb34>
 8007b6e:	f10a 0303 	add.w	r3, sl, #3
 8007b72:	f000 bd49 	b.w	8008608 <_dtoa_r+0xb30>
 8007b76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	ec51 0b17 	vmov	r0, r1, d7
 8007b80:	2300      	movs	r3, #0
 8007b82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b86:	f7f8 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	b158      	cbz	r0, 8007ba6 <_dtoa_r+0xce>
 8007b8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b90:	2301      	movs	r3, #1
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b96:	b113      	cbz	r3, 8007b9e <_dtoa_r+0xc6>
 8007b98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b9a:	4b84      	ldr	r3, [pc, #528]	@ (8007dac <_dtoa_r+0x2d4>)
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007dc0 <_dtoa_r+0x2e8>
 8007ba2:	f000 bd33 	b.w	800860c <_dtoa_r+0xb34>
 8007ba6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007baa:	aa16      	add	r2, sp, #88	@ 0x58
 8007bac:	a917      	add	r1, sp, #92	@ 0x5c
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f001 f980 	bl	8008eb4 <__d2b>
 8007bb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bb8:	4681      	mov	r9, r0
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d077      	beq.n	8007cae <_dtoa_r+0x1d6>
 8007bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bd8:	4619      	mov	r1, r3
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4b74      	ldr	r3, [pc, #464]	@ (8007db0 <_dtoa_r+0x2d8>)
 8007bde:	f7f8 fb5b 	bl	8000298 <__aeabi_dsub>
 8007be2:	a369      	add	r3, pc, #420	@ (adr r3, 8007d88 <_dtoa_r+0x2b0>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	a368      	add	r3, pc, #416	@ (adr r3, 8007d90 <_dtoa_r+0x2b8>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fb53 	bl	800029c <__adddf3>
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	f7f8 fc9a 	bl	8000534 <__aeabi_i2d>
 8007c00:	a365      	add	r3, pc, #404	@ (adr r3, 8007d98 <_dtoa_r+0x2c0>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4620      	mov	r0, r4
 8007c10:	4629      	mov	r1, r5
 8007c12:	f7f8 fb43 	bl	800029c <__adddf3>
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
 8007c1a:	f7f8 ffa5 	bl	8000b68 <__aeabi_d2iz>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4607      	mov	r7, r0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 ff60 	bl	8000aec <__aeabi_dcmplt>
 8007c2c:	b140      	cbz	r0, 8007c40 <_dtoa_r+0x168>
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f7f8 fc80 	bl	8000534 <__aeabi_i2d>
 8007c34:	4622      	mov	r2, r4
 8007c36:	462b      	mov	r3, r5
 8007c38:	f7f8 ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c3c:	b900      	cbnz	r0, 8007c40 <_dtoa_r+0x168>
 8007c3e:	3f01      	subs	r7, #1
 8007c40:	2f16      	cmp	r7, #22
 8007c42:	d851      	bhi.n	8007ce8 <_dtoa_r+0x210>
 8007c44:	4b5b      	ldr	r3, [pc, #364]	@ (8007db4 <_dtoa_r+0x2dc>)
 8007c46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c52:	f7f8 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d048      	beq.n	8007cec <_dtoa_r+0x214>
 8007c5a:	3f01      	subs	r7, #1
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c62:	1b9b      	subs	r3, r3, r6
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	bf44      	itt	mi
 8007c68:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c6c:	2300      	movmi	r3, #0
 8007c6e:	9208      	str	r2, [sp, #32]
 8007c70:	bf54      	ite	pl
 8007c72:	f04f 0800 	movpl.w	r8, #0
 8007c76:	9308      	strmi	r3, [sp, #32]
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	db39      	blt.n	8007cf0 <_dtoa_r+0x218>
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c80:	443b      	add	r3, r7
 8007c82:	9308      	str	r3, [sp, #32]
 8007c84:	2300      	movs	r3, #0
 8007c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d864      	bhi.n	8007d58 <_dtoa_r+0x280>
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	bfc4      	itt	gt
 8007c92:	3b04      	subgt	r3, #4
 8007c94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c98:	f1a3 0302 	sub.w	r3, r3, #2
 8007c9c:	bfcc      	ite	gt
 8007c9e:	2400      	movgt	r4, #0
 8007ca0:	2401      	movle	r4, #1
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d863      	bhi.n	8007d6e <_dtoa_r+0x296>
 8007ca6:	e8df f003 	tbb	[pc, r3]
 8007caa:	372a      	.short	0x372a
 8007cac:	5535      	.short	0x5535
 8007cae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007cb2:	441e      	add	r6, r3
 8007cb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	bfc1      	itttt	gt
 8007cbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cc0:	409f      	lslgt	r7, r3
 8007cc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cca:	bfd6      	itet	le
 8007ccc:	f1c3 0320 	rsble	r3, r3, #32
 8007cd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cd4:	fa04 f003 	lslle.w	r0, r4, r3
 8007cd8:	f7f8 fc1c 	bl	8000514 <__aeabi_ui2d>
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ce2:	3e01      	subs	r6, #1
 8007ce4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ce6:	e777      	b.n	8007bd8 <_dtoa_r+0x100>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e7b8      	b.n	8007c5e <_dtoa_r+0x186>
 8007cec:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cee:	e7b7      	b.n	8007c60 <_dtoa_r+0x188>
 8007cf0:	427b      	negs	r3, r7
 8007cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	eba8 0807 	sub.w	r8, r8, r7
 8007cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cfc:	e7c4      	b.n	8007c88 <_dtoa_r+0x1b0>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dc35      	bgt.n	8007d74 <_dtoa_r+0x29c>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	9307      	str	r3, [sp, #28]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d12:	e00b      	b.n	8007d2c <_dtoa_r+0x254>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e7f3      	b.n	8007d00 <_dtoa_r+0x228>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1e:	18fb      	adds	r3, r7, r3
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	9307      	str	r3, [sp, #28]
 8007d28:	bfb8      	it	lt
 8007d2a:	2301      	movlt	r3, #1
 8007d2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d30:	2100      	movs	r1, #0
 8007d32:	2204      	movs	r2, #4
 8007d34:	f102 0514 	add.w	r5, r2, #20
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	d91f      	bls.n	8007d7c <_dtoa_r+0x2a4>
 8007d3c:	6041      	str	r1, [r0, #4]
 8007d3e:	4658      	mov	r0, fp
 8007d40:	f000 fd8e 	bl	8008860 <_Balloc>
 8007d44:	4682      	mov	sl, r0
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d13c      	bne.n	8007dc4 <_dtoa_r+0x2ec>
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007db8 <_dtoa_r+0x2e0>)
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d52:	e6d8      	b.n	8007b06 <_dtoa_r+0x2e>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e7e0      	b.n	8007d1a <_dtoa_r+0x242>
 8007d58:	2401      	movs	r4, #1
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2312      	movs	r3, #18
 8007d6c:	e7d0      	b.n	8007d10 <_dtoa_r+0x238>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d72:	e7f5      	b.n	8007d60 <_dtoa_r+0x288>
 8007d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	e7d7      	b.n	8007d2c <_dtoa_r+0x254>
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	0052      	lsls	r2, r2, #1
 8007d80:	e7d8      	b.n	8007d34 <_dtoa_r+0x25c>
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	636f4361 	.word	0x636f4361
 8007d8c:	3fd287a7 	.word	0x3fd287a7
 8007d90:	8b60c8b3 	.word	0x8b60c8b3
 8007d94:	3fc68a28 	.word	0x3fc68a28
 8007d98:	509f79fb 	.word	0x509f79fb
 8007d9c:	3fd34413 	.word	0x3fd34413
 8007da0:	08009ae1 	.word	0x08009ae1
 8007da4:	08009af8 	.word	0x08009af8
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	08009ab1 	.word	0x08009ab1
 8007db0:	3ff80000 	.word	0x3ff80000
 8007db4:	08009bf0 	.word	0x08009bf0
 8007db8:	08009b50 	.word	0x08009b50
 8007dbc:	08009add 	.word	0x08009add
 8007dc0:	08009ab0 	.word	0x08009ab0
 8007dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dc8:	6018      	str	r0, [r3, #0]
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	2b0e      	cmp	r3, #14
 8007dce:	f200 80a4 	bhi.w	8007f1a <_dtoa_r+0x442>
 8007dd2:	2c00      	cmp	r4, #0
 8007dd4:	f000 80a1 	beq.w	8007f1a <_dtoa_r+0x442>
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	dd33      	ble.n	8007e44 <_dtoa_r+0x36c>
 8007ddc:	4bad      	ldr	r3, [pc, #692]	@ (8008094 <_dtoa_r+0x5bc>)
 8007dde:	f007 020f 	and.w	r2, r7, #15
 8007de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007de6:	ed93 7b00 	vldr	d7, [r3]
 8007dea:	05f8      	lsls	r0, r7, #23
 8007dec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007df0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007df4:	d516      	bpl.n	8007e24 <_dtoa_r+0x34c>
 8007df6:	4ba8      	ldr	r3, [pc, #672]	@ (8008098 <_dtoa_r+0x5c0>)
 8007df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e00:	f7f8 fd2c 	bl	800085c <__aeabi_ddiv>
 8007e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e08:	f004 040f 	and.w	r4, r4, #15
 8007e0c:	2603      	movs	r6, #3
 8007e0e:	4da2      	ldr	r5, [pc, #648]	@ (8008098 <_dtoa_r+0x5c0>)
 8007e10:	b954      	cbnz	r4, 8007e28 <_dtoa_r+0x350>
 8007e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1a:	f7f8 fd1f 	bl	800085c <__aeabi_ddiv>
 8007e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e22:	e028      	b.n	8007e76 <_dtoa_r+0x39e>
 8007e24:	2602      	movs	r6, #2
 8007e26:	e7f2      	b.n	8007e0e <_dtoa_r+0x336>
 8007e28:	07e1      	lsls	r1, r4, #31
 8007e2a:	d508      	bpl.n	8007e3e <_dtoa_r+0x366>
 8007e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e34:	f7f8 fbe8 	bl	8000608 <__aeabi_dmul>
 8007e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	1064      	asrs	r4, r4, #1
 8007e40:	3508      	adds	r5, #8
 8007e42:	e7e5      	b.n	8007e10 <_dtoa_r+0x338>
 8007e44:	f000 80d2 	beq.w	8007fec <_dtoa_r+0x514>
 8007e48:	427c      	negs	r4, r7
 8007e4a:	4b92      	ldr	r3, [pc, #584]	@ (8008094 <_dtoa_r+0x5bc>)
 8007e4c:	4d92      	ldr	r5, [pc, #584]	@ (8008098 <_dtoa_r+0x5c0>)
 8007e4e:	f004 020f 	and.w	r2, r4, #15
 8007e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e5e:	f7f8 fbd3 	bl	8000608 <__aeabi_dmul>
 8007e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e66:	1124      	asrs	r4, r4, #4
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2602      	movs	r6, #2
 8007e6c:	2c00      	cmp	r4, #0
 8007e6e:	f040 80b2 	bne.w	8007fd6 <_dtoa_r+0x4fe>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1d3      	bne.n	8007e1e <_dtoa_r+0x346>
 8007e76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80b7 	beq.w	8007ff0 <_dtoa_r+0x518>
 8007e82:	4b86      	ldr	r3, [pc, #536]	@ (800809c <_dtoa_r+0x5c4>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 fe2f 	bl	8000aec <__aeabi_dcmplt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f000 80ae 	beq.w	8007ff0 <_dtoa_r+0x518>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80aa 	beq.w	8007ff0 <_dtoa_r+0x518>
 8007e9c:	9b00      	ldr	r3, [sp, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd37      	ble.n	8007f12 <_dtoa_r+0x43a>
 8007ea2:	1e7b      	subs	r3, r7, #1
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4b7d      	ldr	r3, [pc, #500]	@ (80080a0 <_dtoa_r+0x5c8>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 fbab 	bl	8000608 <__aeabi_dmul>
 8007eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb6:	9c00      	ldr	r4, [sp, #0]
 8007eb8:	3601      	adds	r6, #1
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7f8 fb3a 	bl	8000534 <__aeabi_i2d>
 8007ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec4:	f7f8 fba0 	bl	8000608 <__aeabi_dmul>
 8007ec8:	4b76      	ldr	r3, [pc, #472]	@ (80080a4 <_dtoa_r+0x5cc>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f7f8 f9e6 	bl	800029c <__adddf3>
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	f040 808d 	bne.w	8007ff6 <_dtoa_r+0x51e>
 8007edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee0:	4b71      	ldr	r3, [pc, #452]	@ (80080a8 <_dtoa_r+0x5d0>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f7f8 f9d8 	bl	8000298 <__aeabi_dsub>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	4633      	mov	r3, r6
 8007ef4:	f7f8 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 828b 	bne.w	8008414 <_dtoa_r+0x93c>
 8007efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f02:	462a      	mov	r2, r5
 8007f04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 8128 	bne.w	8008162 <_dtoa_r+0x68a>
 8007f12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f2c0 815a 	blt.w	80081d6 <_dtoa_r+0x6fe>
 8007f22:	2f0e      	cmp	r7, #14
 8007f24:	f300 8157 	bgt.w	80081d6 <_dtoa_r+0x6fe>
 8007f28:	4b5a      	ldr	r3, [pc, #360]	@ (8008094 <_dtoa_r+0x5bc>)
 8007f2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f2e:	ed93 7b00 	vldr	d7, [r3]
 8007f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	ed8d 7b00 	vstr	d7, [sp]
 8007f3a:	da03      	bge.n	8007f44 <_dtoa_r+0x46c>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f340 8101 	ble.w	8008146 <_dtoa_r+0x66e>
 8007f44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f48:	4656      	mov	r6, sl
 8007f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fc83 	bl	800085c <__aeabi_ddiv>
 8007f56:	f7f8 fe07 	bl	8000b68 <__aeabi_d2iz>
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	f7f8 faea 	bl	8000534 <__aeabi_i2d>
 8007f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f64:	f7f8 fb50 	bl	8000608 <__aeabi_dmul>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f74:	f7f8 f990 	bl	8000298 <__aeabi_dsub>
 8007f78:	f806 4b01 	strb.w	r4, [r6], #1
 8007f7c:	9d07      	ldr	r5, [sp, #28]
 8007f7e:	eba6 040a 	sub.w	r4, r6, sl
 8007f82:	42a5      	cmp	r5, r4
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	f040 8117 	bne.w	80081ba <_dtoa_r+0x6e2>
 8007f8c:	f7f8 f986 	bl	800029c <__adddf3>
 8007f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f94:	4604      	mov	r4, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	f7f8 fdc6 	bl	8000b28 <__aeabi_dcmpgt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f040 80f9 	bne.w	8008194 <_dtoa_r+0x6bc>
 8007fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fae:	b118      	cbz	r0, 8007fb8 <_dtoa_r+0x4e0>
 8007fb0:	f018 0f01 	tst.w	r8, #1
 8007fb4:	f040 80ee 	bne.w	8008194 <_dtoa_r+0x6bc>
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4658      	mov	r0, fp
 8007fbc:	f000 fc90 	bl	80088e0 <_Bfree>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	7033      	strb	r3, [r6, #0]
 8007fc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fc6:	3701      	adds	r7, #1
 8007fc8:	601f      	str	r7, [r3, #0]
 8007fca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 831d 	beq.w	800860c <_dtoa_r+0xb34>
 8007fd2:	601e      	str	r6, [r3, #0]
 8007fd4:	e31a      	b.n	800860c <_dtoa_r+0xb34>
 8007fd6:	07e2      	lsls	r2, r4, #31
 8007fd8:	d505      	bpl.n	8007fe6 <_dtoa_r+0x50e>
 8007fda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fde:	f7f8 fb13 	bl	8000608 <__aeabi_dmul>
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	1064      	asrs	r4, r4, #1
 8007fe8:	3508      	adds	r5, #8
 8007fea:	e73f      	b.n	8007e6c <_dtoa_r+0x394>
 8007fec:	2602      	movs	r6, #2
 8007fee:	e742      	b.n	8007e76 <_dtoa_r+0x39e>
 8007ff0:	9c07      	ldr	r4, [sp, #28]
 8007ff2:	9704      	str	r7, [sp, #16]
 8007ff4:	e761      	b.n	8007eba <_dtoa_r+0x3e2>
 8007ff6:	4b27      	ldr	r3, [pc, #156]	@ (8008094 <_dtoa_r+0x5bc>)
 8007ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ffa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ffe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008002:	4454      	add	r4, sl
 8008004:	2900      	cmp	r1, #0
 8008006:	d053      	beq.n	80080b0 <_dtoa_r+0x5d8>
 8008008:	4928      	ldr	r1, [pc, #160]	@ (80080ac <_dtoa_r+0x5d4>)
 800800a:	2000      	movs	r0, #0
 800800c:	f7f8 fc26 	bl	800085c <__aeabi_ddiv>
 8008010:	4633      	mov	r3, r6
 8008012:	462a      	mov	r2, r5
 8008014:	f7f8 f940 	bl	8000298 <__aeabi_dsub>
 8008018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800801c:	4656      	mov	r6, sl
 800801e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008022:	f7f8 fda1 	bl	8000b68 <__aeabi_d2iz>
 8008026:	4605      	mov	r5, r0
 8008028:	f7f8 fa84 	bl	8000534 <__aeabi_i2d>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	3530      	adds	r5, #48	@ 0x30
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008042:	f806 5b01 	strb.w	r5, [r6], #1
 8008046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800804a:	f7f8 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800804e:	2800      	cmp	r0, #0
 8008050:	d171      	bne.n	8008136 <_dtoa_r+0x65e>
 8008052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008056:	4911      	ldr	r1, [pc, #68]	@ (800809c <_dtoa_r+0x5c4>)
 8008058:	2000      	movs	r0, #0
 800805a:	f7f8 f91d 	bl	8000298 <__aeabi_dsub>
 800805e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008062:	f7f8 fd43 	bl	8000aec <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8095 	bne.w	8008196 <_dtoa_r+0x6be>
 800806c:	42a6      	cmp	r6, r4
 800806e:	f43f af50 	beq.w	8007f12 <_dtoa_r+0x43a>
 8008072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008076:	4b0a      	ldr	r3, [pc, #40]	@ (80080a0 <_dtoa_r+0x5c8>)
 8008078:	2200      	movs	r2, #0
 800807a:	f7f8 fac5 	bl	8000608 <__aeabi_dmul>
 800807e:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <_dtoa_r+0x5c8>)
 8008080:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008084:	2200      	movs	r2, #0
 8008086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808a:	f7f8 fabd 	bl	8000608 <__aeabi_dmul>
 800808e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008092:	e7c4      	b.n	800801e <_dtoa_r+0x546>
 8008094:	08009bf0 	.word	0x08009bf0
 8008098:	08009bc8 	.word	0x08009bc8
 800809c:	3ff00000 	.word	0x3ff00000
 80080a0:	40240000 	.word	0x40240000
 80080a4:	401c0000 	.word	0x401c0000
 80080a8:	40140000 	.word	0x40140000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7f8 faa8 	bl	8000608 <__aeabi_dmul>
 80080b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80080be:	4656      	mov	r6, sl
 80080c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c4:	f7f8 fd50 	bl	8000b68 <__aeabi_d2iz>
 80080c8:	4605      	mov	r5, r0
 80080ca:	f7f8 fa33 	bl	8000534 <__aeabi_i2d>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d6:	f7f8 f8df 	bl	8000298 <__aeabi_dsub>
 80080da:	3530      	adds	r5, #48	@ 0x30
 80080dc:	f806 5b01 	strb.w	r5, [r6], #1
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	42a6      	cmp	r6, r4
 80080e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	d124      	bne.n	800813a <_dtoa_r+0x662>
 80080f0:	4bac      	ldr	r3, [pc, #688]	@ (80083a4 <_dtoa_r+0x8cc>)
 80080f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080f6:	f7f8 f8d1 	bl	800029c <__adddf3>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fd11 	bl	8000b28 <__aeabi_dcmpgt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d145      	bne.n	8008196 <_dtoa_r+0x6be>
 800810a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800810e:	49a5      	ldr	r1, [pc, #660]	@ (80083a4 <_dtoa_r+0x8cc>)
 8008110:	2000      	movs	r0, #0
 8008112:	f7f8 f8c1 	bl	8000298 <__aeabi_dsub>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811e:	f7f8 fce5 	bl	8000aec <__aeabi_dcmplt>
 8008122:	2800      	cmp	r0, #0
 8008124:	f43f aef5 	beq.w	8007f12 <_dtoa_r+0x43a>
 8008128:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800812a:	1e73      	subs	r3, r6, #1
 800812c:	9315      	str	r3, [sp, #84]	@ 0x54
 800812e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008132:	2b30      	cmp	r3, #48	@ 0x30
 8008134:	d0f8      	beq.n	8008128 <_dtoa_r+0x650>
 8008136:	9f04      	ldr	r7, [sp, #16]
 8008138:	e73e      	b.n	8007fb8 <_dtoa_r+0x4e0>
 800813a:	4b9b      	ldr	r3, [pc, #620]	@ (80083a8 <_dtoa_r+0x8d0>)
 800813c:	f7f8 fa64 	bl	8000608 <__aeabi_dmul>
 8008140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008144:	e7bc      	b.n	80080c0 <_dtoa_r+0x5e8>
 8008146:	d10c      	bne.n	8008162 <_dtoa_r+0x68a>
 8008148:	4b98      	ldr	r3, [pc, #608]	@ (80083ac <_dtoa_r+0x8d4>)
 800814a:	2200      	movs	r2, #0
 800814c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008150:	f7f8 fa5a 	bl	8000608 <__aeabi_dmul>
 8008154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008158:	f7f8 fcdc 	bl	8000b14 <__aeabi_dcmpge>
 800815c:	2800      	cmp	r0, #0
 800815e:	f000 8157 	beq.w	8008410 <_dtoa_r+0x938>
 8008162:	2400      	movs	r4, #0
 8008164:	4625      	mov	r5, r4
 8008166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008168:	43db      	mvns	r3, r3
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	4656      	mov	r6, sl
 800816e:	2700      	movs	r7, #0
 8008170:	4621      	mov	r1, r4
 8008172:	4658      	mov	r0, fp
 8008174:	f000 fbb4 	bl	80088e0 <_Bfree>
 8008178:	2d00      	cmp	r5, #0
 800817a:	d0dc      	beq.n	8008136 <_dtoa_r+0x65e>
 800817c:	b12f      	cbz	r7, 800818a <_dtoa_r+0x6b2>
 800817e:	42af      	cmp	r7, r5
 8008180:	d003      	beq.n	800818a <_dtoa_r+0x6b2>
 8008182:	4639      	mov	r1, r7
 8008184:	4658      	mov	r0, fp
 8008186:	f000 fbab 	bl	80088e0 <_Bfree>
 800818a:	4629      	mov	r1, r5
 800818c:	4658      	mov	r0, fp
 800818e:	f000 fba7 	bl	80088e0 <_Bfree>
 8008192:	e7d0      	b.n	8008136 <_dtoa_r+0x65e>
 8008194:	9704      	str	r7, [sp, #16]
 8008196:	4633      	mov	r3, r6
 8008198:	461e      	mov	r6, r3
 800819a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819e:	2a39      	cmp	r2, #57	@ 0x39
 80081a0:	d107      	bne.n	80081b2 <_dtoa_r+0x6da>
 80081a2:	459a      	cmp	sl, r3
 80081a4:	d1f8      	bne.n	8008198 <_dtoa_r+0x6c0>
 80081a6:	9a04      	ldr	r2, [sp, #16]
 80081a8:	3201      	adds	r2, #1
 80081aa:	9204      	str	r2, [sp, #16]
 80081ac:	2230      	movs	r2, #48	@ 0x30
 80081ae:	f88a 2000 	strb.w	r2, [sl]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	3201      	adds	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e7bd      	b.n	8008136 <_dtoa_r+0x65e>
 80081ba:	4b7b      	ldr	r3, [pc, #492]	@ (80083a8 <_dtoa_r+0x8d0>)
 80081bc:	2200      	movs	r2, #0
 80081be:	f7f8 fa23 	bl	8000608 <__aeabi_dmul>
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	460d      	mov	r5, r1
 80081ca:	f7f8 fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f aebb 	beq.w	8007f4a <_dtoa_r+0x472>
 80081d4:	e6f0      	b.n	8007fb8 <_dtoa_r+0x4e0>
 80081d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081d8:	2a00      	cmp	r2, #0
 80081da:	f000 80db 	beq.w	8008394 <_dtoa_r+0x8bc>
 80081de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e0:	2a01      	cmp	r2, #1
 80081e2:	f300 80bf 	bgt.w	8008364 <_dtoa_r+0x88c>
 80081e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	f000 80b7 	beq.w	800835c <_dtoa_r+0x884>
 80081ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081f4:	4646      	mov	r6, r8
 80081f6:	9a08      	ldr	r2, [sp, #32]
 80081f8:	2101      	movs	r1, #1
 80081fa:	441a      	add	r2, r3
 80081fc:	4658      	mov	r0, fp
 80081fe:	4498      	add	r8, r3
 8008200:	9208      	str	r2, [sp, #32]
 8008202:	f000 fc21 	bl	8008a48 <__i2b>
 8008206:	4605      	mov	r5, r0
 8008208:	b15e      	cbz	r6, 8008222 <_dtoa_r+0x74a>
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd08      	ble.n	8008222 <_dtoa_r+0x74a>
 8008210:	42b3      	cmp	r3, r6
 8008212:	9a08      	ldr	r2, [sp, #32]
 8008214:	bfa8      	it	ge
 8008216:	4633      	movge	r3, r6
 8008218:	eba8 0803 	sub.w	r8, r8, r3
 800821c:	1af6      	subs	r6, r6, r3
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008224:	b1f3      	cbz	r3, 8008264 <_dtoa_r+0x78c>
 8008226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 80b7 	beq.w	800839c <_dtoa_r+0x8c4>
 800822e:	b18c      	cbz	r4, 8008254 <_dtoa_r+0x77c>
 8008230:	4629      	mov	r1, r5
 8008232:	4622      	mov	r2, r4
 8008234:	4658      	mov	r0, fp
 8008236:	f000 fcc7 	bl	8008bc8 <__pow5mult>
 800823a:	464a      	mov	r2, r9
 800823c:	4601      	mov	r1, r0
 800823e:	4605      	mov	r5, r0
 8008240:	4658      	mov	r0, fp
 8008242:	f000 fc17 	bl	8008a74 <__multiply>
 8008246:	4649      	mov	r1, r9
 8008248:	9004      	str	r0, [sp, #16]
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fb48 	bl	80088e0 <_Bfree>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	4699      	mov	r9, r3
 8008254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008256:	1b1a      	subs	r2, r3, r4
 8008258:	d004      	beq.n	8008264 <_dtoa_r+0x78c>
 800825a:	4649      	mov	r1, r9
 800825c:	4658      	mov	r0, fp
 800825e:	f000 fcb3 	bl	8008bc8 <__pow5mult>
 8008262:	4681      	mov	r9, r0
 8008264:	2101      	movs	r1, #1
 8008266:	4658      	mov	r0, fp
 8008268:	f000 fbee 	bl	8008a48 <__i2b>
 800826c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826e:	4604      	mov	r4, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 81cf 	beq.w	8008614 <_dtoa_r+0xb3c>
 8008276:	461a      	mov	r2, r3
 8008278:	4601      	mov	r1, r0
 800827a:	4658      	mov	r0, fp
 800827c:	f000 fca4 	bl	8008bc8 <__pow5mult>
 8008280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008282:	2b01      	cmp	r3, #1
 8008284:	4604      	mov	r4, r0
 8008286:	f300 8095 	bgt.w	80083b4 <_dtoa_r+0x8dc>
 800828a:	9b02      	ldr	r3, [sp, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8087 	bne.w	80083a0 <_dtoa_r+0x8c8>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 8089 	bne.w	80083b0 <_dtoa_r+0x8d8>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082a4:	0d1b      	lsrs	r3, r3, #20
 80082a6:	051b      	lsls	r3, r3, #20
 80082a8:	b12b      	cbz	r3, 80082b6 <_dtoa_r+0x7de>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	3301      	adds	r3, #1
 80082ae:	9308      	str	r3, [sp, #32]
 80082b0:	f108 0801 	add.w	r8, r8, #1
 80082b4:	2301      	movs	r3, #1
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 81b0 	beq.w	8008620 <_dtoa_r+0xb48>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082c6:	6918      	ldr	r0, [r3, #16]
 80082c8:	f000 fb72 	bl	80089b0 <__hi0bits>
 80082cc:	f1c0 0020 	rsb	r0, r0, #32
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	4418      	add	r0, r3
 80082d4:	f010 001f 	ands.w	r0, r0, #31
 80082d8:	d077      	beq.n	80083ca <_dtoa_r+0x8f2>
 80082da:	f1c0 0320 	rsb	r3, r0, #32
 80082de:	2b04      	cmp	r3, #4
 80082e0:	dd6b      	ble.n	80083ba <_dtoa_r+0x8e2>
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	f1c0 001c 	rsb	r0, r0, #28
 80082e8:	4403      	add	r3, r0
 80082ea:	4480      	add	r8, r0
 80082ec:	4406      	add	r6, r0
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	f1b8 0f00 	cmp.w	r8, #0
 80082f4:	dd05      	ble.n	8008302 <_dtoa_r+0x82a>
 80082f6:	4649      	mov	r1, r9
 80082f8:	4642      	mov	r2, r8
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fcbe 	bl	8008c7c <__lshift>
 8008300:	4681      	mov	r9, r0
 8008302:	9b08      	ldr	r3, [sp, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dd05      	ble.n	8008314 <_dtoa_r+0x83c>
 8008308:	4621      	mov	r1, r4
 800830a:	461a      	mov	r2, r3
 800830c:	4658      	mov	r0, fp
 800830e:	f000 fcb5 	bl	8008c7c <__lshift>
 8008312:	4604      	mov	r4, r0
 8008314:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008316:	2b00      	cmp	r3, #0
 8008318:	d059      	beq.n	80083ce <_dtoa_r+0x8f6>
 800831a:	4621      	mov	r1, r4
 800831c:	4648      	mov	r0, r9
 800831e:	f000 fd19 	bl	8008d54 <__mcmp>
 8008322:	2800      	cmp	r0, #0
 8008324:	da53      	bge.n	80083ce <_dtoa_r+0x8f6>
 8008326:	1e7b      	subs	r3, r7, #1
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	4649      	mov	r1, r9
 800832c:	2300      	movs	r3, #0
 800832e:	220a      	movs	r2, #10
 8008330:	4658      	mov	r0, fp
 8008332:	f000 faf7 	bl	8008924 <__multadd>
 8008336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008338:	4681      	mov	r9, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8172 	beq.w	8008624 <_dtoa_r+0xb4c>
 8008340:	2300      	movs	r3, #0
 8008342:	4629      	mov	r1, r5
 8008344:	220a      	movs	r2, #10
 8008346:	4658      	mov	r0, fp
 8008348:	f000 faec 	bl	8008924 <__multadd>
 800834c:	9b00      	ldr	r3, [sp, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	4605      	mov	r5, r0
 8008352:	dc67      	bgt.n	8008424 <_dtoa_r+0x94c>
 8008354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008356:	2b02      	cmp	r3, #2
 8008358:	dc41      	bgt.n	80083de <_dtoa_r+0x906>
 800835a:	e063      	b.n	8008424 <_dtoa_r+0x94c>
 800835c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800835e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008362:	e746      	b.n	80081f2 <_dtoa_r+0x71a>
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	1e5c      	subs	r4, r3, #1
 8008368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800836a:	42a3      	cmp	r3, r4
 800836c:	bfbf      	itttt	lt
 800836e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008370:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008372:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008374:	1ae3      	sublt	r3, r4, r3
 8008376:	bfb4      	ite	lt
 8008378:	18d2      	addlt	r2, r2, r3
 800837a:	1b1c      	subge	r4, r3, r4
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	bfbc      	itt	lt
 8008380:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008382:	2400      	movlt	r4, #0
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfb5      	itete	lt
 8008388:	eba8 0603 	sublt.w	r6, r8, r3
 800838c:	9b07      	ldrge	r3, [sp, #28]
 800838e:	2300      	movlt	r3, #0
 8008390:	4646      	movge	r6, r8
 8008392:	e730      	b.n	80081f6 <_dtoa_r+0x71e>
 8008394:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008396:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008398:	4646      	mov	r6, r8
 800839a:	e735      	b.n	8008208 <_dtoa_r+0x730>
 800839c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800839e:	e75c      	b.n	800825a <_dtoa_r+0x782>
 80083a0:	2300      	movs	r3, #0
 80083a2:	e788      	b.n	80082b6 <_dtoa_r+0x7de>
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	40240000 	.word	0x40240000
 80083ac:	40140000 	.word	0x40140000
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	e780      	b.n	80082b6 <_dtoa_r+0x7de>
 80083b4:	2300      	movs	r3, #0
 80083b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b8:	e782      	b.n	80082c0 <_dtoa_r+0x7e8>
 80083ba:	d099      	beq.n	80082f0 <_dtoa_r+0x818>
 80083bc:	9a08      	ldr	r2, [sp, #32]
 80083be:	331c      	adds	r3, #28
 80083c0:	441a      	add	r2, r3
 80083c2:	4498      	add	r8, r3
 80083c4:	441e      	add	r6, r3
 80083c6:	9208      	str	r2, [sp, #32]
 80083c8:	e792      	b.n	80082f0 <_dtoa_r+0x818>
 80083ca:	4603      	mov	r3, r0
 80083cc:	e7f6      	b.n	80083bc <_dtoa_r+0x8e4>
 80083ce:	9b07      	ldr	r3, [sp, #28]
 80083d0:	9704      	str	r7, [sp, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dc20      	bgt.n	8008418 <_dtoa_r+0x940>
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083da:	2b02      	cmp	r3, #2
 80083dc:	dd1e      	ble.n	800841c <_dtoa_r+0x944>
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f aec0 	bne.w	8008166 <_dtoa_r+0x68e>
 80083e6:	4621      	mov	r1, r4
 80083e8:	2205      	movs	r2, #5
 80083ea:	4658      	mov	r0, fp
 80083ec:	f000 fa9a 	bl	8008924 <__multadd>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 fcad 	bl	8008d54 <__mcmp>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f77f aeb3 	ble.w	8008166 <_dtoa_r+0x68e>
 8008400:	4656      	mov	r6, sl
 8008402:	2331      	movs	r3, #49	@ 0x31
 8008404:	f806 3b01 	strb.w	r3, [r6], #1
 8008408:	9b04      	ldr	r3, [sp, #16]
 800840a:	3301      	adds	r3, #1
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	e6ae      	b.n	800816e <_dtoa_r+0x696>
 8008410:	9c07      	ldr	r4, [sp, #28]
 8008412:	9704      	str	r7, [sp, #16]
 8008414:	4625      	mov	r5, r4
 8008416:	e7f3      	b.n	8008400 <_dtoa_r+0x928>
 8008418:	9b07      	ldr	r3, [sp, #28]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 8104 	beq.w	800862c <_dtoa_r+0xb54>
 8008424:	2e00      	cmp	r6, #0
 8008426:	dd05      	ble.n	8008434 <_dtoa_r+0x95c>
 8008428:	4629      	mov	r1, r5
 800842a:	4632      	mov	r2, r6
 800842c:	4658      	mov	r0, fp
 800842e:	f000 fc25 	bl	8008c7c <__lshift>
 8008432:	4605      	mov	r5, r0
 8008434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d05a      	beq.n	80084f0 <_dtoa_r+0xa18>
 800843a:	6869      	ldr	r1, [r5, #4]
 800843c:	4658      	mov	r0, fp
 800843e:	f000 fa0f 	bl	8008860 <_Balloc>
 8008442:	4606      	mov	r6, r0
 8008444:	b928      	cbnz	r0, 8008452 <_dtoa_r+0x97a>
 8008446:	4b84      	ldr	r3, [pc, #528]	@ (8008658 <_dtoa_r+0xb80>)
 8008448:	4602      	mov	r2, r0
 800844a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800844e:	f7ff bb5a 	b.w	8007b06 <_dtoa_r+0x2e>
 8008452:	692a      	ldr	r2, [r5, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	f105 010c 	add.w	r1, r5, #12
 800845c:	300c      	adds	r0, #12
 800845e:	f000 ffaf 	bl	80093c0 <memcpy>
 8008462:	2201      	movs	r2, #1
 8008464:	4631      	mov	r1, r6
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fc08 	bl	8008c7c <__lshift>
 800846c:	f10a 0301 	add.w	r3, sl, #1
 8008470:	9307      	str	r3, [sp, #28]
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	4453      	add	r3, sl
 8008476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	462f      	mov	r7, r5
 8008480:	930a      	str	r3, [sp, #40]	@ 0x28
 8008482:	4605      	mov	r5, r0
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	4621      	mov	r1, r4
 8008488:	3b01      	subs	r3, #1
 800848a:	4648      	mov	r0, r9
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	f7ff fa9a 	bl	80079c6 <quorem>
 8008492:	4639      	mov	r1, r7
 8008494:	9002      	str	r0, [sp, #8]
 8008496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800849a:	4648      	mov	r0, r9
 800849c:	f000 fc5a 	bl	8008d54 <__mcmp>
 80084a0:	462a      	mov	r2, r5
 80084a2:	9008      	str	r0, [sp, #32]
 80084a4:	4621      	mov	r1, r4
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 fc70 	bl	8008d8c <__mdiff>
 80084ac:	68c2      	ldr	r2, [r0, #12]
 80084ae:	4606      	mov	r6, r0
 80084b0:	bb02      	cbnz	r2, 80084f4 <_dtoa_r+0xa1c>
 80084b2:	4601      	mov	r1, r0
 80084b4:	4648      	mov	r0, r9
 80084b6:	f000 fc4d 	bl	8008d54 <__mcmp>
 80084ba:	4602      	mov	r2, r0
 80084bc:	4631      	mov	r1, r6
 80084be:	4658      	mov	r0, fp
 80084c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084c2:	f000 fa0d 	bl	80088e0 <_Bfree>
 80084c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ca:	9e07      	ldr	r6, [sp, #28]
 80084cc:	ea43 0102 	orr.w	r1, r3, r2
 80084d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d2:	4319      	orrs	r1, r3
 80084d4:	d110      	bne.n	80084f8 <_dtoa_r+0xa20>
 80084d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084da:	d029      	beq.n	8008530 <_dtoa_r+0xa58>
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd02      	ble.n	80084e8 <_dtoa_r+0xa10>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084e8:	9b00      	ldr	r3, [sp, #0]
 80084ea:	f883 8000 	strb.w	r8, [r3]
 80084ee:	e63f      	b.n	8008170 <_dtoa_r+0x698>
 80084f0:	4628      	mov	r0, r5
 80084f2:	e7bb      	b.n	800846c <_dtoa_r+0x994>
 80084f4:	2201      	movs	r2, #1
 80084f6:	e7e1      	b.n	80084bc <_dtoa_r+0x9e4>
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db04      	blt.n	8008508 <_dtoa_r+0xa30>
 80084fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008500:	430b      	orrs	r3, r1
 8008502:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008504:	430b      	orrs	r3, r1
 8008506:	d120      	bne.n	800854a <_dtoa_r+0xa72>
 8008508:	2a00      	cmp	r2, #0
 800850a:	dded      	ble.n	80084e8 <_dtoa_r+0xa10>
 800850c:	4649      	mov	r1, r9
 800850e:	2201      	movs	r2, #1
 8008510:	4658      	mov	r0, fp
 8008512:	f000 fbb3 	bl	8008c7c <__lshift>
 8008516:	4621      	mov	r1, r4
 8008518:	4681      	mov	r9, r0
 800851a:	f000 fc1b 	bl	8008d54 <__mcmp>
 800851e:	2800      	cmp	r0, #0
 8008520:	dc03      	bgt.n	800852a <_dtoa_r+0xa52>
 8008522:	d1e1      	bne.n	80084e8 <_dtoa_r+0xa10>
 8008524:	f018 0f01 	tst.w	r8, #1
 8008528:	d0de      	beq.n	80084e8 <_dtoa_r+0xa10>
 800852a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800852e:	d1d8      	bne.n	80084e2 <_dtoa_r+0xa0a>
 8008530:	9a00      	ldr	r2, [sp, #0]
 8008532:	2339      	movs	r3, #57	@ 0x39
 8008534:	7013      	strb	r3, [r2, #0]
 8008536:	4633      	mov	r3, r6
 8008538:	461e      	mov	r6, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008540:	2a39      	cmp	r2, #57	@ 0x39
 8008542:	d052      	beq.n	80085ea <_dtoa_r+0xb12>
 8008544:	3201      	adds	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e612      	b.n	8008170 <_dtoa_r+0x698>
 800854a:	2a00      	cmp	r2, #0
 800854c:	dd07      	ble.n	800855e <_dtoa_r+0xa86>
 800854e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008552:	d0ed      	beq.n	8008530 <_dtoa_r+0xa58>
 8008554:	9a00      	ldr	r2, [sp, #0]
 8008556:	f108 0301 	add.w	r3, r8, #1
 800855a:	7013      	strb	r3, [r2, #0]
 800855c:	e608      	b.n	8008170 <_dtoa_r+0x698>
 800855e:	9b07      	ldr	r3, [sp, #28]
 8008560:	9a07      	ldr	r2, [sp, #28]
 8008562:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008568:	4293      	cmp	r3, r2
 800856a:	d028      	beq.n	80085be <_dtoa_r+0xae6>
 800856c:	4649      	mov	r1, r9
 800856e:	2300      	movs	r3, #0
 8008570:	220a      	movs	r2, #10
 8008572:	4658      	mov	r0, fp
 8008574:	f000 f9d6 	bl	8008924 <__multadd>
 8008578:	42af      	cmp	r7, r5
 800857a:	4681      	mov	r9, r0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	f04f 020a 	mov.w	r2, #10
 8008584:	4639      	mov	r1, r7
 8008586:	4658      	mov	r0, fp
 8008588:	d107      	bne.n	800859a <_dtoa_r+0xac2>
 800858a:	f000 f9cb 	bl	8008924 <__multadd>
 800858e:	4607      	mov	r7, r0
 8008590:	4605      	mov	r5, r0
 8008592:	9b07      	ldr	r3, [sp, #28]
 8008594:	3301      	adds	r3, #1
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	e774      	b.n	8008484 <_dtoa_r+0x9ac>
 800859a:	f000 f9c3 	bl	8008924 <__multadd>
 800859e:	4629      	mov	r1, r5
 80085a0:	4607      	mov	r7, r0
 80085a2:	2300      	movs	r3, #0
 80085a4:	220a      	movs	r2, #10
 80085a6:	4658      	mov	r0, fp
 80085a8:	f000 f9bc 	bl	8008924 <__multadd>
 80085ac:	4605      	mov	r5, r0
 80085ae:	e7f0      	b.n	8008592 <_dtoa_r+0xaba>
 80085b0:	9b00      	ldr	r3, [sp, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfcc      	ite	gt
 80085b6:	461e      	movgt	r6, r3
 80085b8:	2601      	movle	r6, #1
 80085ba:	4456      	add	r6, sl
 80085bc:	2700      	movs	r7, #0
 80085be:	4649      	mov	r1, r9
 80085c0:	2201      	movs	r2, #1
 80085c2:	4658      	mov	r0, fp
 80085c4:	f000 fb5a 	bl	8008c7c <__lshift>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4681      	mov	r9, r0
 80085cc:	f000 fbc2 	bl	8008d54 <__mcmp>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	dcb0      	bgt.n	8008536 <_dtoa_r+0xa5e>
 80085d4:	d102      	bne.n	80085dc <_dtoa_r+0xb04>
 80085d6:	f018 0f01 	tst.w	r8, #1
 80085da:	d1ac      	bne.n	8008536 <_dtoa_r+0xa5e>
 80085dc:	4633      	mov	r3, r6
 80085de:	461e      	mov	r6, r3
 80085e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085e4:	2a30      	cmp	r2, #48	@ 0x30
 80085e6:	d0fa      	beq.n	80085de <_dtoa_r+0xb06>
 80085e8:	e5c2      	b.n	8008170 <_dtoa_r+0x698>
 80085ea:	459a      	cmp	sl, r3
 80085ec:	d1a4      	bne.n	8008538 <_dtoa_r+0xa60>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	2331      	movs	r3, #49	@ 0x31
 80085f6:	f88a 3000 	strb.w	r3, [sl]
 80085fa:	e5b9      	b.n	8008170 <_dtoa_r+0x698>
 80085fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800865c <_dtoa_r+0xb84>
 8008602:	b11b      	cbz	r3, 800860c <_dtoa_r+0xb34>
 8008604:	f10a 0308 	add.w	r3, sl, #8
 8008608:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	4650      	mov	r0, sl
 800860e:	b019      	add	sp, #100	@ 0x64
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008616:	2b01      	cmp	r3, #1
 8008618:	f77f ae37 	ble.w	800828a <_dtoa_r+0x7b2>
 800861c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008620:	2001      	movs	r0, #1
 8008622:	e655      	b.n	80082d0 <_dtoa_r+0x7f8>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	f77f aed6 	ble.w	80083d8 <_dtoa_r+0x900>
 800862c:	4656      	mov	r6, sl
 800862e:	4621      	mov	r1, r4
 8008630:	4648      	mov	r0, r9
 8008632:	f7ff f9c8 	bl	80079c6 <quorem>
 8008636:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800863a:	f806 8b01 	strb.w	r8, [r6], #1
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	eba6 020a 	sub.w	r2, r6, sl
 8008644:	4293      	cmp	r3, r2
 8008646:	ddb3      	ble.n	80085b0 <_dtoa_r+0xad8>
 8008648:	4649      	mov	r1, r9
 800864a:	2300      	movs	r3, #0
 800864c:	220a      	movs	r2, #10
 800864e:	4658      	mov	r0, fp
 8008650:	f000 f968 	bl	8008924 <__multadd>
 8008654:	4681      	mov	r9, r0
 8008656:	e7ea      	b.n	800862e <_dtoa_r+0xb56>
 8008658:	08009b50 	.word	0x08009b50
 800865c:	08009ad4 	.word	0x08009ad4

08008660 <_free_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4605      	mov	r5, r0
 8008664:	2900      	cmp	r1, #0
 8008666:	d041      	beq.n	80086ec <_free_r+0x8c>
 8008668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800866c:	1f0c      	subs	r4, r1, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	bfb8      	it	lt
 8008672:	18e4      	addlt	r4, r4, r3
 8008674:	f000 f8e8 	bl	8008848 <__malloc_lock>
 8008678:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <_free_r+0x90>)
 800867a:	6813      	ldr	r3, [r2, #0]
 800867c:	b933      	cbnz	r3, 800868c <_free_r+0x2c>
 800867e:	6063      	str	r3, [r4, #4]
 8008680:	6014      	str	r4, [r2, #0]
 8008682:	4628      	mov	r0, r5
 8008684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008688:	f000 b8e4 	b.w	8008854 <__malloc_unlock>
 800868c:	42a3      	cmp	r3, r4
 800868e:	d908      	bls.n	80086a2 <_free_r+0x42>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	1821      	adds	r1, r4, r0
 8008694:	428b      	cmp	r3, r1
 8008696:	bf01      	itttt	eq
 8008698:	6819      	ldreq	r1, [r3, #0]
 800869a:	685b      	ldreq	r3, [r3, #4]
 800869c:	1809      	addeq	r1, r1, r0
 800869e:	6021      	streq	r1, [r4, #0]
 80086a0:	e7ed      	b.n	800867e <_free_r+0x1e>
 80086a2:	461a      	mov	r2, r3
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	b10b      	cbz	r3, 80086ac <_free_r+0x4c>
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d9fa      	bls.n	80086a2 <_free_r+0x42>
 80086ac:	6811      	ldr	r1, [r2, #0]
 80086ae:	1850      	adds	r0, r2, r1
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d10b      	bne.n	80086cc <_free_r+0x6c>
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	4401      	add	r1, r0
 80086b8:	1850      	adds	r0, r2, r1
 80086ba:	4283      	cmp	r3, r0
 80086bc:	6011      	str	r1, [r2, #0]
 80086be:	d1e0      	bne.n	8008682 <_free_r+0x22>
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	6053      	str	r3, [r2, #4]
 80086c6:	4408      	add	r0, r1
 80086c8:	6010      	str	r0, [r2, #0]
 80086ca:	e7da      	b.n	8008682 <_free_r+0x22>
 80086cc:	d902      	bls.n	80086d4 <_free_r+0x74>
 80086ce:	230c      	movs	r3, #12
 80086d0:	602b      	str	r3, [r5, #0]
 80086d2:	e7d6      	b.n	8008682 <_free_r+0x22>
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	1821      	adds	r1, r4, r0
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf04      	itt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	6063      	str	r3, [r4, #4]
 80086e2:	bf04      	itt	eq
 80086e4:	1809      	addeq	r1, r1, r0
 80086e6:	6021      	streq	r1, [r4, #0]
 80086e8:	6054      	str	r4, [r2, #4]
 80086ea:	e7ca      	b.n	8008682 <_free_r+0x22>
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	200004a4 	.word	0x200004a4

080086f4 <malloc>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <malloc+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f000 b825 	b.w	8008748 <_malloc_r>
 80086fe:	bf00      	nop
 8008700:	20000018 	.word	0x20000018

08008704 <sbrk_aligned>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4e0f      	ldr	r6, [pc, #60]	@ (8008744 <sbrk_aligned+0x40>)
 8008708:	460c      	mov	r4, r1
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	4605      	mov	r5, r0
 800870e:	b911      	cbnz	r1, 8008716 <sbrk_aligned+0x12>
 8008710:	f000 fe46 	bl	80093a0 <_sbrk_r>
 8008714:	6030      	str	r0, [r6, #0]
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 fe41 	bl	80093a0 <_sbrk_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d103      	bne.n	800872a <sbrk_aligned+0x26>
 8008722:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008726:	4620      	mov	r0, r4
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	1cc4      	adds	r4, r0, #3
 800872c:	f024 0403 	bic.w	r4, r4, #3
 8008730:	42a0      	cmp	r0, r4
 8008732:	d0f8      	beq.n	8008726 <sbrk_aligned+0x22>
 8008734:	1a21      	subs	r1, r4, r0
 8008736:	4628      	mov	r0, r5
 8008738:	f000 fe32 	bl	80093a0 <_sbrk_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d1f2      	bne.n	8008726 <sbrk_aligned+0x22>
 8008740:	e7ef      	b.n	8008722 <sbrk_aligned+0x1e>
 8008742:	bf00      	nop
 8008744:	200004a0 	.word	0x200004a0

08008748 <_malloc_r>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	1ccd      	adds	r5, r1, #3
 800874e:	f025 0503 	bic.w	r5, r5, #3
 8008752:	3508      	adds	r5, #8
 8008754:	2d0c      	cmp	r5, #12
 8008756:	bf38      	it	cc
 8008758:	250c      	movcc	r5, #12
 800875a:	2d00      	cmp	r5, #0
 800875c:	4606      	mov	r6, r0
 800875e:	db01      	blt.n	8008764 <_malloc_r+0x1c>
 8008760:	42a9      	cmp	r1, r5
 8008762:	d904      	bls.n	800876e <_malloc_r+0x26>
 8008764:	230c      	movs	r3, #12
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008844 <_malloc_r+0xfc>
 8008772:	f000 f869 	bl	8008848 <__malloc_lock>
 8008776:	f8d8 3000 	ldr.w	r3, [r8]
 800877a:	461c      	mov	r4, r3
 800877c:	bb44      	cbnz	r4, 80087d0 <_malloc_r+0x88>
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff ffbf 	bl	8008704 <sbrk_aligned>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	4604      	mov	r4, r0
 800878a:	d158      	bne.n	800883e <_malloc_r+0xf6>
 800878c:	f8d8 4000 	ldr.w	r4, [r8]
 8008790:	4627      	mov	r7, r4
 8008792:	2f00      	cmp	r7, #0
 8008794:	d143      	bne.n	800881e <_malloc_r+0xd6>
 8008796:	2c00      	cmp	r4, #0
 8008798:	d04b      	beq.n	8008832 <_malloc_r+0xea>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	4639      	mov	r1, r7
 800879e:	4630      	mov	r0, r6
 80087a0:	eb04 0903 	add.w	r9, r4, r3
 80087a4:	f000 fdfc 	bl	80093a0 <_sbrk_r>
 80087a8:	4581      	cmp	r9, r0
 80087aa:	d142      	bne.n	8008832 <_malloc_r+0xea>
 80087ac:	6821      	ldr	r1, [r4, #0]
 80087ae:	1a6d      	subs	r5, r5, r1
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffa6 	bl	8008704 <sbrk_aligned>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d03a      	beq.n	8008832 <_malloc_r+0xea>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	442b      	add	r3, r5
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	f8d8 3000 	ldr.w	r3, [r8]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	bb62      	cbnz	r2, 8008824 <_malloc_r+0xdc>
 80087ca:	f8c8 7000 	str.w	r7, [r8]
 80087ce:	e00f      	b.n	80087f0 <_malloc_r+0xa8>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	1b52      	subs	r2, r2, r5
 80087d4:	d420      	bmi.n	8008818 <_malloc_r+0xd0>
 80087d6:	2a0b      	cmp	r2, #11
 80087d8:	d917      	bls.n	800880a <_malloc_r+0xc2>
 80087da:	1961      	adds	r1, r4, r5
 80087dc:	42a3      	cmp	r3, r4
 80087de:	6025      	str	r5, [r4, #0]
 80087e0:	bf18      	it	ne
 80087e2:	6059      	strne	r1, [r3, #4]
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	bf08      	it	eq
 80087e8:	f8c8 1000 	streq.w	r1, [r8]
 80087ec:	5162      	str	r2, [r4, r5]
 80087ee:	604b      	str	r3, [r1, #4]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f82f 	bl	8008854 <__malloc_unlock>
 80087f6:	f104 000b 	add.w	r0, r4, #11
 80087fa:	1d23      	adds	r3, r4, #4
 80087fc:	f020 0007 	bic.w	r0, r0, #7
 8008800:	1ac2      	subs	r2, r0, r3
 8008802:	bf1c      	itt	ne
 8008804:	1a1b      	subne	r3, r3, r0
 8008806:	50a3      	strne	r3, [r4, r2]
 8008808:	e7af      	b.n	800876a <_malloc_r+0x22>
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	42a3      	cmp	r3, r4
 800880e:	bf0c      	ite	eq
 8008810:	f8c8 2000 	streq.w	r2, [r8]
 8008814:	605a      	strne	r2, [r3, #4]
 8008816:	e7eb      	b.n	80087f0 <_malloc_r+0xa8>
 8008818:	4623      	mov	r3, r4
 800881a:	6864      	ldr	r4, [r4, #4]
 800881c:	e7ae      	b.n	800877c <_malloc_r+0x34>
 800881e:	463c      	mov	r4, r7
 8008820:	687f      	ldr	r7, [r7, #4]
 8008822:	e7b6      	b.n	8008792 <_malloc_r+0x4a>
 8008824:	461a      	mov	r2, r3
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	42a3      	cmp	r3, r4
 800882a:	d1fb      	bne.n	8008824 <_malloc_r+0xdc>
 800882c:	2300      	movs	r3, #0
 800882e:	6053      	str	r3, [r2, #4]
 8008830:	e7de      	b.n	80087f0 <_malloc_r+0xa8>
 8008832:	230c      	movs	r3, #12
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	4630      	mov	r0, r6
 8008838:	f000 f80c 	bl	8008854 <__malloc_unlock>
 800883c:	e794      	b.n	8008768 <_malloc_r+0x20>
 800883e:	6005      	str	r5, [r0, #0]
 8008840:	e7d6      	b.n	80087f0 <_malloc_r+0xa8>
 8008842:	bf00      	nop
 8008844:	200004a4 	.word	0x200004a4

08008848 <__malloc_lock>:
 8008848:	4801      	ldr	r0, [pc, #4]	@ (8008850 <__malloc_lock+0x8>)
 800884a:	f7ff b8ba 	b.w	80079c2 <__retarget_lock_acquire_recursive>
 800884e:	bf00      	nop
 8008850:	2000049c 	.word	0x2000049c

08008854 <__malloc_unlock>:
 8008854:	4801      	ldr	r0, [pc, #4]	@ (800885c <__malloc_unlock+0x8>)
 8008856:	f7ff b8b5 	b.w	80079c4 <__retarget_lock_release_recursive>
 800885a:	bf00      	nop
 800885c:	2000049c 	.word	0x2000049c

08008860 <_Balloc>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	69c6      	ldr	r6, [r0, #28]
 8008864:	4604      	mov	r4, r0
 8008866:	460d      	mov	r5, r1
 8008868:	b976      	cbnz	r6, 8008888 <_Balloc+0x28>
 800886a:	2010      	movs	r0, #16
 800886c:	f7ff ff42 	bl	80086f4 <malloc>
 8008870:	4602      	mov	r2, r0
 8008872:	61e0      	str	r0, [r4, #28]
 8008874:	b920      	cbnz	r0, 8008880 <_Balloc+0x20>
 8008876:	4b18      	ldr	r3, [pc, #96]	@ (80088d8 <_Balloc+0x78>)
 8008878:	4818      	ldr	r0, [pc, #96]	@ (80088dc <_Balloc+0x7c>)
 800887a:	216b      	movs	r1, #107	@ 0x6b
 800887c:	f000 fdae 	bl	80093dc <__assert_func>
 8008880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008884:	6006      	str	r6, [r0, #0]
 8008886:	60c6      	str	r6, [r0, #12]
 8008888:	69e6      	ldr	r6, [r4, #28]
 800888a:	68f3      	ldr	r3, [r6, #12]
 800888c:	b183      	cbz	r3, 80088b0 <_Balloc+0x50>
 800888e:	69e3      	ldr	r3, [r4, #28]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008896:	b9b8      	cbnz	r0, 80088c8 <_Balloc+0x68>
 8008898:	2101      	movs	r1, #1
 800889a:	fa01 f605 	lsl.w	r6, r1, r5
 800889e:	1d72      	adds	r2, r6, #5
 80088a0:	0092      	lsls	r2, r2, #2
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 fdb8 	bl	8009418 <_calloc_r>
 80088a8:	b160      	cbz	r0, 80088c4 <_Balloc+0x64>
 80088aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ae:	e00e      	b.n	80088ce <_Balloc+0x6e>
 80088b0:	2221      	movs	r2, #33	@ 0x21
 80088b2:	2104      	movs	r1, #4
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fdaf 	bl	8009418 <_calloc_r>
 80088ba:	69e3      	ldr	r3, [r4, #28]
 80088bc:	60f0      	str	r0, [r6, #12]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e4      	bne.n	800888e <_Balloc+0x2e>
 80088c4:	2000      	movs	r0, #0
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	6802      	ldr	r2, [r0, #0]
 80088ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ce:	2300      	movs	r3, #0
 80088d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088d4:	e7f7      	b.n	80088c6 <_Balloc+0x66>
 80088d6:	bf00      	nop
 80088d8:	08009ae1 	.word	0x08009ae1
 80088dc:	08009b61 	.word	0x08009b61

080088e0 <_Bfree>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	69c6      	ldr	r6, [r0, #28]
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	b976      	cbnz	r6, 8008908 <_Bfree+0x28>
 80088ea:	2010      	movs	r0, #16
 80088ec:	f7ff ff02 	bl	80086f4 <malloc>
 80088f0:	4602      	mov	r2, r0
 80088f2:	61e8      	str	r0, [r5, #28]
 80088f4:	b920      	cbnz	r0, 8008900 <_Bfree+0x20>
 80088f6:	4b09      	ldr	r3, [pc, #36]	@ (800891c <_Bfree+0x3c>)
 80088f8:	4809      	ldr	r0, [pc, #36]	@ (8008920 <_Bfree+0x40>)
 80088fa:	218f      	movs	r1, #143	@ 0x8f
 80088fc:	f000 fd6e 	bl	80093dc <__assert_func>
 8008900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008904:	6006      	str	r6, [r0, #0]
 8008906:	60c6      	str	r6, [r0, #12]
 8008908:	b13c      	cbz	r4, 800891a <_Bfree+0x3a>
 800890a:	69eb      	ldr	r3, [r5, #28]
 800890c:	6862      	ldr	r2, [r4, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008914:	6021      	str	r1, [r4, #0]
 8008916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	08009ae1 	.word	0x08009ae1
 8008920:	08009b61 	.word	0x08009b61

08008924 <__multadd>:
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	690d      	ldr	r5, [r1, #16]
 800892a:	4607      	mov	r7, r0
 800892c:	460c      	mov	r4, r1
 800892e:	461e      	mov	r6, r3
 8008930:	f101 0c14 	add.w	ip, r1, #20
 8008934:	2000      	movs	r0, #0
 8008936:	f8dc 3000 	ldr.w	r3, [ip]
 800893a:	b299      	uxth	r1, r3
 800893c:	fb02 6101 	mla	r1, r2, r1, r6
 8008940:	0c1e      	lsrs	r6, r3, #16
 8008942:	0c0b      	lsrs	r3, r1, #16
 8008944:	fb02 3306 	mla	r3, r2, r6, r3
 8008948:	b289      	uxth	r1, r1
 800894a:	3001      	adds	r0, #1
 800894c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008950:	4285      	cmp	r5, r0
 8008952:	f84c 1b04 	str.w	r1, [ip], #4
 8008956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800895a:	dcec      	bgt.n	8008936 <__multadd+0x12>
 800895c:	b30e      	cbz	r6, 80089a2 <__multadd+0x7e>
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	42ab      	cmp	r3, r5
 8008962:	dc19      	bgt.n	8008998 <__multadd+0x74>
 8008964:	6861      	ldr	r1, [r4, #4]
 8008966:	4638      	mov	r0, r7
 8008968:	3101      	adds	r1, #1
 800896a:	f7ff ff79 	bl	8008860 <_Balloc>
 800896e:	4680      	mov	r8, r0
 8008970:	b928      	cbnz	r0, 800897e <__multadd+0x5a>
 8008972:	4602      	mov	r2, r0
 8008974:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <__multadd+0x84>)
 8008976:	480d      	ldr	r0, [pc, #52]	@ (80089ac <__multadd+0x88>)
 8008978:	21ba      	movs	r1, #186	@ 0xba
 800897a:	f000 fd2f 	bl	80093dc <__assert_func>
 800897e:	6922      	ldr	r2, [r4, #16]
 8008980:	3202      	adds	r2, #2
 8008982:	f104 010c 	add.w	r1, r4, #12
 8008986:	0092      	lsls	r2, r2, #2
 8008988:	300c      	adds	r0, #12
 800898a:	f000 fd19 	bl	80093c0 <memcpy>
 800898e:	4621      	mov	r1, r4
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ffa5 	bl	80088e0 <_Bfree>
 8008996:	4644      	mov	r4, r8
 8008998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800899c:	3501      	adds	r5, #1
 800899e:	615e      	str	r6, [r3, #20]
 80089a0:	6125      	str	r5, [r4, #16]
 80089a2:	4620      	mov	r0, r4
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	08009b50 	.word	0x08009b50
 80089ac:	08009b61 	.word	0x08009b61

080089b0 <__hi0bits>:
 80089b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089b4:	4603      	mov	r3, r0
 80089b6:	bf36      	itet	cc
 80089b8:	0403      	lslcc	r3, r0, #16
 80089ba:	2000      	movcs	r0, #0
 80089bc:	2010      	movcc	r0, #16
 80089be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089c2:	bf3c      	itt	cc
 80089c4:	021b      	lslcc	r3, r3, #8
 80089c6:	3008      	addcc	r0, #8
 80089c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089cc:	bf3c      	itt	cc
 80089ce:	011b      	lslcc	r3, r3, #4
 80089d0:	3004      	addcc	r0, #4
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d6:	bf3c      	itt	cc
 80089d8:	009b      	lslcc	r3, r3, #2
 80089da:	3002      	addcc	r0, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	db05      	blt.n	80089ec <__hi0bits+0x3c>
 80089e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089e4:	f100 0001 	add.w	r0, r0, #1
 80089e8:	bf08      	it	eq
 80089ea:	2020      	moveq	r0, #32
 80089ec:	4770      	bx	lr

080089ee <__lo0bits>:
 80089ee:	6803      	ldr	r3, [r0, #0]
 80089f0:	4602      	mov	r2, r0
 80089f2:	f013 0007 	ands.w	r0, r3, #7
 80089f6:	d00b      	beq.n	8008a10 <__lo0bits+0x22>
 80089f8:	07d9      	lsls	r1, r3, #31
 80089fa:	d421      	bmi.n	8008a40 <__lo0bits+0x52>
 80089fc:	0798      	lsls	r0, r3, #30
 80089fe:	bf49      	itett	mi
 8008a00:	085b      	lsrmi	r3, r3, #1
 8008a02:	089b      	lsrpl	r3, r3, #2
 8008a04:	2001      	movmi	r0, #1
 8008a06:	6013      	strmi	r3, [r2, #0]
 8008a08:	bf5c      	itt	pl
 8008a0a:	6013      	strpl	r3, [r2, #0]
 8008a0c:	2002      	movpl	r0, #2
 8008a0e:	4770      	bx	lr
 8008a10:	b299      	uxth	r1, r3
 8008a12:	b909      	cbnz	r1, 8008a18 <__lo0bits+0x2a>
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	2010      	movs	r0, #16
 8008a18:	b2d9      	uxtb	r1, r3
 8008a1a:	b909      	cbnz	r1, 8008a20 <__lo0bits+0x32>
 8008a1c:	3008      	adds	r0, #8
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	0719      	lsls	r1, r3, #28
 8008a22:	bf04      	itt	eq
 8008a24:	091b      	lsreq	r3, r3, #4
 8008a26:	3004      	addeq	r0, #4
 8008a28:	0799      	lsls	r1, r3, #30
 8008a2a:	bf04      	itt	eq
 8008a2c:	089b      	lsreq	r3, r3, #2
 8008a2e:	3002      	addeq	r0, #2
 8008a30:	07d9      	lsls	r1, r3, #31
 8008a32:	d403      	bmi.n	8008a3c <__lo0bits+0x4e>
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	f100 0001 	add.w	r0, r0, #1
 8008a3a:	d003      	beq.n	8008a44 <__lo0bits+0x56>
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	4770      	bx	lr
 8008a40:	2000      	movs	r0, #0
 8008a42:	4770      	bx	lr
 8008a44:	2020      	movs	r0, #32
 8008a46:	4770      	bx	lr

08008a48 <__i2b>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	f7ff ff07 	bl	8008860 <_Balloc>
 8008a52:	4602      	mov	r2, r0
 8008a54:	b928      	cbnz	r0, 8008a62 <__i2b+0x1a>
 8008a56:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <__i2b+0x24>)
 8008a58:	4805      	ldr	r0, [pc, #20]	@ (8008a70 <__i2b+0x28>)
 8008a5a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a5e:	f000 fcbd 	bl	80093dc <__assert_func>
 8008a62:	2301      	movs	r3, #1
 8008a64:	6144      	str	r4, [r0, #20]
 8008a66:	6103      	str	r3, [r0, #16]
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08009b50 	.word	0x08009b50
 8008a70:	08009b61 	.word	0x08009b61

08008a74 <__multiply>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	4614      	mov	r4, r2
 8008a7a:	690a      	ldr	r2, [r1, #16]
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	bfa8      	it	ge
 8008a82:	4623      	movge	r3, r4
 8008a84:	460f      	mov	r7, r1
 8008a86:	bfa4      	itt	ge
 8008a88:	460c      	movge	r4, r1
 8008a8a:	461f      	movge	r7, r3
 8008a8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a94:	68a3      	ldr	r3, [r4, #8]
 8008a96:	6861      	ldr	r1, [r4, #4]
 8008a98:	eb0a 0609 	add.w	r6, sl, r9
 8008a9c:	42b3      	cmp	r3, r6
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	bfb8      	it	lt
 8008aa2:	3101      	addlt	r1, #1
 8008aa4:	f7ff fedc 	bl	8008860 <_Balloc>
 8008aa8:	b930      	cbnz	r0, 8008ab8 <__multiply+0x44>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	4b44      	ldr	r3, [pc, #272]	@ (8008bc0 <__multiply+0x14c>)
 8008aae:	4845      	ldr	r0, [pc, #276]	@ (8008bc4 <__multiply+0x150>)
 8008ab0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ab4:	f000 fc92 	bl	80093dc <__assert_func>
 8008ab8:	f100 0514 	add.w	r5, r0, #20
 8008abc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4543      	cmp	r3, r8
 8008ac6:	d321      	bcc.n	8008b0c <__multiply+0x98>
 8008ac8:	f107 0114 	add.w	r1, r7, #20
 8008acc:	f104 0214 	add.w	r2, r4, #20
 8008ad0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ad4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	1b13      	subs	r3, r2, r4
 8008adc:	3b15      	subs	r3, #21
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	f104 0715 	add.w	r7, r4, #21
 8008ae8:	42ba      	cmp	r2, r7
 8008aea:	bf38      	it	cc
 8008aec:	2304      	movcc	r3, #4
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	9103      	str	r1, [sp, #12]
 8008af4:	428b      	cmp	r3, r1
 8008af6:	d80c      	bhi.n	8008b12 <__multiply+0x9e>
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	dd03      	ble.n	8008b04 <__multiply+0x90>
 8008afc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d05b      	beq.n	8008bbc <__multiply+0x148>
 8008b04:	6106      	str	r6, [r0, #16]
 8008b06:	b005      	add	sp, #20
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	f843 2b04 	str.w	r2, [r3], #4
 8008b10:	e7d8      	b.n	8008ac4 <__multiply+0x50>
 8008b12:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b16:	f1ba 0f00 	cmp.w	sl, #0
 8008b1a:	d024      	beq.n	8008b66 <__multiply+0xf2>
 8008b1c:	f104 0e14 	add.w	lr, r4, #20
 8008b20:	46a9      	mov	r9, r5
 8008b22:	f04f 0c00 	mov.w	ip, #0
 8008b26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b2a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b2e:	fa1f fb87 	uxth.w	fp, r7
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b3c:	f8d9 7000 	ldr.w	r7, [r9]
 8008b40:	4463      	add	r3, ip
 8008b42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b46:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b54:	4572      	cmp	r2, lr
 8008b56:	f849 3b04 	str.w	r3, [r9], #4
 8008b5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b5e:	d8e2      	bhi.n	8008b26 <__multiply+0xb2>
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	f845 c003 	str.w	ip, [r5, r3]
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b6c:	3104      	adds	r1, #4
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	d021      	beq.n	8008bb8 <__multiply+0x144>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	f104 0c14 	add.w	ip, r4, #20
 8008b7a:	46ae      	mov	lr, r5
 8008b7c:	f04f 0a00 	mov.w	sl, #0
 8008b80:	f8bc b000 	ldrh.w	fp, [ip]
 8008b84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b88:	fb09 770b 	mla	r7, r9, fp, r7
 8008b8c:	4457      	add	r7, sl
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b94:	f84e 3b04 	str.w	r3, [lr], #4
 8008b98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba0:	f8be 3000 	ldrh.w	r3, [lr]
 8008ba4:	fb09 330a 	mla	r3, r9, sl, r3
 8008ba8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bac:	4562      	cmp	r2, ip
 8008bae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bb2:	d8e5      	bhi.n	8008b80 <__multiply+0x10c>
 8008bb4:	9f01      	ldr	r7, [sp, #4]
 8008bb6:	51eb      	str	r3, [r5, r7]
 8008bb8:	3504      	adds	r5, #4
 8008bba:	e799      	b.n	8008af0 <__multiply+0x7c>
 8008bbc:	3e01      	subs	r6, #1
 8008bbe:	e79b      	b.n	8008af8 <__multiply+0x84>
 8008bc0:	08009b50 	.word	0x08009b50
 8008bc4:	08009b61 	.word	0x08009b61

08008bc8 <__pow5mult>:
 8008bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	4615      	mov	r5, r2
 8008bce:	f012 0203 	ands.w	r2, r2, #3
 8008bd2:	4607      	mov	r7, r0
 8008bd4:	460e      	mov	r6, r1
 8008bd6:	d007      	beq.n	8008be8 <__pow5mult+0x20>
 8008bd8:	4c25      	ldr	r4, [pc, #148]	@ (8008c70 <__pow5mult+0xa8>)
 8008bda:	3a01      	subs	r2, #1
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008be2:	f7ff fe9f 	bl	8008924 <__multadd>
 8008be6:	4606      	mov	r6, r0
 8008be8:	10ad      	asrs	r5, r5, #2
 8008bea:	d03d      	beq.n	8008c68 <__pow5mult+0xa0>
 8008bec:	69fc      	ldr	r4, [r7, #28]
 8008bee:	b97c      	cbnz	r4, 8008c10 <__pow5mult+0x48>
 8008bf0:	2010      	movs	r0, #16
 8008bf2:	f7ff fd7f 	bl	80086f4 <malloc>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	61f8      	str	r0, [r7, #28]
 8008bfa:	b928      	cbnz	r0, 8008c08 <__pow5mult+0x40>
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c74 <__pow5mult+0xac>)
 8008bfe:	481e      	ldr	r0, [pc, #120]	@ (8008c78 <__pow5mult+0xb0>)
 8008c00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c04:	f000 fbea 	bl	80093dc <__assert_func>
 8008c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c0c:	6004      	str	r4, [r0, #0]
 8008c0e:	60c4      	str	r4, [r0, #12]
 8008c10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c18:	b94c      	cbnz	r4, 8008c2e <__pow5mult+0x66>
 8008c1a:	f240 2171 	movw	r1, #625	@ 0x271
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7ff ff12 	bl	8008a48 <__i2b>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	f04f 0900 	mov.w	r9, #0
 8008c32:	07eb      	lsls	r3, r5, #31
 8008c34:	d50a      	bpl.n	8008c4c <__pow5mult+0x84>
 8008c36:	4631      	mov	r1, r6
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f7ff ff1a 	bl	8008a74 <__multiply>
 8008c40:	4631      	mov	r1, r6
 8008c42:	4680      	mov	r8, r0
 8008c44:	4638      	mov	r0, r7
 8008c46:	f7ff fe4b 	bl	80088e0 <_Bfree>
 8008c4a:	4646      	mov	r6, r8
 8008c4c:	106d      	asrs	r5, r5, #1
 8008c4e:	d00b      	beq.n	8008c68 <__pow5mult+0xa0>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	b938      	cbnz	r0, 8008c64 <__pow5mult+0x9c>
 8008c54:	4622      	mov	r2, r4
 8008c56:	4621      	mov	r1, r4
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ff0b 	bl	8008a74 <__multiply>
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	f8c0 9000 	str.w	r9, [r0]
 8008c64:	4604      	mov	r4, r0
 8008c66:	e7e4      	b.n	8008c32 <__pow5mult+0x6a>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	bf00      	nop
 8008c70:	08009bbc 	.word	0x08009bbc
 8008c74:	08009ae1 	.word	0x08009ae1
 8008c78:	08009b61 	.word	0x08009b61

08008c7c <__lshift>:
 8008c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	6849      	ldr	r1, [r1, #4]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	4691      	mov	r9, r2
 8008c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c94:	f108 0601 	add.w	r6, r8, #1
 8008c98:	42b3      	cmp	r3, r6
 8008c9a:	db0b      	blt.n	8008cb4 <__lshift+0x38>
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f7ff fddf 	bl	8008860 <_Balloc>
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	b948      	cbnz	r0, 8008cba <__lshift+0x3e>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4b28      	ldr	r3, [pc, #160]	@ (8008d4c <__lshift+0xd0>)
 8008caa:	4829      	ldr	r0, [pc, #164]	@ (8008d50 <__lshift+0xd4>)
 8008cac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cb0:	f000 fb94 	bl	80093dc <__assert_func>
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	e7ee      	b.n	8008c98 <__lshift+0x1c>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f100 0114 	add.w	r1, r0, #20
 8008cc0:	f100 0210 	add.w	r2, r0, #16
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	4553      	cmp	r3, sl
 8008cc8:	db33      	blt.n	8008d32 <__lshift+0xb6>
 8008cca:	6920      	ldr	r0, [r4, #16]
 8008ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd0:	f104 0314 	add.w	r3, r4, #20
 8008cd4:	f019 091f 	ands.w	r9, r9, #31
 8008cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ce0:	d02b      	beq.n	8008d3a <__lshift+0xbe>
 8008ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ce6:	468a      	mov	sl, r1
 8008ce8:	2200      	movs	r2, #0
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	fa00 f009 	lsl.w	r0, r0, r9
 8008cf0:	4310      	orrs	r0, r2
 8008cf2:	f84a 0b04 	str.w	r0, [sl], #4
 8008cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfa:	459c      	cmp	ip, r3
 8008cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d00:	d8f3      	bhi.n	8008cea <__lshift+0x6e>
 8008d02:	ebac 0304 	sub.w	r3, ip, r4
 8008d06:	3b15      	subs	r3, #21
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	f104 0015 	add.w	r0, r4, #21
 8008d12:	4584      	cmp	ip, r0
 8008d14:	bf38      	it	cc
 8008d16:	2304      	movcc	r3, #4
 8008d18:	50ca      	str	r2, [r1, r3]
 8008d1a:	b10a      	cbz	r2, 8008d20 <__lshift+0xa4>
 8008d1c:	f108 0602 	add.w	r6, r8, #2
 8008d20:	3e01      	subs	r6, #1
 8008d22:	4638      	mov	r0, r7
 8008d24:	612e      	str	r6, [r5, #16]
 8008d26:	4621      	mov	r1, r4
 8008d28:	f7ff fdda 	bl	80088e0 <_Bfree>
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d36:	3301      	adds	r3, #1
 8008d38:	e7c5      	b.n	8008cc6 <__lshift+0x4a>
 8008d3a:	3904      	subs	r1, #4
 8008d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d44:	459c      	cmp	ip, r3
 8008d46:	d8f9      	bhi.n	8008d3c <__lshift+0xc0>
 8008d48:	e7ea      	b.n	8008d20 <__lshift+0xa4>
 8008d4a:	bf00      	nop
 8008d4c:	08009b50 	.word	0x08009b50
 8008d50:	08009b61 	.word	0x08009b61

08008d54 <__mcmp>:
 8008d54:	690a      	ldr	r2, [r1, #16]
 8008d56:	4603      	mov	r3, r0
 8008d58:	6900      	ldr	r0, [r0, #16]
 8008d5a:	1a80      	subs	r0, r0, r2
 8008d5c:	b530      	push	{r4, r5, lr}
 8008d5e:	d10e      	bne.n	8008d7e <__mcmp+0x2a>
 8008d60:	3314      	adds	r3, #20
 8008d62:	3114      	adds	r1, #20
 8008d64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d74:	4295      	cmp	r5, r2
 8008d76:	d003      	beq.n	8008d80 <__mcmp+0x2c>
 8008d78:	d205      	bcs.n	8008d86 <__mcmp+0x32>
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d7e:	bd30      	pop	{r4, r5, pc}
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d3f3      	bcc.n	8008d6c <__mcmp+0x18>
 8008d84:	e7fb      	b.n	8008d7e <__mcmp+0x2a>
 8008d86:	2001      	movs	r0, #1
 8008d88:	e7f9      	b.n	8008d7e <__mcmp+0x2a>
	...

08008d8c <__mdiff>:
 8008d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	4689      	mov	r9, r1
 8008d92:	4606      	mov	r6, r0
 8008d94:	4611      	mov	r1, r2
 8008d96:	4648      	mov	r0, r9
 8008d98:	4614      	mov	r4, r2
 8008d9a:	f7ff ffdb 	bl	8008d54 <__mcmp>
 8008d9e:	1e05      	subs	r5, r0, #0
 8008da0:	d112      	bne.n	8008dc8 <__mdiff+0x3c>
 8008da2:	4629      	mov	r1, r5
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff fd5b 	bl	8008860 <_Balloc>
 8008daa:	4602      	mov	r2, r0
 8008dac:	b928      	cbnz	r0, 8008dba <__mdiff+0x2e>
 8008dae:	4b3f      	ldr	r3, [pc, #252]	@ (8008eac <__mdiff+0x120>)
 8008db0:	f240 2137 	movw	r1, #567	@ 0x237
 8008db4:	483e      	ldr	r0, [pc, #248]	@ (8008eb0 <__mdiff+0x124>)
 8008db6:	f000 fb11 	bl	80093dc <__assert_func>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	b003      	add	sp, #12
 8008dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc8:	bfbc      	itt	lt
 8008dca:	464b      	movlt	r3, r9
 8008dcc:	46a1      	movlt	r9, r4
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dd4:	bfba      	itte	lt
 8008dd6:	461c      	movlt	r4, r3
 8008dd8:	2501      	movlt	r5, #1
 8008dda:	2500      	movge	r5, #0
 8008ddc:	f7ff fd40 	bl	8008860 <_Balloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	b918      	cbnz	r0, 8008dec <__mdiff+0x60>
 8008de4:	4b31      	ldr	r3, [pc, #196]	@ (8008eac <__mdiff+0x120>)
 8008de6:	f240 2145 	movw	r1, #581	@ 0x245
 8008dea:	e7e3      	b.n	8008db4 <__mdiff+0x28>
 8008dec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008df0:	6926      	ldr	r6, [r4, #16]
 8008df2:	60c5      	str	r5, [r0, #12]
 8008df4:	f109 0310 	add.w	r3, r9, #16
 8008df8:	f109 0514 	add.w	r5, r9, #20
 8008dfc:	f104 0e14 	add.w	lr, r4, #20
 8008e00:	f100 0b14 	add.w	fp, r0, #20
 8008e04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	46d9      	mov	r9, fp
 8008e10:	f04f 0c00 	mov.w	ip, #0
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	fa1f f38a 	uxth.w	r3, sl
 8008e24:	4619      	mov	r1, r3
 8008e26:	b283      	uxth	r3, r0
 8008e28:	1acb      	subs	r3, r1, r3
 8008e2a:	0c00      	lsrs	r0, r0, #16
 8008e2c:	4463      	add	r3, ip
 8008e2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e3c:	4576      	cmp	r6, lr
 8008e3e:	f849 3b04 	str.w	r3, [r9], #4
 8008e42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e46:	d8e5      	bhi.n	8008e14 <__mdiff+0x88>
 8008e48:	1b33      	subs	r3, r6, r4
 8008e4a:	3b15      	subs	r3, #21
 8008e4c:	f023 0303 	bic.w	r3, r3, #3
 8008e50:	3415      	adds	r4, #21
 8008e52:	3304      	adds	r3, #4
 8008e54:	42a6      	cmp	r6, r4
 8008e56:	bf38      	it	cc
 8008e58:	2304      	movcc	r3, #4
 8008e5a:	441d      	add	r5, r3
 8008e5c:	445b      	add	r3, fp
 8008e5e:	461e      	mov	r6, r3
 8008e60:	462c      	mov	r4, r5
 8008e62:	4544      	cmp	r4, r8
 8008e64:	d30e      	bcc.n	8008e84 <__mdiff+0xf8>
 8008e66:	f108 0103 	add.w	r1, r8, #3
 8008e6a:	1b49      	subs	r1, r1, r5
 8008e6c:	f021 0103 	bic.w	r1, r1, #3
 8008e70:	3d03      	subs	r5, #3
 8008e72:	45a8      	cmp	r8, r5
 8008e74:	bf38      	it	cc
 8008e76:	2100      	movcc	r1, #0
 8008e78:	440b      	add	r3, r1
 8008e7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e7e:	b191      	cbz	r1, 8008ea6 <__mdiff+0x11a>
 8008e80:	6117      	str	r7, [r2, #16]
 8008e82:	e79d      	b.n	8008dc0 <__mdiff+0x34>
 8008e84:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e88:	46e6      	mov	lr, ip
 8008e8a:	0c08      	lsrs	r0, r1, #16
 8008e8c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e90:	4471      	add	r1, lr
 8008e92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e96:	b289      	uxth	r1, r1
 8008e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e9c:	f846 1b04 	str.w	r1, [r6], #4
 8008ea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ea4:	e7dd      	b.n	8008e62 <__mdiff+0xd6>
 8008ea6:	3f01      	subs	r7, #1
 8008ea8:	e7e7      	b.n	8008e7a <__mdiff+0xee>
 8008eaa:	bf00      	nop
 8008eac:	08009b50 	.word	0x08009b50
 8008eb0:	08009b61 	.word	0x08009b61

08008eb4 <__d2b>:
 8008eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	460f      	mov	r7, r1
 8008eba:	2101      	movs	r1, #1
 8008ebc:	ec59 8b10 	vmov	r8, r9, d0
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	f7ff fccd 	bl	8008860 <_Balloc>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	b930      	cbnz	r0, 8008ed8 <__d2b+0x24>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4b23      	ldr	r3, [pc, #140]	@ (8008f5c <__d2b+0xa8>)
 8008ece:	4824      	ldr	r0, [pc, #144]	@ (8008f60 <__d2b+0xac>)
 8008ed0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ed4:	f000 fa82 	bl	80093dc <__assert_func>
 8008ed8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008edc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ee0:	b10d      	cbz	r5, 8008ee6 <__d2b+0x32>
 8008ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	f1b8 0300 	subs.w	r3, r8, #0
 8008eec:	d023      	beq.n	8008f36 <__d2b+0x82>
 8008eee:	4668      	mov	r0, sp
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	f7ff fd7c 	bl	80089ee <__lo0bits>
 8008ef6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008efa:	b1d0      	cbz	r0, 8008f32 <__d2b+0x7e>
 8008efc:	f1c0 0320 	rsb	r3, r0, #32
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	430b      	orrs	r3, r1
 8008f06:	40c2      	lsrs	r2, r0
 8008f08:	6163      	str	r3, [r4, #20]
 8008f0a:	9201      	str	r2, [sp, #4]
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	61a3      	str	r3, [r4, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf0c      	ite	eq
 8008f14:	2201      	moveq	r2, #1
 8008f16:	2202      	movne	r2, #2
 8008f18:	6122      	str	r2, [r4, #16]
 8008f1a:	b1a5      	cbz	r5, 8008f46 <__d2b+0x92>
 8008f1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f20:	4405      	add	r5, r0
 8008f22:	603d      	str	r5, [r7, #0]
 8008f24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f28:	6030      	str	r0, [r6, #0]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f32:	6161      	str	r1, [r4, #20]
 8008f34:	e7ea      	b.n	8008f0c <__d2b+0x58>
 8008f36:	a801      	add	r0, sp, #4
 8008f38:	f7ff fd59 	bl	80089ee <__lo0bits>
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	6163      	str	r3, [r4, #20]
 8008f40:	3020      	adds	r0, #32
 8008f42:	2201      	movs	r2, #1
 8008f44:	e7e8      	b.n	8008f18 <__d2b+0x64>
 8008f46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f4e:	6038      	str	r0, [r7, #0]
 8008f50:	6918      	ldr	r0, [r3, #16]
 8008f52:	f7ff fd2d 	bl	80089b0 <__hi0bits>
 8008f56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f5a:	e7e5      	b.n	8008f28 <__d2b+0x74>
 8008f5c:	08009b50 	.word	0x08009b50
 8008f60:	08009b61 	.word	0x08009b61

08008f64 <__ssputs_r>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	688e      	ldr	r6, [r1, #8]
 8008f6a:	461f      	mov	r7, r3
 8008f6c:	42be      	cmp	r6, r7
 8008f6e:	680b      	ldr	r3, [r1, #0]
 8008f70:	4682      	mov	sl, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4690      	mov	r8, r2
 8008f76:	d82d      	bhi.n	8008fd4 <__ssputs_r+0x70>
 8008f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f80:	d026      	beq.n	8008fd0 <__ssputs_r+0x6c>
 8008f82:	6965      	ldr	r5, [r4, #20]
 8008f84:	6909      	ldr	r1, [r1, #16]
 8008f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f8a:	eba3 0901 	sub.w	r9, r3, r1
 8008f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f92:	1c7b      	adds	r3, r7, #1
 8008f94:	444b      	add	r3, r9
 8008f96:	106d      	asrs	r5, r5, #1
 8008f98:	429d      	cmp	r5, r3
 8008f9a:	bf38      	it	cc
 8008f9c:	461d      	movcc	r5, r3
 8008f9e:	0553      	lsls	r3, r2, #21
 8008fa0:	d527      	bpl.n	8008ff2 <__ssputs_r+0x8e>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7ff fbd0 	bl	8008748 <_malloc_r>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	b360      	cbz	r0, 8009006 <__ssputs_r+0xa2>
 8008fac:	6921      	ldr	r1, [r4, #16]
 8008fae:	464a      	mov	r2, r9
 8008fb0:	f000 fa06 	bl	80093c0 <memcpy>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	6126      	str	r6, [r4, #16]
 8008fc2:	6165      	str	r5, [r4, #20]
 8008fc4:	444e      	add	r6, r9
 8008fc6:	eba5 0509 	sub.w	r5, r5, r9
 8008fca:	6026      	str	r6, [r4, #0]
 8008fcc:	60a5      	str	r5, [r4, #8]
 8008fce:	463e      	mov	r6, r7
 8008fd0:	42be      	cmp	r6, r7
 8008fd2:	d900      	bls.n	8008fd6 <__ssputs_r+0x72>
 8008fd4:	463e      	mov	r6, r7
 8008fd6:	6820      	ldr	r0, [r4, #0]
 8008fd8:	4632      	mov	r2, r6
 8008fda:	4641      	mov	r1, r8
 8008fdc:	f000 f9c6 	bl	800936c <memmove>
 8008fe0:	68a3      	ldr	r3, [r4, #8]
 8008fe2:	1b9b      	subs	r3, r3, r6
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	4433      	add	r3, r6
 8008fea:	6023      	str	r3, [r4, #0]
 8008fec:	2000      	movs	r0, #0
 8008fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	f000 fa36 	bl	8009464 <_realloc_r>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d1e0      	bne.n	8008fc0 <__ssputs_r+0x5c>
 8008ffe:	6921      	ldr	r1, [r4, #16]
 8009000:	4650      	mov	r0, sl
 8009002:	f7ff fb2d 	bl	8008660 <_free_r>
 8009006:	230c      	movs	r3, #12
 8009008:	f8ca 3000 	str.w	r3, [sl]
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009018:	e7e9      	b.n	8008fee <__ssputs_r+0x8a>
	...

0800901c <_svfiprintf_r>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	4698      	mov	r8, r3
 8009022:	898b      	ldrh	r3, [r1, #12]
 8009024:	061b      	lsls	r3, r3, #24
 8009026:	b09d      	sub	sp, #116	@ 0x74
 8009028:	4607      	mov	r7, r0
 800902a:	460d      	mov	r5, r1
 800902c:	4614      	mov	r4, r2
 800902e:	d510      	bpl.n	8009052 <_svfiprintf_r+0x36>
 8009030:	690b      	ldr	r3, [r1, #16]
 8009032:	b973      	cbnz	r3, 8009052 <_svfiprintf_r+0x36>
 8009034:	2140      	movs	r1, #64	@ 0x40
 8009036:	f7ff fb87 	bl	8008748 <_malloc_r>
 800903a:	6028      	str	r0, [r5, #0]
 800903c:	6128      	str	r0, [r5, #16]
 800903e:	b930      	cbnz	r0, 800904e <_svfiprintf_r+0x32>
 8009040:	230c      	movs	r3, #12
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009048:	b01d      	add	sp, #116	@ 0x74
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	2340      	movs	r3, #64	@ 0x40
 8009050:	616b      	str	r3, [r5, #20]
 8009052:	2300      	movs	r3, #0
 8009054:	9309      	str	r3, [sp, #36]	@ 0x24
 8009056:	2320      	movs	r3, #32
 8009058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800905c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009060:	2330      	movs	r3, #48	@ 0x30
 8009062:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009200 <_svfiprintf_r+0x1e4>
 8009066:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800906a:	f04f 0901 	mov.w	r9, #1
 800906e:	4623      	mov	r3, r4
 8009070:	469a      	mov	sl, r3
 8009072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009076:	b10a      	cbz	r2, 800907c <_svfiprintf_r+0x60>
 8009078:	2a25      	cmp	r2, #37	@ 0x25
 800907a:	d1f9      	bne.n	8009070 <_svfiprintf_r+0x54>
 800907c:	ebba 0b04 	subs.w	fp, sl, r4
 8009080:	d00b      	beq.n	800909a <_svfiprintf_r+0x7e>
 8009082:	465b      	mov	r3, fp
 8009084:	4622      	mov	r2, r4
 8009086:	4629      	mov	r1, r5
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff ff6b 	bl	8008f64 <__ssputs_r>
 800908e:	3001      	adds	r0, #1
 8009090:	f000 80a7 	beq.w	80091e2 <_svfiprintf_r+0x1c6>
 8009094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009096:	445a      	add	r2, fp
 8009098:	9209      	str	r2, [sp, #36]	@ 0x24
 800909a:	f89a 3000 	ldrb.w	r3, [sl]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 809f 	beq.w	80091e2 <_svfiprintf_r+0x1c6>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ae:	f10a 0a01 	add.w	sl, sl, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	9307      	str	r3, [sp, #28]
 80090b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80090bc:	4654      	mov	r4, sl
 80090be:	2205      	movs	r2, #5
 80090c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c4:	484e      	ldr	r0, [pc, #312]	@ (8009200 <_svfiprintf_r+0x1e4>)
 80090c6:	f7f7 f88b 	bl	80001e0 <memchr>
 80090ca:	9a04      	ldr	r2, [sp, #16]
 80090cc:	b9d8      	cbnz	r0, 8009106 <_svfiprintf_r+0xea>
 80090ce:	06d0      	lsls	r0, r2, #27
 80090d0:	bf44      	itt	mi
 80090d2:	2320      	movmi	r3, #32
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d8:	0711      	lsls	r1, r2, #28
 80090da:	bf44      	itt	mi
 80090dc:	232b      	movmi	r3, #43	@ 0x2b
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e8:	d015      	beq.n	8009116 <_svfiprintf_r+0xfa>
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	4654      	mov	r4, sl
 80090ee:	2000      	movs	r0, #0
 80090f0:	f04f 0c0a 	mov.w	ip, #10
 80090f4:	4621      	mov	r1, r4
 80090f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fa:	3b30      	subs	r3, #48	@ 0x30
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	d94b      	bls.n	8009198 <_svfiprintf_r+0x17c>
 8009100:	b1b0      	cbz	r0, 8009130 <_svfiprintf_r+0x114>
 8009102:	9207      	str	r2, [sp, #28]
 8009104:	e014      	b.n	8009130 <_svfiprintf_r+0x114>
 8009106:	eba0 0308 	sub.w	r3, r0, r8
 800910a:	fa09 f303 	lsl.w	r3, r9, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	46a2      	mov	sl, r4
 8009114:	e7d2      	b.n	80090bc <_svfiprintf_r+0xa0>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	1d19      	adds	r1, r3, #4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	9103      	str	r1, [sp, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfbb      	ittet	lt
 8009122:	425b      	neglt	r3, r3
 8009124:	f042 0202 	orrlt.w	r2, r2, #2
 8009128:	9307      	strge	r3, [sp, #28]
 800912a:	9307      	strlt	r3, [sp, #28]
 800912c:	bfb8      	it	lt
 800912e:	9204      	strlt	r2, [sp, #16]
 8009130:	7823      	ldrb	r3, [r4, #0]
 8009132:	2b2e      	cmp	r3, #46	@ 0x2e
 8009134:	d10a      	bne.n	800914c <_svfiprintf_r+0x130>
 8009136:	7863      	ldrb	r3, [r4, #1]
 8009138:	2b2a      	cmp	r3, #42	@ 0x2a
 800913a:	d132      	bne.n	80091a2 <_svfiprintf_r+0x186>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	9203      	str	r2, [sp, #12]
 8009144:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009148:	3402      	adds	r4, #2
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009210 <_svfiprintf_r+0x1f4>
 8009150:	7821      	ldrb	r1, [r4, #0]
 8009152:	2203      	movs	r2, #3
 8009154:	4650      	mov	r0, sl
 8009156:	f7f7 f843 	bl	80001e0 <memchr>
 800915a:	b138      	cbz	r0, 800916c <_svfiprintf_r+0x150>
 800915c:	9b04      	ldr	r3, [sp, #16]
 800915e:	eba0 000a 	sub.w	r0, r0, sl
 8009162:	2240      	movs	r2, #64	@ 0x40
 8009164:	4082      	lsls	r2, r0
 8009166:	4313      	orrs	r3, r2
 8009168:	3401      	adds	r4, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009170:	4824      	ldr	r0, [pc, #144]	@ (8009204 <_svfiprintf_r+0x1e8>)
 8009172:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009176:	2206      	movs	r2, #6
 8009178:	f7f7 f832 	bl	80001e0 <memchr>
 800917c:	2800      	cmp	r0, #0
 800917e:	d036      	beq.n	80091ee <_svfiprintf_r+0x1d2>
 8009180:	4b21      	ldr	r3, [pc, #132]	@ (8009208 <_svfiprintf_r+0x1ec>)
 8009182:	bb1b      	cbnz	r3, 80091cc <_svfiprintf_r+0x1b0>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	3307      	adds	r3, #7
 8009188:	f023 0307 	bic.w	r3, r3, #7
 800918c:	3308      	adds	r3, #8
 800918e:	9303      	str	r3, [sp, #12]
 8009190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009192:	4433      	add	r3, r6
 8009194:	9309      	str	r3, [sp, #36]	@ 0x24
 8009196:	e76a      	b.n	800906e <_svfiprintf_r+0x52>
 8009198:	fb0c 3202 	mla	r2, ip, r2, r3
 800919c:	460c      	mov	r4, r1
 800919e:	2001      	movs	r0, #1
 80091a0:	e7a8      	b.n	80090f4 <_svfiprintf_r+0xd8>
 80091a2:	2300      	movs	r3, #0
 80091a4:	3401      	adds	r4, #1
 80091a6:	9305      	str	r3, [sp, #20]
 80091a8:	4619      	mov	r1, r3
 80091aa:	f04f 0c0a 	mov.w	ip, #10
 80091ae:	4620      	mov	r0, r4
 80091b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b4:	3a30      	subs	r2, #48	@ 0x30
 80091b6:	2a09      	cmp	r2, #9
 80091b8:	d903      	bls.n	80091c2 <_svfiprintf_r+0x1a6>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0c6      	beq.n	800914c <_svfiprintf_r+0x130>
 80091be:	9105      	str	r1, [sp, #20]
 80091c0:	e7c4      	b.n	800914c <_svfiprintf_r+0x130>
 80091c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c6:	4604      	mov	r4, r0
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7f0      	b.n	80091ae <_svfiprintf_r+0x192>
 80091cc:	ab03      	add	r3, sp, #12
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	462a      	mov	r2, r5
 80091d2:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <_svfiprintf_r+0x1f0>)
 80091d4:	a904      	add	r1, sp, #16
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7fd fe84 	bl	8006ee4 <_printf_float>
 80091dc:	1c42      	adds	r2, r0, #1
 80091de:	4606      	mov	r6, r0
 80091e0:	d1d6      	bne.n	8009190 <_svfiprintf_r+0x174>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	065b      	lsls	r3, r3, #25
 80091e6:	f53f af2d 	bmi.w	8009044 <_svfiprintf_r+0x28>
 80091ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091ec:	e72c      	b.n	8009048 <_svfiprintf_r+0x2c>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b05      	ldr	r3, [pc, #20]	@ (800920c <_svfiprintf_r+0x1f0>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7fe f90b 	bl	8007414 <_printf_i>
 80091fe:	e7ed      	b.n	80091dc <_svfiprintf_r+0x1c0>
 8009200:	08009cb8 	.word	0x08009cb8
 8009204:	08009cc2 	.word	0x08009cc2
 8009208:	08006ee5 	.word	0x08006ee5
 800920c:	08008f65 	.word	0x08008f65
 8009210:	08009cbe 	.word	0x08009cbe

08009214 <__sflush_r>:
 8009214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921c:	0716      	lsls	r6, r2, #28
 800921e:	4605      	mov	r5, r0
 8009220:	460c      	mov	r4, r1
 8009222:	d454      	bmi.n	80092ce <__sflush_r+0xba>
 8009224:	684b      	ldr	r3, [r1, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	dc02      	bgt.n	8009230 <__sflush_r+0x1c>
 800922a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd48      	ble.n	80092c2 <__sflush_r+0xae>
 8009230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009232:	2e00      	cmp	r6, #0
 8009234:	d045      	beq.n	80092c2 <__sflush_r+0xae>
 8009236:	2300      	movs	r3, #0
 8009238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800923c:	682f      	ldr	r7, [r5, #0]
 800923e:	6a21      	ldr	r1, [r4, #32]
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	d030      	beq.n	80092a6 <__sflush_r+0x92>
 8009244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	0759      	lsls	r1, r3, #29
 800924a:	d505      	bpl.n	8009258 <__sflush_r+0x44>
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009252:	b10b      	cbz	r3, 8009258 <__sflush_r+0x44>
 8009254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	2300      	movs	r3, #0
 800925a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800925c:	6a21      	ldr	r1, [r4, #32]
 800925e:	4628      	mov	r0, r5
 8009260:	47b0      	blx	r6
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	d106      	bne.n	8009276 <__sflush_r+0x62>
 8009268:	6829      	ldr	r1, [r5, #0]
 800926a:	291d      	cmp	r1, #29
 800926c:	d82b      	bhi.n	80092c6 <__sflush_r+0xb2>
 800926e:	4a2a      	ldr	r2, [pc, #168]	@ (8009318 <__sflush_r+0x104>)
 8009270:	410a      	asrs	r2, r1
 8009272:	07d6      	lsls	r6, r2, #31
 8009274:	d427      	bmi.n	80092c6 <__sflush_r+0xb2>
 8009276:	2200      	movs	r2, #0
 8009278:	6062      	str	r2, [r4, #4]
 800927a:	04d9      	lsls	r1, r3, #19
 800927c:	6922      	ldr	r2, [r4, #16]
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	d504      	bpl.n	800928c <__sflush_r+0x78>
 8009282:	1c42      	adds	r2, r0, #1
 8009284:	d101      	bne.n	800928a <__sflush_r+0x76>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	b903      	cbnz	r3, 800928c <__sflush_r+0x78>
 800928a:	6560      	str	r0, [r4, #84]	@ 0x54
 800928c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800928e:	602f      	str	r7, [r5, #0]
 8009290:	b1b9      	cbz	r1, 80092c2 <__sflush_r+0xae>
 8009292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009296:	4299      	cmp	r1, r3
 8009298:	d002      	beq.n	80092a0 <__sflush_r+0x8c>
 800929a:	4628      	mov	r0, r5
 800929c:	f7ff f9e0 	bl	8008660 <_free_r>
 80092a0:	2300      	movs	r3, #0
 80092a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a4:	e00d      	b.n	80092c2 <__sflush_r+0xae>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b0      	blx	r6
 80092ac:	4602      	mov	r2, r0
 80092ae:	1c50      	adds	r0, r2, #1
 80092b0:	d1c9      	bne.n	8009246 <__sflush_r+0x32>
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0c6      	beq.n	8009246 <__sflush_r+0x32>
 80092b8:	2b1d      	cmp	r3, #29
 80092ba:	d001      	beq.n	80092c0 <__sflush_r+0xac>
 80092bc:	2b16      	cmp	r3, #22
 80092be:	d11e      	bne.n	80092fe <__sflush_r+0xea>
 80092c0:	602f      	str	r7, [r5, #0]
 80092c2:	2000      	movs	r0, #0
 80092c4:	e022      	b.n	800930c <__sflush_r+0xf8>
 80092c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ca:	b21b      	sxth	r3, r3
 80092cc:	e01b      	b.n	8009306 <__sflush_r+0xf2>
 80092ce:	690f      	ldr	r7, [r1, #16]
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	d0f6      	beq.n	80092c2 <__sflush_r+0xae>
 80092d4:	0793      	lsls	r3, r2, #30
 80092d6:	680e      	ldr	r6, [r1, #0]
 80092d8:	bf08      	it	eq
 80092da:	694b      	ldreq	r3, [r1, #20]
 80092dc:	600f      	str	r7, [r1, #0]
 80092de:	bf18      	it	ne
 80092e0:	2300      	movne	r3, #0
 80092e2:	eba6 0807 	sub.w	r8, r6, r7
 80092e6:	608b      	str	r3, [r1, #8]
 80092e8:	f1b8 0f00 	cmp.w	r8, #0
 80092ec:	dde9      	ble.n	80092c2 <__sflush_r+0xae>
 80092ee:	6a21      	ldr	r1, [r4, #32]
 80092f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092f2:	4643      	mov	r3, r8
 80092f4:	463a      	mov	r2, r7
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b0      	blx	r6
 80092fa:	2800      	cmp	r0, #0
 80092fc:	dc08      	bgt.n	8009310 <__sflush_r+0xfc>
 80092fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800930c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009310:	4407      	add	r7, r0
 8009312:	eba8 0800 	sub.w	r8, r8, r0
 8009316:	e7e7      	b.n	80092e8 <__sflush_r+0xd4>
 8009318:	dfbffffe 	.word	0xdfbffffe

0800931c <_fflush_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	4605      	mov	r5, r0
 8009322:	460c      	mov	r4, r1
 8009324:	b913      	cbnz	r3, 800932c <_fflush_r+0x10>
 8009326:	2500      	movs	r5, #0
 8009328:	4628      	mov	r0, r5
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	b118      	cbz	r0, 8009336 <_fflush_r+0x1a>
 800932e:	6a03      	ldr	r3, [r0, #32]
 8009330:	b90b      	cbnz	r3, 8009336 <_fflush_r+0x1a>
 8009332:	f7fe fa1b 	bl	800776c <__sinit>
 8009336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0f3      	beq.n	8009326 <_fflush_r+0xa>
 800933e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009340:	07d0      	lsls	r0, r2, #31
 8009342:	d404      	bmi.n	800934e <_fflush_r+0x32>
 8009344:	0599      	lsls	r1, r3, #22
 8009346:	d402      	bmi.n	800934e <_fflush_r+0x32>
 8009348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800934a:	f7fe fb3a 	bl	80079c2 <__retarget_lock_acquire_recursive>
 800934e:	4628      	mov	r0, r5
 8009350:	4621      	mov	r1, r4
 8009352:	f7ff ff5f 	bl	8009214 <__sflush_r>
 8009356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009358:	07da      	lsls	r2, r3, #31
 800935a:	4605      	mov	r5, r0
 800935c:	d4e4      	bmi.n	8009328 <_fflush_r+0xc>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	059b      	lsls	r3, r3, #22
 8009362:	d4e1      	bmi.n	8009328 <_fflush_r+0xc>
 8009364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009366:	f7fe fb2d 	bl	80079c4 <__retarget_lock_release_recursive>
 800936a:	e7dd      	b.n	8009328 <_fflush_r+0xc>

0800936c <memmove>:
 800936c:	4288      	cmp	r0, r1
 800936e:	b510      	push	{r4, lr}
 8009370:	eb01 0402 	add.w	r4, r1, r2
 8009374:	d902      	bls.n	800937c <memmove+0x10>
 8009376:	4284      	cmp	r4, r0
 8009378:	4623      	mov	r3, r4
 800937a:	d807      	bhi.n	800938c <memmove+0x20>
 800937c:	1e43      	subs	r3, r0, #1
 800937e:	42a1      	cmp	r1, r4
 8009380:	d008      	beq.n	8009394 <memmove+0x28>
 8009382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800938a:	e7f8      	b.n	800937e <memmove+0x12>
 800938c:	4402      	add	r2, r0
 800938e:	4601      	mov	r1, r0
 8009390:	428a      	cmp	r2, r1
 8009392:	d100      	bne.n	8009396 <memmove+0x2a>
 8009394:	bd10      	pop	{r4, pc}
 8009396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800939a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800939e:	e7f7      	b.n	8009390 <memmove+0x24>

080093a0 <_sbrk_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d06      	ldr	r5, [pc, #24]	@ (80093bc <_sbrk_r+0x1c>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7f8 f9fa 	bl	80017a4 <_sbrk>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_sbrk_r+0x1a>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_sbrk_r+0x1a>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	20000498 	.word	0x20000498

080093c0 <memcpy>:
 80093c0:	440a      	add	r2, r1
 80093c2:	4291      	cmp	r1, r2
 80093c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80093c8:	d100      	bne.n	80093cc <memcpy+0xc>
 80093ca:	4770      	bx	lr
 80093cc:	b510      	push	{r4, lr}
 80093ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d6:	4291      	cmp	r1, r2
 80093d8:	d1f9      	bne.n	80093ce <memcpy+0xe>
 80093da:	bd10      	pop	{r4, pc}

080093dc <__assert_func>:
 80093dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093de:	4614      	mov	r4, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	4b09      	ldr	r3, [pc, #36]	@ (8009408 <__assert_func+0x2c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4605      	mov	r5, r0
 80093e8:	68d8      	ldr	r0, [r3, #12]
 80093ea:	b954      	cbnz	r4, 8009402 <__assert_func+0x26>
 80093ec:	4b07      	ldr	r3, [pc, #28]	@ (800940c <__assert_func+0x30>)
 80093ee:	461c      	mov	r4, r3
 80093f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093f4:	9100      	str	r1, [sp, #0]
 80093f6:	462b      	mov	r3, r5
 80093f8:	4905      	ldr	r1, [pc, #20]	@ (8009410 <__assert_func+0x34>)
 80093fa:	f000 f86f 	bl	80094dc <fiprintf>
 80093fe:	f000 f87f 	bl	8009500 <abort>
 8009402:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <__assert_func+0x38>)
 8009404:	e7f4      	b.n	80093f0 <__assert_func+0x14>
 8009406:	bf00      	nop
 8009408:	20000018 	.word	0x20000018
 800940c:	08009d0e 	.word	0x08009d0e
 8009410:	08009ce0 	.word	0x08009ce0
 8009414:	08009cd3 	.word	0x08009cd3

08009418 <_calloc_r>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	fba1 5402 	umull	r5, r4, r1, r2
 800941e:	b93c      	cbnz	r4, 8009430 <_calloc_r+0x18>
 8009420:	4629      	mov	r1, r5
 8009422:	f7ff f991 	bl	8008748 <_malloc_r>
 8009426:	4606      	mov	r6, r0
 8009428:	b928      	cbnz	r0, 8009436 <_calloc_r+0x1e>
 800942a:	2600      	movs	r6, #0
 800942c:	4630      	mov	r0, r6
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	220c      	movs	r2, #12
 8009432:	6002      	str	r2, [r0, #0]
 8009434:	e7f9      	b.n	800942a <_calloc_r+0x12>
 8009436:	462a      	mov	r2, r5
 8009438:	4621      	mov	r1, r4
 800943a:	f7fe fa44 	bl	80078c6 <memset>
 800943e:	e7f5      	b.n	800942c <_calloc_r+0x14>

08009440 <__ascii_mbtowc>:
 8009440:	b082      	sub	sp, #8
 8009442:	b901      	cbnz	r1, 8009446 <__ascii_mbtowc+0x6>
 8009444:	a901      	add	r1, sp, #4
 8009446:	b142      	cbz	r2, 800945a <__ascii_mbtowc+0x1a>
 8009448:	b14b      	cbz	r3, 800945e <__ascii_mbtowc+0x1e>
 800944a:	7813      	ldrb	r3, [r2, #0]
 800944c:	600b      	str	r3, [r1, #0]
 800944e:	7812      	ldrb	r2, [r2, #0]
 8009450:	1e10      	subs	r0, r2, #0
 8009452:	bf18      	it	ne
 8009454:	2001      	movne	r0, #1
 8009456:	b002      	add	sp, #8
 8009458:	4770      	bx	lr
 800945a:	4610      	mov	r0, r2
 800945c:	e7fb      	b.n	8009456 <__ascii_mbtowc+0x16>
 800945e:	f06f 0001 	mvn.w	r0, #1
 8009462:	e7f8      	b.n	8009456 <__ascii_mbtowc+0x16>

08009464 <_realloc_r>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	4680      	mov	r8, r0
 800946a:	4615      	mov	r5, r2
 800946c:	460c      	mov	r4, r1
 800946e:	b921      	cbnz	r1, 800947a <_realloc_r+0x16>
 8009470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	4611      	mov	r1, r2
 8009476:	f7ff b967 	b.w	8008748 <_malloc_r>
 800947a:	b92a      	cbnz	r2, 8009488 <_realloc_r+0x24>
 800947c:	f7ff f8f0 	bl	8008660 <_free_r>
 8009480:	2400      	movs	r4, #0
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	f000 f841 	bl	800950e <_malloc_usable_size_r>
 800948c:	4285      	cmp	r5, r0
 800948e:	4606      	mov	r6, r0
 8009490:	d802      	bhi.n	8009498 <_realloc_r+0x34>
 8009492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009496:	d8f4      	bhi.n	8009482 <_realloc_r+0x1e>
 8009498:	4629      	mov	r1, r5
 800949a:	4640      	mov	r0, r8
 800949c:	f7ff f954 	bl	8008748 <_malloc_r>
 80094a0:	4607      	mov	r7, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0ec      	beq.n	8009480 <_realloc_r+0x1c>
 80094a6:	42b5      	cmp	r5, r6
 80094a8:	462a      	mov	r2, r5
 80094aa:	4621      	mov	r1, r4
 80094ac:	bf28      	it	cs
 80094ae:	4632      	movcs	r2, r6
 80094b0:	f7ff ff86 	bl	80093c0 <memcpy>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7ff f8d2 	bl	8008660 <_free_r>
 80094bc:	463c      	mov	r4, r7
 80094be:	e7e0      	b.n	8009482 <_realloc_r+0x1e>

080094c0 <__ascii_wctomb>:
 80094c0:	4603      	mov	r3, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	b141      	cbz	r1, 80094d8 <__ascii_wctomb+0x18>
 80094c6:	2aff      	cmp	r2, #255	@ 0xff
 80094c8:	d904      	bls.n	80094d4 <__ascii_wctomb+0x14>
 80094ca:	228a      	movs	r2, #138	@ 0x8a
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094d2:	4770      	bx	lr
 80094d4:	700a      	strb	r2, [r1, #0]
 80094d6:	2001      	movs	r0, #1
 80094d8:	4770      	bx	lr
	...

080094dc <fiprintf>:
 80094dc:	b40e      	push	{r1, r2, r3}
 80094de:	b503      	push	{r0, r1, lr}
 80094e0:	4601      	mov	r1, r0
 80094e2:	ab03      	add	r3, sp, #12
 80094e4:	4805      	ldr	r0, [pc, #20]	@ (80094fc <fiprintf+0x20>)
 80094e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f000 f83f 	bl	8009570 <_vfiprintf_r>
 80094f2:	b002      	add	sp, #8
 80094f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f8:	b003      	add	sp, #12
 80094fa:	4770      	bx	lr
 80094fc:	20000018 	.word	0x20000018

08009500 <abort>:
 8009500:	b508      	push	{r3, lr}
 8009502:	2006      	movs	r0, #6
 8009504:	f000 fa08 	bl	8009918 <raise>
 8009508:	2001      	movs	r0, #1
 800950a:	f7f8 f8d3 	bl	80016b4 <_exit>

0800950e <_malloc_usable_size_r>:
 800950e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009512:	1f18      	subs	r0, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfbc      	itt	lt
 8009518:	580b      	ldrlt	r3, [r1, r0]
 800951a:	18c0      	addlt	r0, r0, r3
 800951c:	4770      	bx	lr

0800951e <__sfputc_r>:
 800951e:	6893      	ldr	r3, [r2, #8]
 8009520:	3b01      	subs	r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	b410      	push	{r4}
 8009526:	6093      	str	r3, [r2, #8]
 8009528:	da08      	bge.n	800953c <__sfputc_r+0x1e>
 800952a:	6994      	ldr	r4, [r2, #24]
 800952c:	42a3      	cmp	r3, r4
 800952e:	db01      	blt.n	8009534 <__sfputc_r+0x16>
 8009530:	290a      	cmp	r1, #10
 8009532:	d103      	bne.n	800953c <__sfputc_r+0x1e>
 8009534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009538:	f000 b932 	b.w	80097a0 <__swbuf_r>
 800953c:	6813      	ldr	r3, [r2, #0]
 800953e:	1c58      	adds	r0, r3, #1
 8009540:	6010      	str	r0, [r2, #0]
 8009542:	7019      	strb	r1, [r3, #0]
 8009544:	4608      	mov	r0, r1
 8009546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954a:	4770      	bx	lr

0800954c <__sfputs_r>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	4606      	mov	r6, r0
 8009550:	460f      	mov	r7, r1
 8009552:	4614      	mov	r4, r2
 8009554:	18d5      	adds	r5, r2, r3
 8009556:	42ac      	cmp	r4, r5
 8009558:	d101      	bne.n	800955e <__sfputs_r+0x12>
 800955a:	2000      	movs	r0, #0
 800955c:	e007      	b.n	800956e <__sfputs_r+0x22>
 800955e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009562:	463a      	mov	r2, r7
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff ffda 	bl	800951e <__sfputc_r>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d1f3      	bne.n	8009556 <__sfputs_r+0xa>
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009570 <_vfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	460d      	mov	r5, r1
 8009576:	b09d      	sub	sp, #116	@ 0x74
 8009578:	4614      	mov	r4, r2
 800957a:	4698      	mov	r8, r3
 800957c:	4606      	mov	r6, r0
 800957e:	b118      	cbz	r0, 8009588 <_vfiprintf_r+0x18>
 8009580:	6a03      	ldr	r3, [r0, #32]
 8009582:	b90b      	cbnz	r3, 8009588 <_vfiprintf_r+0x18>
 8009584:	f7fe f8f2 	bl	800776c <__sinit>
 8009588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800958a:	07d9      	lsls	r1, r3, #31
 800958c:	d405      	bmi.n	800959a <_vfiprintf_r+0x2a>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	059a      	lsls	r2, r3, #22
 8009592:	d402      	bmi.n	800959a <_vfiprintf_r+0x2a>
 8009594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009596:	f7fe fa14 	bl	80079c2 <__retarget_lock_acquire_recursive>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	071b      	lsls	r3, r3, #28
 800959e:	d501      	bpl.n	80095a4 <_vfiprintf_r+0x34>
 80095a0:	692b      	ldr	r3, [r5, #16]
 80095a2:	b99b      	cbnz	r3, 80095cc <_vfiprintf_r+0x5c>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f938 	bl	800981c <__swsetup_r>
 80095ac:	b170      	cbz	r0, 80095cc <_vfiprintf_r+0x5c>
 80095ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b0:	07dc      	lsls	r4, r3, #31
 80095b2:	d504      	bpl.n	80095be <_vfiprintf_r+0x4e>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095b8:	b01d      	add	sp, #116	@ 0x74
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	0598      	lsls	r0, r3, #22
 80095c2:	d4f7      	bmi.n	80095b4 <_vfiprintf_r+0x44>
 80095c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095c6:	f7fe f9fd 	bl	80079c4 <__retarget_lock_release_recursive>
 80095ca:	e7f3      	b.n	80095b4 <_vfiprintf_r+0x44>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d0:	2320      	movs	r3, #32
 80095d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095da:	2330      	movs	r3, #48	@ 0x30
 80095dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800978c <_vfiprintf_r+0x21c>
 80095e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095e4:	f04f 0901 	mov.w	r9, #1
 80095e8:	4623      	mov	r3, r4
 80095ea:	469a      	mov	sl, r3
 80095ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f0:	b10a      	cbz	r2, 80095f6 <_vfiprintf_r+0x86>
 80095f2:	2a25      	cmp	r2, #37	@ 0x25
 80095f4:	d1f9      	bne.n	80095ea <_vfiprintf_r+0x7a>
 80095f6:	ebba 0b04 	subs.w	fp, sl, r4
 80095fa:	d00b      	beq.n	8009614 <_vfiprintf_r+0xa4>
 80095fc:	465b      	mov	r3, fp
 80095fe:	4622      	mov	r2, r4
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ffa2 	bl	800954c <__sfputs_r>
 8009608:	3001      	adds	r0, #1
 800960a:	f000 80a7 	beq.w	800975c <_vfiprintf_r+0x1ec>
 800960e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009610:	445a      	add	r2, fp
 8009612:	9209      	str	r2, [sp, #36]	@ 0x24
 8009614:	f89a 3000 	ldrb.w	r3, [sl]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 809f 	beq.w	800975c <_vfiprintf_r+0x1ec>
 800961e:	2300      	movs	r3, #0
 8009620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009628:	f10a 0a01 	add.w	sl, sl, #1
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	9307      	str	r3, [sp, #28]
 8009630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009634:	931a      	str	r3, [sp, #104]	@ 0x68
 8009636:	4654      	mov	r4, sl
 8009638:	2205      	movs	r2, #5
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	4853      	ldr	r0, [pc, #332]	@ (800978c <_vfiprintf_r+0x21c>)
 8009640:	f7f6 fdce 	bl	80001e0 <memchr>
 8009644:	9a04      	ldr	r2, [sp, #16]
 8009646:	b9d8      	cbnz	r0, 8009680 <_vfiprintf_r+0x110>
 8009648:	06d1      	lsls	r1, r2, #27
 800964a:	bf44      	itt	mi
 800964c:	2320      	movmi	r3, #32
 800964e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009652:	0713      	lsls	r3, r2, #28
 8009654:	bf44      	itt	mi
 8009656:	232b      	movmi	r3, #43	@ 0x2b
 8009658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965c:	f89a 3000 	ldrb.w	r3, [sl]
 8009660:	2b2a      	cmp	r3, #42	@ 0x2a
 8009662:	d015      	beq.n	8009690 <_vfiprintf_r+0x120>
 8009664:	9a07      	ldr	r2, [sp, #28]
 8009666:	4654      	mov	r4, sl
 8009668:	2000      	movs	r0, #0
 800966a:	f04f 0c0a 	mov.w	ip, #10
 800966e:	4621      	mov	r1, r4
 8009670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009674:	3b30      	subs	r3, #48	@ 0x30
 8009676:	2b09      	cmp	r3, #9
 8009678:	d94b      	bls.n	8009712 <_vfiprintf_r+0x1a2>
 800967a:	b1b0      	cbz	r0, 80096aa <_vfiprintf_r+0x13a>
 800967c:	9207      	str	r2, [sp, #28]
 800967e:	e014      	b.n	80096aa <_vfiprintf_r+0x13a>
 8009680:	eba0 0308 	sub.w	r3, r0, r8
 8009684:	fa09 f303 	lsl.w	r3, r9, r3
 8009688:	4313      	orrs	r3, r2
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	46a2      	mov	sl, r4
 800968e:	e7d2      	b.n	8009636 <_vfiprintf_r+0xc6>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	1d19      	adds	r1, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9103      	str	r1, [sp, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	bfbb      	ittet	lt
 800969c:	425b      	neglt	r3, r3
 800969e:	f042 0202 	orrlt.w	r2, r2, #2
 80096a2:	9307      	strge	r3, [sp, #28]
 80096a4:	9307      	strlt	r3, [sp, #28]
 80096a6:	bfb8      	it	lt
 80096a8:	9204      	strlt	r2, [sp, #16]
 80096aa:	7823      	ldrb	r3, [r4, #0]
 80096ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ae:	d10a      	bne.n	80096c6 <_vfiprintf_r+0x156>
 80096b0:	7863      	ldrb	r3, [r4, #1]
 80096b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b4:	d132      	bne.n	800971c <_vfiprintf_r+0x1ac>
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	1d1a      	adds	r2, r3, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	9203      	str	r2, [sp, #12]
 80096be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c2:	3402      	adds	r4, #2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800979c <_vfiprintf_r+0x22c>
 80096ca:	7821      	ldrb	r1, [r4, #0]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7f6 fd86 	bl	80001e0 <memchr>
 80096d4:	b138      	cbz	r0, 80096e6 <_vfiprintf_r+0x176>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	eba0 000a 	sub.w	r0, r0, sl
 80096dc:	2240      	movs	r2, #64	@ 0x40
 80096de:	4082      	lsls	r2, r0
 80096e0:	4313      	orrs	r3, r2
 80096e2:	3401      	adds	r4, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4829      	ldr	r0, [pc, #164]	@ (8009790 <_vfiprintf_r+0x220>)
 80096ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f0:	2206      	movs	r2, #6
 80096f2:	f7f6 fd75 	bl	80001e0 <memchr>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d03f      	beq.n	800977a <_vfiprintf_r+0x20a>
 80096fa:	4b26      	ldr	r3, [pc, #152]	@ (8009794 <_vfiprintf_r+0x224>)
 80096fc:	bb1b      	cbnz	r3, 8009746 <_vfiprintf_r+0x1d6>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	3308      	adds	r3, #8
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970c:	443b      	add	r3, r7
 800970e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009710:	e76a      	b.n	80095e8 <_vfiprintf_r+0x78>
 8009712:	fb0c 3202 	mla	r2, ip, r2, r3
 8009716:	460c      	mov	r4, r1
 8009718:	2001      	movs	r0, #1
 800971a:	e7a8      	b.n	800966e <_vfiprintf_r+0xfe>
 800971c:	2300      	movs	r3, #0
 800971e:	3401      	adds	r4, #1
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	4619      	mov	r1, r3
 8009724:	f04f 0c0a 	mov.w	ip, #10
 8009728:	4620      	mov	r0, r4
 800972a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972e:	3a30      	subs	r2, #48	@ 0x30
 8009730:	2a09      	cmp	r2, #9
 8009732:	d903      	bls.n	800973c <_vfiprintf_r+0x1cc>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0c6      	beq.n	80096c6 <_vfiprintf_r+0x156>
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	e7c4      	b.n	80096c6 <_vfiprintf_r+0x156>
 800973c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009740:	4604      	mov	r4, r0
 8009742:	2301      	movs	r3, #1
 8009744:	e7f0      	b.n	8009728 <_vfiprintf_r+0x1b8>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b12      	ldr	r3, [pc, #72]	@ (8009798 <_vfiprintf_r+0x228>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4630      	mov	r0, r6
 8009752:	f7fd fbc7 	bl	8006ee4 <_printf_float>
 8009756:	4607      	mov	r7, r0
 8009758:	1c78      	adds	r0, r7, #1
 800975a:	d1d6      	bne.n	800970a <_vfiprintf_r+0x19a>
 800975c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d405      	bmi.n	800976e <_vfiprintf_r+0x1fe>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d402      	bmi.n	800976e <_vfiprintf_r+0x1fe>
 8009768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976a:	f7fe f92b 	bl	80079c4 <__retarget_lock_release_recursive>
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	065b      	lsls	r3, r3, #25
 8009772:	f53f af1f 	bmi.w	80095b4 <_vfiprintf_r+0x44>
 8009776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009778:	e71e      	b.n	80095b8 <_vfiprintf_r+0x48>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <_vfiprintf_r+0x228>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f7fd fe45 	bl	8007414 <_printf_i>
 800978a:	e7e4      	b.n	8009756 <_vfiprintf_r+0x1e6>
 800978c:	08009cb8 	.word	0x08009cb8
 8009790:	08009cc2 	.word	0x08009cc2
 8009794:	08006ee5 	.word	0x08006ee5
 8009798:	0800954d 	.word	0x0800954d
 800979c:	08009cbe 	.word	0x08009cbe

080097a0 <__swbuf_r>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	460e      	mov	r6, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	4605      	mov	r5, r0
 80097a8:	b118      	cbz	r0, 80097b2 <__swbuf_r+0x12>
 80097aa:	6a03      	ldr	r3, [r0, #32]
 80097ac:	b90b      	cbnz	r3, 80097b2 <__swbuf_r+0x12>
 80097ae:	f7fd ffdd 	bl	800776c <__sinit>
 80097b2:	69a3      	ldr	r3, [r4, #24]
 80097b4:	60a3      	str	r3, [r4, #8]
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	071a      	lsls	r2, r3, #28
 80097ba:	d501      	bpl.n	80097c0 <__swbuf_r+0x20>
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	b943      	cbnz	r3, 80097d2 <__swbuf_r+0x32>
 80097c0:	4621      	mov	r1, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 f82a 	bl	800981c <__swsetup_r>
 80097c8:	b118      	cbz	r0, 80097d2 <__swbuf_r+0x32>
 80097ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80097ce:	4638      	mov	r0, r7
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	6922      	ldr	r2, [r4, #16]
 80097d6:	1a98      	subs	r0, r3, r2
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	b2f6      	uxtb	r6, r6
 80097dc:	4283      	cmp	r3, r0
 80097de:	4637      	mov	r7, r6
 80097e0:	dc05      	bgt.n	80097ee <__swbuf_r+0x4e>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7ff fd99 	bl	800931c <_fflush_r>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1ed      	bne.n	80097ca <__swbuf_r+0x2a>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	6022      	str	r2, [r4, #0]
 80097fa:	701e      	strb	r6, [r3, #0]
 80097fc:	6962      	ldr	r2, [r4, #20]
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	429a      	cmp	r2, r3
 8009802:	d004      	beq.n	800980e <__swbuf_r+0x6e>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	07db      	lsls	r3, r3, #31
 8009808:	d5e1      	bpl.n	80097ce <__swbuf_r+0x2e>
 800980a:	2e0a      	cmp	r6, #10
 800980c:	d1df      	bne.n	80097ce <__swbuf_r+0x2e>
 800980e:	4621      	mov	r1, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f7ff fd83 	bl	800931c <_fflush_r>
 8009816:	2800      	cmp	r0, #0
 8009818:	d0d9      	beq.n	80097ce <__swbuf_r+0x2e>
 800981a:	e7d6      	b.n	80097ca <__swbuf_r+0x2a>

0800981c <__swsetup_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4b29      	ldr	r3, [pc, #164]	@ (80098c4 <__swsetup_r+0xa8>)
 8009820:	4605      	mov	r5, r0
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	460c      	mov	r4, r1
 8009826:	b118      	cbz	r0, 8009830 <__swsetup_r+0x14>
 8009828:	6a03      	ldr	r3, [r0, #32]
 800982a:	b90b      	cbnz	r3, 8009830 <__swsetup_r+0x14>
 800982c:	f7fd ff9e 	bl	800776c <__sinit>
 8009830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009834:	0719      	lsls	r1, r3, #28
 8009836:	d422      	bmi.n	800987e <__swsetup_r+0x62>
 8009838:	06da      	lsls	r2, r3, #27
 800983a:	d407      	bmi.n	800984c <__swsetup_r+0x30>
 800983c:	2209      	movs	r2, #9
 800983e:	602a      	str	r2, [r5, #0]
 8009840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800984a:	e033      	b.n	80098b4 <__swsetup_r+0x98>
 800984c:	0758      	lsls	r0, r3, #29
 800984e:	d512      	bpl.n	8009876 <__swsetup_r+0x5a>
 8009850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009852:	b141      	cbz	r1, 8009866 <__swsetup_r+0x4a>
 8009854:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009858:	4299      	cmp	r1, r3
 800985a:	d002      	beq.n	8009862 <__swsetup_r+0x46>
 800985c:	4628      	mov	r0, r5
 800985e:	f7fe feff 	bl	8008660 <_free_r>
 8009862:	2300      	movs	r3, #0
 8009864:	6363      	str	r3, [r4, #52]	@ 0x34
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	2300      	movs	r3, #0
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f043 0308 	orr.w	r3, r3, #8
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	b94b      	cbnz	r3, 8009896 <__swsetup_r+0x7a>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800988c:	d003      	beq.n	8009896 <__swsetup_r+0x7a>
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f000 f883 	bl	800999c <__smakebuf_r>
 8009896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989a:	f013 0201 	ands.w	r2, r3, #1
 800989e:	d00a      	beq.n	80098b6 <__swsetup_r+0x9a>
 80098a0:	2200      	movs	r2, #0
 80098a2:	60a2      	str	r2, [r4, #8]
 80098a4:	6962      	ldr	r2, [r4, #20]
 80098a6:	4252      	negs	r2, r2
 80098a8:	61a2      	str	r2, [r4, #24]
 80098aa:	6922      	ldr	r2, [r4, #16]
 80098ac:	b942      	cbnz	r2, 80098c0 <__swsetup_r+0xa4>
 80098ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098b2:	d1c5      	bne.n	8009840 <__swsetup_r+0x24>
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	0799      	lsls	r1, r3, #30
 80098b8:	bf58      	it	pl
 80098ba:	6962      	ldrpl	r2, [r4, #20]
 80098bc:	60a2      	str	r2, [r4, #8]
 80098be:	e7f4      	b.n	80098aa <__swsetup_r+0x8e>
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7f7      	b.n	80098b4 <__swsetup_r+0x98>
 80098c4:	20000018 	.word	0x20000018

080098c8 <_raise_r>:
 80098c8:	291f      	cmp	r1, #31
 80098ca:	b538      	push	{r3, r4, r5, lr}
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	d904      	bls.n	80098dc <_raise_r+0x14>
 80098d2:	2316      	movs	r3, #22
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098de:	b112      	cbz	r2, 80098e6 <_raise_r+0x1e>
 80098e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e4:	b94b      	cbnz	r3, 80098fa <_raise_r+0x32>
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f830 	bl	800994c <_getpid_r>
 80098ec:	4622      	mov	r2, r4
 80098ee:	4601      	mov	r1, r0
 80098f0:	4628      	mov	r0, r5
 80098f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f6:	f000 b817 	b.w	8009928 <_kill_r>
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d00a      	beq.n	8009914 <_raise_r+0x4c>
 80098fe:	1c59      	adds	r1, r3, #1
 8009900:	d103      	bne.n	800990a <_raise_r+0x42>
 8009902:	2316      	movs	r3, #22
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	2001      	movs	r0, #1
 8009908:	e7e7      	b.n	80098da <_raise_r+0x12>
 800990a:	2100      	movs	r1, #0
 800990c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009910:	4620      	mov	r0, r4
 8009912:	4798      	blx	r3
 8009914:	2000      	movs	r0, #0
 8009916:	e7e0      	b.n	80098da <_raise_r+0x12>

08009918 <raise>:
 8009918:	4b02      	ldr	r3, [pc, #8]	@ (8009924 <raise+0xc>)
 800991a:	4601      	mov	r1, r0
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	f7ff bfd3 	b.w	80098c8 <_raise_r>
 8009922:	bf00      	nop
 8009924:	20000018 	.word	0x20000018

08009928 <_kill_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	@ (8009948 <_kill_r+0x20>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7f7 fead 	bl	8001694 <_kill>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_kill_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_kill_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	20000498 	.word	0x20000498

0800994c <_getpid_r>:
 800994c:	f7f7 be9a 	b.w	8001684 <_getpid>

08009950 <__swhatbuf_r>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	460c      	mov	r4, r1
 8009954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009958:	2900      	cmp	r1, #0
 800995a:	b096      	sub	sp, #88	@ 0x58
 800995c:	4615      	mov	r5, r2
 800995e:	461e      	mov	r6, r3
 8009960:	da0d      	bge.n	800997e <__swhatbuf_r+0x2e>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009968:	f04f 0100 	mov.w	r1, #0
 800996c:	bf14      	ite	ne
 800996e:	2340      	movne	r3, #64	@ 0x40
 8009970:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009974:	2000      	movs	r0, #0
 8009976:	6031      	str	r1, [r6, #0]
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	b016      	add	sp, #88	@ 0x58
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	466a      	mov	r2, sp
 8009980:	f000 f848 	bl	8009a14 <_fstat_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	dbec      	blt.n	8009962 <__swhatbuf_r+0x12>
 8009988:	9901      	ldr	r1, [sp, #4]
 800998a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800998e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009992:	4259      	negs	r1, r3
 8009994:	4159      	adcs	r1, r3
 8009996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800999a:	e7eb      	b.n	8009974 <__swhatbuf_r+0x24>

0800999c <__smakebuf_r>:
 800999c:	898b      	ldrh	r3, [r1, #12]
 800999e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099a0:	079d      	lsls	r5, r3, #30
 80099a2:	4606      	mov	r6, r0
 80099a4:	460c      	mov	r4, r1
 80099a6:	d507      	bpl.n	80099b8 <__smakebuf_r+0x1c>
 80099a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	6123      	str	r3, [r4, #16]
 80099b0:	2301      	movs	r3, #1
 80099b2:	6163      	str	r3, [r4, #20]
 80099b4:	b003      	add	sp, #12
 80099b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b8:	ab01      	add	r3, sp, #4
 80099ba:	466a      	mov	r2, sp
 80099bc:	f7ff ffc8 	bl	8009950 <__swhatbuf_r>
 80099c0:	9f00      	ldr	r7, [sp, #0]
 80099c2:	4605      	mov	r5, r0
 80099c4:	4639      	mov	r1, r7
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7fe febe 	bl	8008748 <_malloc_r>
 80099cc:	b948      	cbnz	r0, 80099e2 <__smakebuf_r+0x46>
 80099ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d2:	059a      	lsls	r2, r3, #22
 80099d4:	d4ee      	bmi.n	80099b4 <__smakebuf_r+0x18>
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	f043 0302 	orr.w	r3, r3, #2
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	e7e2      	b.n	80099a8 <__smakebuf_r+0xc>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	6020      	str	r0, [r4, #0]
 80099e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099f2:	b15b      	cbz	r3, 8009a0c <__smakebuf_r+0x70>
 80099f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 f81d 	bl	8009a38 <_isatty_r>
 80099fe:	b128      	cbz	r0, 8009a0c <__smakebuf_r+0x70>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	f043 0301 	orr.w	r3, r3, #1
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	431d      	orrs	r5, r3
 8009a10:	81a5      	strh	r5, [r4, #12]
 8009a12:	e7cf      	b.n	80099b4 <__smakebuf_r+0x18>

08009a14 <_fstat_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	@ (8009a34 <_fstat_r+0x20>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	f7f7 fe97 	bl	8001754 <_fstat>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d102      	bne.n	8009a30 <_fstat_r+0x1c>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	b103      	cbz	r3, 8009a30 <_fstat_r+0x1c>
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	bd38      	pop	{r3, r4, r5, pc}
 8009a32:	bf00      	nop
 8009a34:	20000498 	.word	0x20000498

08009a38 <_isatty_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_isatty_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f7 fe96 	bl	8001774 <_isatty>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_isatty_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_isatty_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20000498 	.word	0x20000498

08009a58 <_init>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	bf00      	nop
 8009a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5e:	bc08      	pop	{r3}
 8009a60:	469e      	mov	lr, r3
 8009a62:	4770      	bx	lr

08009a64 <_fini>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	bf00      	nop
 8009a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6a:	bc08      	pop	{r3}
 8009a6c:	469e      	mov	lr, r3
 8009a6e:	4770      	bx	lr

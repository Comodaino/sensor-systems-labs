
UART-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b34  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d20  08002d20  00004050  2**0
                  CONTENTS
  4 .ARM          00000008  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d28  08002d28  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00003d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08002d30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000050  08002d80  00004050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002d80  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c709  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb1  00000000  00000000  00010789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00012340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098e  00000000  00000000  00012f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164a8  00000000  00000000  000138fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cca9  00000000  00000000  00029da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4b9  00000000  00000000  00036a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  000c3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c72ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cb0 	.word	0x08002cb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	08002cb0 	.word	0x08002cb0

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800020c:	f000 b96a 	b.w	80004e4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004ec:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000502:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000522:	bf00      	nop
    __ASM volatile ("NOP");
 8000524:	bf00      	nop
    __ASM volatile ("NOP");
 8000526:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000530:	2300      	movs	r3, #0
 8000532:	e000      	b.n	8000536 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000534:	2301      	movs	r3, #1
    }
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000edf0 	.word	0xe000edf0
 8000544:	e0001000 	.word	0xe0001000

08000548 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <DWT_Delay_us+0x48>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000556:	f001 fcb1 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <DWT_Delay_us+0x4c>)
 800055e:	fba2 2303 	umull	r2, r3, r2, r3
 8000562:	0c9b      	lsrs	r3, r3, #18
 8000564:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	fb02 f303 	mul.w	r3, r2, r3
 800056e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000570:	bf00      	nop
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <DWT_Delay_us+0x48>)
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	1ad2      	subs	r2, r2, r3
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1acb      	subs	r3, r1, r3
 8000580:	429a      	cmp	r2, r3
 8000582:	d3f6      	bcc.n	8000572 <DWT_Delay_us+0x2a>
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	e0001000 	.word	0xe0001000
 8000594:	431bde83 	.word	0x431bde83

08000598 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <lcd_enable+0x28>)
 80005a2:	f001 f80d 	bl	80015c0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005a6:	2032      	movs	r0, #50	@ 0x32
 80005a8:	f7ff ffce 	bl	8000548 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_enable+0x28>)
 80005b2:	f001 f805 	bl	80015c0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005b6:	2032      	movs	r0, #50	@ 0x32
 80005b8:	f7ff ffc6 	bl	8000548 <DWT_Delay_us>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020400 	.word	0x40020400

080005c4 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <lcd_write4+0x74>)
 80005de:	f000 ffef 	bl	80015c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	105b      	asrs	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <lcd_write4+0x74>)
 80005f6:	f000 ffe3 	bl	80015c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	109b      	asrs	r3, r3, #2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060c:	480a      	ldr	r0, [pc, #40]	@ (8000638 <lcd_write4+0x74>)
 800060e:	f000 ffd7 	bl	80015c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	10db      	asrs	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <lcd_write4+0x74>)
 8000626:	f000 ffcb 	bl	80015c0 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 800062a:	f7ff ffb5 	bl	8000598 <lcd_enable>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400

0800063c <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffb9 	bl	80005c4 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffb5 	bl	80005c4 <lcd_write4>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800066e:	2200      	movs	r2, #0
 8000670:	2104      	movs	r1, #4
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <lcd_command+0x24>)
 8000674:	f000 ffa4 	bl	80015c0 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffde 	bl	800063c <lcd_write>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020400 	.word	0x40020400

0800068c <lcd_clear>:

void lcd_clear(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ffe7 	bl	8000664 <lcd_command>
	DWT_Delay_us(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800069a:	f7ff ff55 	bl	8000548 <DWT_Delay_us>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80006ae:	2201      	movs	r2, #1
 80006b0:	2104      	movs	r1, #4
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <lcd_data+0x24>)
 80006b4:	f000 ff84 	bl	80015c0 <HAL_GPIO_WritePin>
	lcd_write(byte);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffbe 	bl	800063c <lcd_write>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400

080006cc <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	3201      	adds	r2, #1
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80006ea:	dc10      	bgt.n	800070e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	461a      	mov	r2, r3
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000704:	b25b      	sxtb	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffab 	bl	8000664 <lcd_command>
	}
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fd62 	bl	80001e8 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8000728:	e006      	b.n	8000738 <lcd_print+0x22>
		lcd_data(*string++);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffb6 	bl	80006a4 <lcd_data>
	while (size--){
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	60fa      	str	r2, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f3      	bne.n	800072a <lcd_print+0x14>
	}
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <lcd_println+0x6c>)
 800075a:	f107 0408 	add.w	r4, r7, #8
 800075e:	461d      	mov	r5, r3
 8000760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff fd3d 	bl	80001e8 <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	2b10      	cmp	r3, #16
 8000776:	dd0c      	ble.n	8000792 <lcd_println+0x46>
		size = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800077c:	e009      	b.n	8000792 <lcd_println+0x46>
		line[size] = string[size];
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	while (size--){
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	61fa      	str	r2, [r7, #28]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f0      	bne.n	800077e <lcd_println+0x32>
	}
	setCursor(0, row);
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4619      	mov	r1, r3
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff93 	bl	80006cc <setCursor>
	lcd_print(line);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffb3 	bl	8000716 <lcd_print>
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	08002cc8 	.word	0x08002cc8

080007bc <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff40 	bl	8000664 <lcd_command>
	for (int i = 0; i<8; i++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e009      	b.n	80007fe <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff56 	bl	80006a4 <lcd_data>
	for (int i = 0; i<8; i++){
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddf2      	ble.n	80007ea <writeCustomChar+0x2e>
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8000814:	490a      	ldr	r1, [pc, #40]	@ (8000840 <loadCustomChars+0x30>)
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ffd0 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800081c:	4909      	ldr	r1, [pc, #36]	@ (8000844 <loadCustomChars+0x34>)
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff ffcc 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <loadCustomChars+0x38>)
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ffc8 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 800082c:	4907      	ldr	r1, [pc, #28]	@ (800084c <loadCustomChars+0x3c>)
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff ffc4 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8000834:	4906      	ldr	r1, [pc, #24]	@ (8000850 <loadCustomChars+0x40>)
 8000836:	2005      	movs	r0, #5
 8000838:	f7ff ffc0 	bl	80007bc <writeCustomChar>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000010 	.word	0x20000010
 800084c:	20000018 	.word	0x20000018
 8000850:	20000020 	.word	0x20000020

08000854 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8000858:	2032      	movs	r0, #50	@ 0x32
 800085a:	f000 fbf7 	bl	800104c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2104      	movs	r1, #4
 8000862:	4824      	ldr	r0, [pc, #144]	@ (80008f4 <lcd_initialize+0xa0>)
 8000864:	f000 feac 	bl	80015c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2102      	movs	r1, #2
 800086c:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <lcd_initialize+0xa0>)
 800086e:	f000 fea7 	bl	80015c0 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8000872:	f7ff fe39 	bl	80004e8 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fea4 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 800087c:	2005      	movs	r0, #5
 800087e:	f000 fbe5 	bl	800104c <HAL_Delay>
	lcd_write4(0x03);
 8000882:	2003      	movs	r0, #3
 8000884:	f7ff fe9e 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 8000888:	2005      	movs	r0, #5
 800088a:	f000 fbdf 	bl	800104c <HAL_Delay>
	lcd_write4(0x03);
 800088e:	2003      	movs	r0, #3
 8000890:	f7ff fe98 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 8000894:	2005      	movs	r0, #5
 8000896:	f000 fbd9 	bl	800104c <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff fe92 	bl	80005c4 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80008a0:	2028      	movs	r0, #40	@ 0x28
 80008a2:	f7ff fecb 	bl	800063c <lcd_write>
	HAL_Delay(5);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f000 fbd0 	bl	800104c <HAL_Delay>
	lcd_write(0x08); //display off;
 80008ac:	2008      	movs	r0, #8
 80008ae:	f7ff fec5 	bl	800063c <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fec2 	bl	800063c <lcd_write>
	HAL_Delay(5);
 80008b8:	2005      	movs	r0, #5
 80008ba:	f000 fbc7 	bl	800104c <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 80008be:	2006      	movs	r0, #6
 80008c0:	f7ff febc 	bl	800063c <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <lcd_initialize+0xa4>)
 80008ca:	f000 fe79 	bl	80015c0 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <lcd_initialize+0xa8>)
 80008d0:	220c      	movs	r2, #12
 80008d2:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <lcd_initialize+0xa8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff feaf 	bl	800063c <lcd_write>
	lcd_write(0x02); //go home
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff feac 	bl	800063c <lcd_write>
	HAL_Delay(2);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fbb1 	bl	800104c <HAL_Delay>
	loadCustomChars();
 80008ea:	f7ff ff91 	bl	8000810 <loadCustomChars>

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020000 	.word	0x40020000
 80008fc:	2000006c 	.word	0x2000006c

08000900 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2110      	movs	r1, #16
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <lcd_backlight_ON+0x14>)
 800090a:	f000 fe59 	bl	80015c0 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020000 	.word	0x40020000

08000918 <insertion_sort>:
 char *members[] = {"Riccardo","Alessio", "Sofia", "Anna", "Emma"};

 int length = sizeof(members)/sizeof(char*);

 void insertion_sort(char* arr[], int n)
 {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
     for (int i = 1; i < n; ++i) {
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e030      	b.n	800098a <insertion_sort+0x72>
         char* key = arr[i];
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	60fb      	str	r3, [r7, #12]
         int j = i - 1;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3b01      	subs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]

         /* Move elements of arr[0..i-1], that are
            greater than key, to one position ahead
            of their current position */
         while (j >= 0 && strcmp(arr[j], key)>0) {
 800093a:	e00d      	b.n	8000958 <insertion_sort+0x40>
             arr[j + 1] = arr[j];
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	441a      	add	r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	3301      	adds	r3, #1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	440b      	add	r3, r1
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	601a      	str	r2, [r3, #0]
             j = j - 1;
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3b01      	subs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
         while (j >= 0 && strcmp(arr[j], key)>0) {
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <insertion_sort+0x5e>
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc32 	bl	80001d4 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	dce2      	bgt.n	800093c <insertion_sort+0x24>
         }
         arr[j + 1] = key;
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	3301      	adds	r3, #1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	601a      	str	r2, [r3, #0]
     for (int i = 1; i < n; ++i) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbca      	blt.n	8000928 <insertion_sort+0x10>
     }
 }
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_TIM_PeriodElapsedCallback>:
 int counter = 1;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *handler){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 	if(handler == &htim2){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d132      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x76>
 		  lcd_clear();
 80009ac:	f7ff fe6e 	bl	800068c <lcd_clear>
 		  lcd_println(members[(counter + 1) % length], 1);
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80009be:	fb01 f202 	mul.w	r2, r1, r2
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff febd 	bl	800074c <lcd_println>
 		  lcd_println(members[(counter ) % length], 0);
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	fb93 f1f2 	sdiv	r1, r3, r2
 80009de:	fb01 f202 	mul.w	r2, r1, r2
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fead 	bl	800074c <lcd_println>
 		  counter = (counter + 1)%length;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a00:	fb01 f202 	mul.w	r2, r1, r2
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a08:	6013      	str	r3, [r2, #0]
 		  HAL_Delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0e:	f000 fb1d 	bl	800104c <HAL_Delay>
 	}
 }
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000070 	.word	0x20000070
 8000a20:	20000040 	.word	0x20000040
 8000a24:	2000003c 	.word	0x2000003c
 8000a28:	20000028 	.word	0x20000028

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	insertion_sort(members, length);
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <main+0x3c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <main+0x40>)
 8000a38:	f7ff ff6e 	bl	8000918 <insertion_sort>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fa94 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f816 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f8f8 	bl	8000c38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a48:	f000 f8cc 	bl	8000be4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a4c:	f000 f87c 	bl	8000b48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lcd_initialize();
 8000a50:	f7ff ff00 	bl	8000854 <lcd_initialize>
  lcd_backlight_ON();
 8000a54:	f7ff ff54 	bl	8000900 <lcd_backlight_ON>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  lcd_println(members[0], 1);
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <main+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe74 	bl	800074c <lcd_println>
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <main+0x38>
 8000a68:	2000003c 	.word	0x2000003c
 8000a6c:	20000028 	.word	0x20000028

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f8ea 	bl	8002c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000abc:	4a21      	ldr	r2, [pc, #132]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fd7a 	bl	80015f4 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 f91d 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ffdc 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f907 	bl	8000d44 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	@ 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b6e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000b90:	f001 f9c8 	bl	8001f24 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9a:	f000 f8d3 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bac:	f001 faf9 	bl	80021a2 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb6:	f000 f8c5 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <MX_TIM2_Init+0x98>)
 8000bc8:	f001 fd00 	bl	80025cc <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f000 f8b7 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000070 	.word	0x20000070

08000be4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f001 fd58 	bl	80026d0 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f88d 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000b8 	.word	0x200000b8
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b38      	ldr	r3, [pc, #224]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a37      	ldr	r2, [pc, #220]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a30      	ldr	r2, [pc, #192]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a29      	ldr	r2, [pc, #164]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_GPIO_Init+0xfc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2130      	movs	r1, #48	@ 0x30
 8000cc2:	481d      	ldr	r0, [pc, #116]	@ (8000d38 <MX_GPIO_Init+0x100>)
 8000cc4:	f000 fc7c 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000cce:	481b      	ldr	r0, [pc, #108]	@ (8000d3c <MX_GPIO_Init+0x104>)
 8000cd0:	f000 fc76 	bl	80015c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <MX_GPIO_Init+0x108>)
 8000cec:	f000 fae4 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000cf0:	2330      	movs	r3, #48	@ 0x30
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <MX_GPIO_Init+0x100>)
 8000d08:	f000 fad6 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000d0c:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000d10:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_GPIO_Init+0x104>)
 8000d26:	f000 fac7 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	@ 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020800 	.word	0x40020800

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f000 fa50 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db0:	d115      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f000 fa39 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f000 fa52 	bl	8001282 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_UART_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_UART_MspInit+0x8c>)
 8000e62:	f000 fa29 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	@ 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f89b 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f001 f86e 	bl	8001fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000070 	.word	0x20000070

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 fe91 	bl	8002c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fd71 	bl	8000a2c <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000f58:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 8000f5c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000f60:	20000104 	.word	0x20000104

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f94f 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fed8 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f967 	bl	800129e <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe8:	f000 f92f 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000044 	.word	0x20000044
 8001004:	2000004c 	.word	0x2000004c
 8001008:	20000048 	.word	0x20000048

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000004c 	.word	0x2000004c
 8001030:	20000100 	.word	0x20000100

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000100 	.word	0x20000100

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000004c 	.word	0x2000004c

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	@ (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	@ (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff3e 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff31 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e159      	b.n	8001588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8148 	bne.w	8001582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a2 	beq.w	8001582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b57      	ldr	r3, [pc, #348]	@ (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a56      	ldr	r2, [pc, #344]	@ (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b54      	ldr	r3, [pc, #336]	@ (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_GPIO_Init+0x2ec>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a49      	ldr	r2, [pc, #292]	@ (80015a8 <HAL_GPIO_Init+0x2f0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x202>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a48      	ldr	r2, [pc, #288]	@ (80015ac <HAL_GPIO_Init+0x2f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x1fe>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a47      	ldr	r2, [pc, #284]	@ (80015b0 <HAL_GPIO_Init+0x2f8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x1fa>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a46      	ldr	r2, [pc, #280]	@ (80015b4 <HAL_GPIO_Init+0x2fc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x1f6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a45      	ldr	r2, [pc, #276]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x1f2>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	@ (80015a4 <HAL_GPIO_Init+0x2ec>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_GPIO_Init+0x304>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_GPIO_Init+0x304>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_GPIO_Init+0x304>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a24      	ldr	r2, [pc, #144]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <HAL_GPIO_Init+0x304>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <HAL_GPIO_Init+0x304>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f aea2 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e267      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d075      	beq.n	80016fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001612:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161e:	4b85      	ldr	r3, [pc, #532]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001626:	2b08      	cmp	r3, #8
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b82      	ldr	r3, [pc, #520]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b7e      	ldr	r3, [pc, #504]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d157      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e242      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b70      	ldr	r3, [pc, #448]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6f      	ldr	r2, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6d      	ldr	r3, [pc, #436]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6c      	ldr	r2, [pc, #432]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 800168c:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a68      	ldr	r2, [pc, #416]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcc2 	bl	8001034 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcbe 	bl	8001034 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e207      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fcae 	bl	8001034 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fcaa 	bl	8001034 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b51      	ldr	r3, [pc, #324]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1c7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <HAL_RCC_OscConfig+0x244>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fc63 	bl	8001034 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fc5f 	bl	8001034 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1a8      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_OscConfig+0x244>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc42 	bl	8001034 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc3e 	bl	8001034 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e187      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_RCC_OscConfig+0x248>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fc22 	bl	8001034 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc1e 	bl	8001034 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e167      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x200>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x248>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fc0b 	bl	8001034 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fc07 	bl	8001034 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e150      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b88      	ldr	r3, [pc, #544]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b81      	ldr	r3, [pc, #516]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a7c      	ldr	r2, [pc, #496]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b74      	ldr	r3, [pc, #464]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fbc7 	bl	8001034 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff fbc3 	bl	8001034 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e10c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x2ea>
 80018d0:	4b64      	ldr	r3, [pc, #400]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a63      	ldr	r2, [pc, #396]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x30c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 8001900:	4b58      	ldr	r3, [pc, #352]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	4a57      	ldr	r2, [pc, #348]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	@ 0x70
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001910:	4a54      	ldr	r2, [pc, #336]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fb88 	bl	8001034 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff fb84 	bl	8001034 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0cb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x334>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fb72 	bl	8001034 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff fb6e 	bl	8001034 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0b5      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a38      	ldr	r2, [pc, #224]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d05c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d141      	bne.n	8001a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb42 	bl	8001034 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fb3e 	bl	8001034 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e087      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	491b      	ldr	r1, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb17 	bl	8001034 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff fb13 	bl	8001034 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e05c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x416>
 8001a28:	e054      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb00 	bl	8001034 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fafc 	bl	8001034 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e045      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
 8001a56:	e03d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e038      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d028      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d11a      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0cc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b68      	ldr	r3, [pc, #416]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d90c      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a52      	ldr	r2, [pc, #328]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d044      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e067      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4934      	ldr	r1, [pc, #208]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fa2e 	bl	8001034 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff fa2a 	bl	8001034 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e04f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d20c      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f98e 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08002d08 	.word	0x08002d08
 8001ca8:	20000044 	.word	0x20000044
 8001cac:	20000048 	.word	0x20000048

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b094      	sub	sp, #80	@ 0x50
 8001cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4b79      	ldr	r3, [pc, #484]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	f200 80e1 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce2:	e0db      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce8:	e0db      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cee:	e0d8      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0159      	lsls	r1, r3, #5
 8001d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d34:	0150      	lsls	r0, r2, #5
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	1a51      	subs	r1, r2, r1
 8001d3e:	6139      	str	r1, [r7, #16]
 8001d40:	4629      	mov	r1, r5
 8001d42:	eb63 0301 	sbc.w	r3, r3, r1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d54:	4659      	mov	r1, fp
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	4651      	mov	r1, sl
 8001d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5e:	4651      	mov	r1, sl
 8001d60:	018a      	lsls	r2, r1, #6
 8001d62:	4651      	mov	r1, sl
 8001d64:	ebb2 0801 	subs.w	r8, r2, r1
 8001d68:	4659      	mov	r1, fp
 8001d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d82:	4690      	mov	r8, r2
 8001d84:	4699      	mov	r9, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	eb18 0303 	adds.w	r3, r8, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	462b      	mov	r3, r5
 8001d90:	eb49 0303 	adc.w	r3, r9, r3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da2:	4629      	mov	r1, r5
 8001da4:	024b      	lsls	r3, r1, #9
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dac:	4621      	mov	r1, r4
 8001dae:	024a      	lsls	r2, r1, #9
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db6:	2200      	movs	r2, #0
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc0:	f7fe fa1a 	bl	80001f8 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dcc:	e058      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4611      	mov	r1, r2
 8001dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de8:	4642      	mov	r2, r8
 8001dea:	464b      	mov	r3, r9
 8001dec:	f04f 0000 	mov.w	r0, #0
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	0159      	lsls	r1, r3, #5
 8001df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfa:	0150      	lsls	r0, r2, #5
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4641      	mov	r1, r8
 8001e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e20:	ebb2 040a 	subs.w	r4, r2, sl
 8001e24:	eb63 050b 	sbc.w	r5, r3, fp
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	00eb      	lsls	r3, r5, #3
 8001e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e36:	00e2      	lsls	r2, r4, #3
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	18e3      	adds	r3, r4, r3
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	464b      	mov	r3, r9
 8001e44:	eb45 0303 	adc.w	r3, r5, r3
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	61fa      	str	r2, [r7, #28]
 8001e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e74:	f7fe f9c0 	bl	80001f8 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3750      	adds	r7, #80	@ 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000044 	.word	0x20000044

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08002d18 	.word	0x08002d18

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08002d18 	.word	0x08002d18

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e041      	b.n	8001fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe ff28 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 fa0c 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01b      	beq.n	8002026 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0202 	mvn.w	r2, #2
 8001ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f999 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002012:	e005      	b.n	8002020 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f98b 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f99c 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01b      	beq.n	8002072 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0204 	mvn.w	r2, #4
 8002042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f973 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 800205e:	e005      	b.n	800206c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f965 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f976 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01b      	beq.n	80020be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0208 	mvn.w	r2, #8
 800208e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2204      	movs	r2, #4
 8002094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f94d 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80020aa:	e005      	b.n	80020b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f93f 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f950 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01b      	beq.n	800210a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0210 	mvn.w	r2, #16
 80020da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2208      	movs	r2, #8
 80020e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f927 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80020f6:	e005      	b.n	8002104 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f919 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f92a 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0201 	mvn.w	r2, #1
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fc37 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800214a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fab5 	bl	80026bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00c      	beq.n	8002176 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800216e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8fb 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0220 	mvn.w	r2, #32
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa87 	bl	80026a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_TIM_ConfigClockSource+0x1c>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0b4      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x186>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f6:	d03e      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xd4>
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021fc:	f200 8087 	bhi.w	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002204:	f000 8086 	beq.w	8002314 <HAL_TIM_ConfigClockSource+0x172>
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220c:	d87f      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800220e:	2b70      	cmp	r3, #112	@ 0x70
 8002210:	d01a      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xa6>
 8002212:	2b70      	cmp	r3, #112	@ 0x70
 8002214:	d87b      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002216:	2b60      	cmp	r3, #96	@ 0x60
 8002218:	d050      	beq.n	80022bc <HAL_TIM_ConfigClockSource+0x11a>
 800221a:	2b60      	cmp	r3, #96	@ 0x60
 800221c:	d877      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800221e:	2b50      	cmp	r3, #80	@ 0x50
 8002220:	d03c      	beq.n	800229c <HAL_TIM_ConfigClockSource+0xfa>
 8002222:	2b50      	cmp	r3, #80	@ 0x50
 8002224:	d873      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002226:	2b40      	cmp	r3, #64	@ 0x40
 8002228:	d058      	beq.n	80022dc <HAL_TIM_ConfigClockSource+0x13a>
 800222a:	2b40      	cmp	r3, #64	@ 0x40
 800222c:	d86f      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800222e:	2b30      	cmp	r3, #48	@ 0x30
 8002230:	d064      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002232:	2b30      	cmp	r3, #48	@ 0x30
 8002234:	d86b      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002236:	2b20      	cmp	r3, #32
 8002238:	d060      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 800223a:	2b20      	cmp	r3, #32
 800223c:	d867      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d05c      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002242:	2b10      	cmp	r3, #16
 8002244:	d05a      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002246:	e062      	b.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002258:	f000 f998 	bl	800258c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800226a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e04f      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002286:	f000 f981 	bl	800258c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002298:	609a      	str	r2, [r3, #8]
      break;
 800229a:	e03c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a8:	461a      	mov	r2, r3
 80022aa:	f000 f8f5 	bl	8002498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2150      	movs	r1, #80	@ 0x50
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f94e 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 80022ba:	e02c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c8:	461a      	mov	r2, r3
 80022ca:	f000 f914 	bl	80024f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2160      	movs	r1, #96	@ 0x60
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f93e 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 80022da:	e01c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e8:	461a      	mov	r2, r3
 80022ea:	f000 f8d5 	bl	8002498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	@ 0x40
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f92e 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 f925 	bl	8002556 <TIM_ITRx_SetConfig>
      break;
 800230c:	e003      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      break;
 8002312:	e000      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3a      	ldr	r2, [pc, #232]	@ (800247c <TIM_Base_SetConfig+0xfc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00f      	beq.n	80023b8 <TIM_Base_SetConfig+0x38>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239e:	d00b      	beq.n	80023b8 <TIM_Base_SetConfig+0x38>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a37      	ldr	r2, [pc, #220]	@ (8002480 <TIM_Base_SetConfig+0x100>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <TIM_Base_SetConfig+0x38>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a36      	ldr	r2, [pc, #216]	@ (8002484 <TIM_Base_SetConfig+0x104>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <TIM_Base_SetConfig+0x38>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <TIM_Base_SetConfig+0x108>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <TIM_Base_SetConfig+0xfc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01b      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d017      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a28      	ldr	r2, [pc, #160]	@ (8002480 <TIM_Base_SetConfig+0x100>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <TIM_Base_SetConfig+0x104>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00f      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a26      	ldr	r2, [pc, #152]	@ (8002488 <TIM_Base_SetConfig+0x108>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00b      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a25      	ldr	r2, [pc, #148]	@ (800248c <TIM_Base_SetConfig+0x10c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a24      	ldr	r2, [pc, #144]	@ (8002490 <TIM_Base_SetConfig+0x110>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x8a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <TIM_Base_SetConfig+0x114>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0e      	ldr	r2, [pc, #56]	@ (800247c <TIM_Base_SetConfig+0xfc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d103      	bne.n	8002450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f023 0201 	bic.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
  }
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40014000 	.word	0x40014000
 8002490:	40014400 	.word	0x40014400
 8002494:	40014800 	.word	0x40014800

08002498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0201 	bic.w	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 030a 	bic.w	r3, r3, #10
 80024d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b087      	sub	sp, #28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 0210 	bic.w	r2, r3, #16
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	031b      	lsls	r3, r3, #12
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002532:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	f043 0307 	orr.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	021a      	lsls	r2, r3, #8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e050      	b.n	8002686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002630:	d013      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a15      	ldr	r2, [pc, #84]	@ (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10c      	bne.n	8002674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4313      	orrs	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800
 80026a0:	40000c00 	.word	0x40000c00
 80026a4:	40014000 	.word	0x40014000

080026a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e042      	b.n	8002768 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fb78 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f82b 	bl	8002770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002774:	b0c0      	sub	sp, #256	@ 0x100
 8002776:	af00      	add	r7, sp, #0
 8002778:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278c:	68d9      	ldr	r1, [r3, #12]
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	ea40 0301 	orr.w	r3, r0, r1
 8002798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027c8:	f021 010c 	bic.w	r1, r1, #12
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027d6:	430b      	orrs	r3, r1
 80027d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ea:	6999      	ldr	r1, [r3, #24]
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	ea40 0301 	orr.w	r3, r0, r1
 80027f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b8f      	ldr	r3, [pc, #572]	@ (8002a3c <UART_SetConfig+0x2cc>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d005      	beq.n	8002810 <UART_SetConfig+0xa0>
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b8d      	ldr	r3, [pc, #564]	@ (8002a40 <UART_SetConfig+0x2d0>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d104      	bne.n	800281a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002810:	f7ff fb74 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002814:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002818:	e003      	b.n	8002822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800281a:	f7ff fb5b 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 800281e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800282c:	f040 810c 	bne.w	8002a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002834:	2200      	movs	r2, #0
 8002836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800283a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800283e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002842:	4622      	mov	r2, r4
 8002844:	462b      	mov	r3, r5
 8002846:	1891      	adds	r1, r2, r2
 8002848:	65b9      	str	r1, [r7, #88]	@ 0x58
 800284a:	415b      	adcs	r3, r3
 800284c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800284e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002852:	4621      	mov	r1, r4
 8002854:	eb12 0801 	adds.w	r8, r2, r1
 8002858:	4629      	mov	r1, r5
 800285a:	eb43 0901 	adc.w	r9, r3, r1
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002872:	4690      	mov	r8, r2
 8002874:	4699      	mov	r9, r3
 8002876:	4623      	mov	r3, r4
 8002878:	eb18 0303 	adds.w	r3, r8, r3
 800287c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002880:	462b      	mov	r3, r5
 8002882:	eb49 0303 	adc.w	r3, r9, r3
 8002886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002896:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800289a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800289e:	460b      	mov	r3, r1
 80028a0:	18db      	adds	r3, r3, r3
 80028a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80028a4:	4613      	mov	r3, r2
 80028a6:	eb42 0303 	adc.w	r3, r2, r3
 80028aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80028ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028b4:	f7fd fca0 	bl	80001f8 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b61      	ldr	r3, [pc, #388]	@ (8002a44 <UART_SetConfig+0x2d4>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	011c      	lsls	r4, r3, #4
 80028c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	1891      	adds	r1, r2, r2
 80028de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028e0:	415b      	adcs	r3, r3
 80028e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028e8:	4641      	mov	r1, r8
 80028ea:	eb12 0a01 	adds.w	sl, r2, r1
 80028ee:	4649      	mov	r1, r9
 80028f0:	eb43 0b01 	adc.w	fp, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002908:	4692      	mov	sl, r2
 800290a:	469b      	mov	fp, r3
 800290c:	4643      	mov	r3, r8
 800290e:	eb1a 0303 	adds.w	r3, sl, r3
 8002912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002916:	464b      	mov	r3, r9
 8002918:	eb4b 0303 	adc.w	r3, fp, r3
 800291c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800292c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002934:	460b      	mov	r3, r1
 8002936:	18db      	adds	r3, r3, r3
 8002938:	643b      	str	r3, [r7, #64]	@ 0x40
 800293a:	4613      	mov	r3, r2
 800293c:	eb42 0303 	adc.w	r3, r2, r3
 8002940:	647b      	str	r3, [r7, #68]	@ 0x44
 8002942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800294a:	f7fd fc55 	bl	80001f8 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4611      	mov	r1, r2
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <UART_SetConfig+0x2d4>)
 8002956:	fba3 2301 	umull	r2, r3, r3, r1
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2264      	movs	r2, #100	@ 0x64
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	1acb      	subs	r3, r1, r3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <UART_SetConfig+0x2d4>)
 800296c:	fba3 2302 	umull	r2, r3, r3, r2
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002978:	441c      	add	r4, r3
 800297a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800297e:	2200      	movs	r2, #0
 8002980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002984:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	1891      	adds	r1, r2, r2
 8002992:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002994:	415b      	adcs	r3, r3
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800299c:	4641      	mov	r1, r8
 800299e:	1851      	adds	r1, r2, r1
 80029a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80029a2:	4649      	mov	r1, r9
 80029a4:	414b      	adcs	r3, r1
 80029a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029b4:	4659      	mov	r1, fp
 80029b6:	00cb      	lsls	r3, r1, #3
 80029b8:	4651      	mov	r1, sl
 80029ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029be:	4651      	mov	r1, sl
 80029c0:	00ca      	lsls	r2, r1, #3
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	4642      	mov	r2, r8
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029d0:	464b      	mov	r3, r9
 80029d2:	460a      	mov	r2, r1
 80029d4:	eb42 0303 	adc.w	r3, r2, r3
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029f0:	460b      	mov	r3, r1
 80029f2:	18db      	adds	r3, r3, r3
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029f6:	4613      	mov	r3, r2
 80029f8:	eb42 0303 	adc.w	r3, r2, r3
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a06:	f7fd fbf7 	bl	80001f8 <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <UART_SetConfig+0x2d4>)
 8002a10:	fba3 1302 	umull	r1, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2164      	movs	r1, #100	@ 0x64
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3332      	adds	r3, #50	@ 0x32
 8002a22:	4a08      	ldr	r2, [pc, #32]	@ (8002a44 <UART_SetConfig+0x2d4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4422      	add	r2, r4
 8002a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a38:	e106      	b.n	8002c48 <UART_SetConfig+0x4d8>
 8002a3a:	bf00      	nop
 8002a3c:	40011000 	.word	0x40011000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a5a:	4642      	mov	r2, r8
 8002a5c:	464b      	mov	r3, r9
 8002a5e:	1891      	adds	r1, r2, r2
 8002a60:	6239      	str	r1, [r7, #32]
 8002a62:	415b      	adcs	r3, r3
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	1854      	adds	r4, r2, r1
 8002a6e:	4649      	mov	r1, r9
 8002a70:	eb43 0501 	adc.w	r5, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	00eb      	lsls	r3, r5, #3
 8002a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4643      	mov	r3, r8
 8002a8a:	18e3      	adds	r3, r4, r3
 8002a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a90:	464b      	mov	r3, r9
 8002a92:	eb45 0303 	adc.w	r3, r5, r3
 8002a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002aa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	008b      	lsls	r3, r1, #2
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	008a      	lsls	r2, r1, #2
 8002ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ac8:	f7fd fb96 	bl	80001f8 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4b60      	ldr	r3, [pc, #384]	@ (8002c54 <UART_SetConfig+0x4e4>)
 8002ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	011c      	lsls	r4, r3, #4
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ae4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002aec:	4642      	mov	r2, r8
 8002aee:	464b      	mov	r3, r9
 8002af0:	1891      	adds	r1, r2, r2
 8002af2:	61b9      	str	r1, [r7, #24]
 8002af4:	415b      	adcs	r3, r3
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afc:	4641      	mov	r1, r8
 8002afe:	1851      	adds	r1, r2, r1
 8002b00:	6139      	str	r1, [r7, #16]
 8002b02:	4649      	mov	r1, r9
 8002b04:	414b      	adcs	r3, r1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b14:	4659      	mov	r1, fp
 8002b16:	00cb      	lsls	r3, r1, #3
 8002b18:	4651      	mov	r1, sl
 8002b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1e:	4651      	mov	r1, sl
 8002b20:	00ca      	lsls	r2, r1, #3
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	4642      	mov	r2, r8
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b30:	464b      	mov	r3, r9
 8002b32:	460a      	mov	r2, r1
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b54:	4649      	mov	r1, r9
 8002b56:	008b      	lsls	r3, r1, #2
 8002b58:	4641      	mov	r1, r8
 8002b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b5e:	4641      	mov	r1, r8
 8002b60:	008a      	lsls	r2, r1, #2
 8002b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b66:	f7fd fb47 	bl	80001f8 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <UART_SetConfig+0x4e4>)
 8002b72:	fba3 2301 	umull	r2, r3, r3, r1
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2264      	movs	r2, #100	@ 0x64
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	1acb      	subs	r3, r1, r3
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3332      	adds	r3, #50	@ 0x32
 8002b84:	4a33      	ldr	r2, [pc, #204]	@ (8002c54 <UART_SetConfig+0x4e4>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b90:	441c      	add	r4, r3
 8002b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b96:	2200      	movs	r2, #0
 8002b98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	1851      	adds	r1, r2, r1
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	414b      	adcs	r3, r1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	00cb      	lsls	r3, r1, #3
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	00ca      	lsls	r2, r1, #3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002be2:	464b      	mov	r3, r9
 8002be4:	460a      	mov	r2, r1
 8002be6:	eb42 0303 	adc.w	r3, r2, r3
 8002bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c04:	4649      	mov	r1, r9
 8002c06:	008b      	lsls	r3, r1, #2
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c0e:	4641      	mov	r1, r8
 8002c10:	008a      	lsls	r2, r1, #2
 8002c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c16:	f7fd faef 	bl	80001f8 <__aeabi_uldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <UART_SetConfig+0x4e4>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	@ 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	@ 0x32
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <UART_SetConfig+0x4e4>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4422      	add	r2, r4
 8002c46:	609a      	str	r2, [r3, #8]
}
 8002c48:	bf00      	nop
 8002c4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c54:	51eb851f 	.word	0x51eb851f

08002c58 <memset>:
 8002c58:	4402      	add	r2, r0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d100      	bne.n	8002c62 <memset+0xa>
 8002c60:	4770      	bx	lr
 8002c62:	f803 1b01 	strb.w	r1, [r3], #1
 8002c66:	e7f9      	b.n	8002c5c <memset+0x4>

08002c68 <__libc_init_array>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ca0 <__libc_init_array+0x38>)
 8002c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ca4 <__libc_init_array+0x3c>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	2600      	movs	r6, #0
 8002c74:	42a6      	cmp	r6, r4
 8002c76:	d109      	bne.n	8002c8c <__libc_init_array+0x24>
 8002c78:	4d0b      	ldr	r5, [pc, #44]	@ (8002ca8 <__libc_init_array+0x40>)
 8002c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8002cac <__libc_init_array+0x44>)
 8002c7c:	f000 f818 	bl	8002cb0 <_init>
 8002c80:	1b64      	subs	r4, r4, r5
 8002c82:	10a4      	asrs	r4, r4, #2
 8002c84:	2600      	movs	r6, #0
 8002c86:	42a6      	cmp	r6, r4
 8002c88:	d105      	bne.n	8002c96 <__libc_init_array+0x2e>
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c90:	4798      	blx	r3
 8002c92:	3601      	adds	r6, #1
 8002c94:	e7ee      	b.n	8002c74 <__libc_init_array+0xc>
 8002c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9a:	4798      	blx	r3
 8002c9c:	3601      	adds	r6, #1
 8002c9e:	e7f2      	b.n	8002c86 <__libc_init_array+0x1e>
 8002ca0:	08002d28 	.word	0x08002d28
 8002ca4:	08002d28 	.word	0x08002d28
 8002ca8:	08002d28 	.word	0x08002d28
 8002cac:	08002d2c 	.word	0x08002d2c

08002cb0 <_init>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	bf00      	nop
 8002cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb6:	bc08      	pop	{r3}
 8002cb8:	469e      	mov	lr, r3
 8002cba:	4770      	bx	lr

08002cbc <_fini>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

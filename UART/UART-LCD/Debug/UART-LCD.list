
UART-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000220c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f8  080023f8  0000404c  2**0
                  CONTENTS
  4 .ARM          00000008  080023f8  080023f8  000033f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002400  08002400  0000404c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002400  08002400  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002404  08002404  00003404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08002408  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000004c  08002454  0000404c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002454  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007889  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  0000b905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000ce00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000530  00000000  00000000  0000d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015709  00000000  00000000  0000da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e75  00000000  00000000  00023109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084daf  00000000  00000000  0002af7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afd2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  000afd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b1838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000004c 	.word	0x2000004c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002388 	.word	0x08002388

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000050 	.word	0x20000050
 80001d0:	08002388 	.word	0x08002388

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800020c:	f000 b96a 	b.w	80004e4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004ec:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <DWT_Delay_Init+0x58>)
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000502:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <DWT_Delay_Init+0x5c>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000522:	bf00      	nop
    __ASM volatile ("NOP");
 8000524:	bf00      	nop
    __ASM volatile ("NOP");
 8000526:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <DWT_Delay_Init+0x5c>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000530:	2300      	movs	r3, #0
 8000532:	e000      	b.n	8000536 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000534:	2301      	movs	r3, #1
    }
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000edf0 	.word	0xe000edf0
 8000544:	e0001000 	.word	0xe0001000

08000548 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <DWT_Delay_us+0x48>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000556:	f001 fbf3 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <DWT_Delay_us+0x4c>)
 800055e:	fba2 2303 	umull	r2, r3, r2, r3
 8000562:	0c9b      	lsrs	r3, r3, #18
 8000564:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	fb02 f303 	mul.w	r3, r2, r3
 800056e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000570:	bf00      	nop
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <DWT_Delay_us+0x48>)
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	1ad2      	subs	r2, r2, r3
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1acb      	subs	r3, r1, r3
 8000580:	429a      	cmp	r2, r3
 8000582:	d3f6      	bcc.n	8000572 <DWT_Delay_us+0x2a>
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	e0001000 	.word	0xe0001000
 8000594:	431bde83 	.word	0x431bde83

08000598 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <lcd_enable+0x28>)
 80005a2:	f000 ff4f 	bl	8001444 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005a6:	2032      	movs	r0, #50	@ 0x32
 80005a8:	f7ff ffce 	bl	8000548 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2102      	movs	r1, #2
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <lcd_enable+0x28>)
 80005b2:	f000 ff47 	bl	8001444 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80005b6:	2032      	movs	r0, #50	@ 0x32
 80005b8:	f7ff ffc6 	bl	8000548 <DWT_Delay_us>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020400 	.word	0x40020400

080005c4 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <lcd_write4+0x74>)
 80005de:	f000 ff31 	bl	8001444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	105b      	asrs	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <lcd_write4+0x74>)
 80005f6:	f000 ff25 	bl	8001444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	109b      	asrs	r3, r3, #2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060c:	480a      	ldr	r0, [pc, #40]	@ (8000638 <lcd_write4+0x74>)
 800060e:	f000 ff19 	bl	8001444 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	10db      	asrs	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <lcd_write4+0x74>)
 8000626:	f000 ff0d 	bl	8001444 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 800062a:	f7ff ffb5 	bl	8000598 <lcd_enable>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400

0800063c <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffb9 	bl	80005c4 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffb5 	bl	80005c4 <lcd_write4>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800066e:	2200      	movs	r2, #0
 8000670:	2104      	movs	r1, #4
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <lcd_command+0x24>)
 8000674:	f000 fee6 	bl	8001444 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffde 	bl	800063c <lcd_write>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020400 	.word	0x40020400

0800068c <lcd_clear>:

void lcd_clear(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ffe7 	bl	8000664 <lcd_command>
	DWT_Delay_us(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800069a:	f7ff ff55 	bl	8000548 <DWT_Delay_us>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80006ae:	2201      	movs	r2, #1
 80006b0:	2104      	movs	r1, #4
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <lcd_data+0x24>)
 80006b4:	f000 fec6 	bl	8001444 <HAL_GPIO_WritePin>
	lcd_write(byte);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffbe 	bl	800063c <lcd_write>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400

080006cc <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	3201      	adds	r2, #1
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80006ea:	dc10      	bgt.n	800070e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	461a      	mov	r2, r3
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000704:	b25b      	sxtb	r3, r3
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffab 	bl	8000664 <lcd_command>
	}
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fd62 	bl	80001e8 <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8000728:	e006      	b.n	8000738 <lcd_print+0x22>
		lcd_data(*string++);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffb6 	bl	80006a4 <lcd_data>
	while (size--){
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	60fa      	str	r2, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f3      	bne.n	800072a <lcd_print+0x14>
	}
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_println>:

void lcd_println(char string[], uint8_t row){
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <lcd_println+0x6c>)
 800075a:	f107 0408 	add.w	r4, r7, #8
 800075e:	461d      	mov	r5, r3
 8000760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff fd3d 	bl	80001e8 <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	2b10      	cmp	r3, #16
 8000776:	dd0c      	ble.n	8000792 <lcd_println+0x46>
		size = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	61fb      	str	r3, [r7, #28]

	while (size--){
 800077c:	e009      	b.n	8000792 <lcd_println+0x46>
		line[size] = string[size];
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	f107 0208 	add.w	r2, r7, #8
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	while (size--){
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	61fa      	str	r2, [r7, #28]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f0      	bne.n	800077e <lcd_println+0x32>
	}
	setCursor(0, row);
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4619      	mov	r1, r3
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff93 	bl	80006cc <setCursor>
	lcd_print(line);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffb3 	bl	8000716 <lcd_print>
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	080023a0 	.word	0x080023a0

080007bc <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff40 	bl	8000664 <lcd_command>
	for (int i = 0; i<8; i++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e009      	b.n	80007fe <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff56 	bl	80006a4 <lcd_data>
	for (int i = 0; i<8; i++){
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddf2      	ble.n	80007ea <writeCustomChar+0x2e>
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8000814:	490a      	ldr	r1, [pc, #40]	@ (8000840 <loadCustomChars+0x30>)
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ffd0 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800081c:	4909      	ldr	r1, [pc, #36]	@ (8000844 <loadCustomChars+0x34>)
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff ffcc 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <loadCustomChars+0x38>)
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ffc8 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 800082c:	4907      	ldr	r1, [pc, #28]	@ (800084c <loadCustomChars+0x3c>)
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff ffc4 	bl	80007bc <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8000834:	4906      	ldr	r1, [pc, #24]	@ (8000850 <loadCustomChars+0x40>)
 8000836:	2005      	movs	r0, #5
 8000838:	f7ff ffc0 	bl	80007bc <writeCustomChar>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000010 	.word	0x20000010
 800084c:	20000018 	.word	0x20000018
 8000850:	20000020 	.word	0x20000020

08000854 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8000858:	2032      	movs	r0, #50	@ 0x32
 800085a:	f000 fb65 	bl	8000f28 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2104      	movs	r1, #4
 8000862:	4824      	ldr	r0, [pc, #144]	@ (80008f4 <lcd_initialize+0xa0>)
 8000864:	f000 fdee 	bl	8001444 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2102      	movs	r1, #2
 800086c:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <lcd_initialize+0xa0>)
 800086e:	f000 fde9 	bl	8001444 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8000872:	f7ff fe39 	bl	80004e8 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fea4 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 800087c:	2005      	movs	r0, #5
 800087e:	f000 fb53 	bl	8000f28 <HAL_Delay>
	lcd_write4(0x03);
 8000882:	2003      	movs	r0, #3
 8000884:	f7ff fe9e 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 8000888:	2005      	movs	r0, #5
 800088a:	f000 fb4d 	bl	8000f28 <HAL_Delay>
	lcd_write4(0x03);
 800088e:	2003      	movs	r0, #3
 8000890:	f7ff fe98 	bl	80005c4 <lcd_write4>
	HAL_Delay(5);
 8000894:	2005      	movs	r0, #5
 8000896:	f000 fb47 	bl	8000f28 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff fe92 	bl	80005c4 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80008a0:	2028      	movs	r0, #40	@ 0x28
 80008a2:	f7ff fecb 	bl	800063c <lcd_write>
	HAL_Delay(5);
 80008a6:	2005      	movs	r0, #5
 80008a8:	f000 fb3e 	bl	8000f28 <HAL_Delay>
	lcd_write(0x08); //display off;
 80008ac:	2008      	movs	r0, #8
 80008ae:	f7ff fec5 	bl	800063c <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fec2 	bl	800063c <lcd_write>
	HAL_Delay(5);
 80008b8:	2005      	movs	r0, #5
 80008ba:	f000 fb35 	bl	8000f28 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 80008be:	2006      	movs	r0, #6
 80008c0:	f7ff febc 	bl	800063c <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <lcd_initialize+0xa4>)
 80008ca:	f000 fdbb 	bl	8001444 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <lcd_initialize+0xa8>)
 80008d0:	220c      	movs	r2, #12
 80008d2:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <lcd_initialize+0xa8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff feaf 	bl	800063c <lcd_write>
	lcd_write(0x02); //go home
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff feac 	bl	800063c <lcd_write>
	HAL_Delay(2);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fb1f 	bl	8000f28 <HAL_Delay>
	loadCustomChars();
 80008ea:	f7ff ff91 	bl	8000810 <loadCustomChars>

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020000 	.word	0x40020000
 80008fc:	20000068 	.word	0x20000068

08000900 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2110      	movs	r1, #16
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <lcd_backlight_ON+0x14>)
 800090a:	f000 fd9b 	bl	8001444 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40020000 	.word	0x40020000

08000918 <insertion_sort>:
 char *members[] = {"Riccardo","Alessio", "Sofia", "Anna", "Emma"};

 int length = sizeof(members)/sizeof(char*);

 void insertion_sort(char* arr[], int n)
 {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
     for (int i = 1; i < n; ++i) {
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e030      	b.n	800098a <insertion_sort+0x72>
         char* key = arr[i];
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	60fb      	str	r3, [r7, #12]
         int j = i - 1;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3b01      	subs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]

         /* Move elements of arr[0..i-1], that are
            greater than key, to one position ahead
            of their current position */
         while (j >= 0 && strcmp(arr[j], key)>0) {
 800093a:	e00d      	b.n	8000958 <insertion_sort+0x40>
             arr[j + 1] = arr[j];
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	441a      	add	r2, r3
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	3301      	adds	r3, #1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	440b      	add	r3, r1
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	601a      	str	r2, [r3, #0]
             j = j - 1;
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3b01      	subs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
         while (j >= 0 && strcmp(arr[j], key)>0) {
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <insertion_sort+0x5e>
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68f9      	ldr	r1, [r7, #12]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc32 	bl	80001d4 <strcmp>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	dce2      	bgt.n	800093c <insertion_sort+0x24>
         }
         arr[j + 1] = key;
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	3301      	adds	r3, #1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	601a      	str	r2, [r3, #0]
     for (int i = 1; i < n; ++i) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbca      	blt.n	8000928 <insertion_sort+0x10>
     }
 }
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	insertion_sort(members, length);
 80009a2:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <main+0xa4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	4826      	ldr	r0, [pc, #152]	@ (8000a44 <main+0xa8>)
 80009aa:	f7ff ffb5 	bl	8000918 <insertion_sort>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 fa49 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f849 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f000 f8dd 	bl	8000b74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ba:	f000 f8b1 	bl	8000b20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_initialize();
 80009be:	f7ff ff49 	bl	8000854 <lcd_initialize>
  lcd_backlight_ON();
 80009c2:	f7ff ff9d 	bl	8000900 <lcd_backlight_ON>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int counter = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
  lcd_println(members[0], 1);
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <main+0xa8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2101      	movs	r1, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff febb 	bl	800074c <lcd_println>
  HAL_Delay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009da:	f000 faa5 	bl	8000f28 <HAL_Delay>
  while (1)
  {

	  lcd_clear();
 80009de:	f7ff fe55 	bl	800068c <lcd_clear>
	  lcd_println(members[(counter + 1) % length], 1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <main+0xa4>)
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ee:	fb01 f202 	mul.w	r2, r1, r2
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <main+0xa8>)
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fea5 	bl	800074c <lcd_println>
	  lcd_println(members[(counter ) % length], 0);
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <main+0xa4>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a0c:	fb01 f202 	mul.w	r2, r1, r2
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <main+0xa8>)
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe96 	bl	800074c <lcd_println>
	  counter = (counter + 1)%length;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <main+0xa4>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a2c:	fb01 f202 	mul.w	r2, r1, r2
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 8000a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a38:	f000 fa76 	bl	8000f28 <HAL_Delay>
	  lcd_clear();
 8000a3c:	bf00      	nop
 8000a3e:	e7ce      	b.n	80009de <main+0x42>
 8000a40:	2000003c 	.word	0x2000003c
 8000a44:	20000028 	.word	0x20000028

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	@ 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	@ 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fc6a 	bl	8002330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <SystemClock_Config+0xd0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <SystemClock_Config+0xd0>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <SystemClock_Config+0xd0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a94:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <SystemClock_Config+0xd4>)
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <SystemClock_Config+0xd4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000abc:	2310      	movs	r3, #16
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ac4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aca:	2307      	movs	r3, #7
 8000acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fcd0 	bl	8001478 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ade:	f000 f8cf 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2102      	movs	r1, #2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 ff32 	bl	8001968 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b0a:	f000 f8b9 	bl	8000c80 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	@ 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <MX_USART2_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b58:	f001 f926 	bl	8001da8 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f88d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000006c 	.word	0x2000006c
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b38      	ldr	r3, [pc, #224]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a37      	ldr	r2, [pc, #220]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a30      	ldr	r2, [pc, #192]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a29      	ldr	r2, [pc, #164]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0xfc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2130      	movs	r1, #48	@ 0x30
 8000bfe:	481d      	ldr	r0, [pc, #116]	@ (8000c74 <MX_GPIO_Init+0x100>)
 8000c00:	f000 fc20 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c04:	2200      	movs	r2, #0
 8000c06:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000c0a:	481b      	ldr	r0, [pc, #108]	@ (8000c78 <MX_GPIO_Init+0x104>)
 8000c0c:	f000 fc1a 	bl	8001444 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <MX_GPIO_Init+0x108>)
 8000c28:	f000 fa88 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000c2c:	2330      	movs	r3, #48	@ 0x30
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_GPIO_Init+0x100>)
 8000c44:	f000 fa7a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c48:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000c4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_GPIO_Init+0x104>)
 8000c62:	f000 fa6b 	bl	800113c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40020800 	.word	0x40020800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fa02 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d46:	2307      	movs	r3, #7
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d52:	f000 f9f3 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f891 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f001 fa8f 	bl	8002340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fdbb 	bl	800099c <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000e34:	08002408 	.word	0x08002408
  ldr r2, =_sbss
 8000e38:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000e3c:	200000b8 	.word	0x200000b8

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f931 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff ff08 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000040 	.word	0x20000040
 8000ee0:	20000048 	.word	0x20000048
 8000ee4:	20000044 	.word	0x20000044

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000048 	.word	0x20000048
 8000f0c:	200000b4 	.word	0x200000b4

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000b4 	.word	0x200000b4

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000048 	.word	0x20000048

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b57      	ldr	r3, [pc, #348]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a56      	ldr	r2, [pc, #344]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	@ (8001434 <HAL_GPIO_Init+0x2f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	@ (8001438 <HAL_GPIO_Init+0x2fc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_GPIO_Init+0x300>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_GPIO_Init+0x304>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e267      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d075      	beq.n	8001582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001496:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00c      	beq.n	80014bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4b85      	ldr	r3, [pc, #532]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b82      	ldr	r3, [pc, #520]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ba:	d10b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	4b7e      	ldr	r3, [pc, #504]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d05b      	beq.n	8001580 <HAL_RCC_OscConfig+0x108>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d157      	bne.n	8001580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e242      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014dc:	d106      	bne.n	80014ec <HAL_RCC_OscConfig+0x74>
 80014de:	4b76      	ldr	r3, [pc, #472]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a75      	ldr	r2, [pc, #468]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x98>
 80014f6:	4b70      	ldr	r3, [pc, #448]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6f      	ldr	r2, [pc, #444]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b6d      	ldr	r3, [pc, #436]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6c      	ldr	r2, [pc, #432]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xb0>
 8001510:	4b69      	ldr	r3, [pc, #420]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a68      	ldr	r2, [pc, #416]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b66      	ldr	r3, [pc, #408]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a65      	ldr	r2, [pc, #404]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcee 	bl	8000f10 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fcea 	bl	8000f10 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e207      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xc0>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fcda 	bl	8000f10 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fcd6 	bl	8000f10 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1f3      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b51      	ldr	r3, [pc, #324]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0xe8>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d063      	beq.n	8001656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158e:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d11c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d116      	bne.n	80015e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e1c7      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b3b      	ldr	r3, [pc, #236]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4937      	ldr	r1, [pc, #220]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_RCC_OscConfig+0x244>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc8f 	bl	8000f10 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc8b 	bl	8000f10 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1a8      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4925      	ldr	r1, [pc, #148]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_RCC_OscConfig+0x244>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fc6e 	bl	8000f10 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fc6a 	bl	8000f10 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e187      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d036      	beq.n	80016d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d016      	beq.n	8001698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_RCC_OscConfig+0x248>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fc4e 	bl	8000f10 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fc4a 	bl	8000f10 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e167      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_RCC_OscConfig+0x240>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x200>
 8001696:	e01b      	b.n	80016d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_OscConfig+0x248>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc37 	bl	8000f10 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	e00e      	b.n	80016c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc33 	bl	8000f10 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d907      	bls.n	80016c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e150      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470000 	.word	0x42470000
 80016c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	4b88      	ldr	r3, [pc, #544]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ea      	bne.n	80016a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8097 	beq.w	800180c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b81      	ldr	r3, [pc, #516]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b7d      	ldr	r3, [pc, #500]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a7c      	ldr	r2, [pc, #496]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b7a      	ldr	r3, [pc, #488]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b77      	ldr	r3, [pc, #476]	@ (80018ec <HAL_RCC_OscConfig+0x474>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b74      	ldr	r3, [pc, #464]	@ (80018ec <HAL_RCC_OscConfig+0x474>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a73      	ldr	r2, [pc, #460]	@ (80018ec <HAL_RCC_OscConfig+0x474>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fbf3 	bl	8000f10 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fbef 	bl	8000f10 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e10c      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_OscConfig+0x474>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x2ea>
 8001754:	4b64      	ldr	r3, [pc, #400]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a63      	ldr	r2, [pc, #396]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x324>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x30c>
 800176a:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a5e      	ldr	r2, [pc, #376]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	4a5b      	ldr	r2, [pc, #364]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x324>
 8001784:	4b58      	ldr	r3, [pc, #352]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a57      	ldr	r2, [pc, #348]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	4b55      	ldr	r3, [pc, #340]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a54      	ldr	r2, [pc, #336]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fbb4 	bl	8000f10 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fbb0 	bl	8000f10 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0cb      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	4b49      	ldr	r3, [pc, #292]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x334>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb9e 	bl	8000f10 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb9a 	bl	8000f10 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0b5      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	4b3e      	ldr	r3, [pc, #248]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	4a38      	ldr	r2, [pc, #224]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a1 	beq.w	8001958 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001816:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d05c      	beq.n	80018dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d141      	bne.n	80018ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <HAL_RCC_OscConfig+0x478>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fb6e 	bl	8000f10 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fb6a 	bl	8000f10 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e087      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	491b      	ldr	r1, [pc, #108]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x478>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fb43 	bl	8000f10 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fb3f 	bl	8000f10 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e05c      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x416>
 80018ac:	e054      	b.n	8001958 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_RCC_OscConfig+0x478>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb2c 	bl	8000f10 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fb28 	bl	8000f10 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e045      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_RCC_OscConfig+0x470>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x444>
 80018da:	e03d      	b.n	8001958 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e038      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000
 80018f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x4ec>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d028      	beq.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d121      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d11a      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001924:	4013      	ands	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800192a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192c:	4293      	cmp	r3, r2
 800192e:	d111      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0cc      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b68      	ldr	r3, [pc, #416]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d90c      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b65      	ldr	r3, [pc, #404]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a52      	ldr	r2, [pc, #328]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d044      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b3f      	ldr	r3, [pc, #252]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e06f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3b      	ldr	r3, [pc, #236]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e067      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4934      	ldr	r1, [pc, #208]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff fa5a 	bl	8000f10 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7ff fa56 	bl	8000f10 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e04f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d20c      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f9ba 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080023e0 	.word	0x080023e0
 8001b2c:	20000040 	.word	0x20000040
 8001b30:	20000044 	.word	0x20000044

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b38:	b094      	sub	sp, #80	@ 0x50
 8001b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	4b79      	ldr	r3, [pc, #484]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d00d      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x40>
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	f200 80e1 	bhi.w	8001d20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b66:	e0db      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b73      	ldr	r3, [pc, #460]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6c:	e0db      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6e:	4b73      	ldr	r3, [pc, #460]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b72:	e0d8      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b74:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ba2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	462b      	mov	r3, r5
 8001baa:	f04f 0000 	mov.w	r0, #0
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	0159      	lsls	r1, r3, #5
 8001bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb8:	0150      	lsls	r0, r2, #5
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	1a51      	subs	r1, r2, r1
 8001bc2:	6139      	str	r1, [r7, #16]
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd8:	4659      	mov	r1, fp
 8001bda:	018b      	lsls	r3, r1, #6
 8001bdc:	4651      	mov	r1, sl
 8001bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be2:	4651      	mov	r1, sl
 8001be4:	018a      	lsls	r2, r1, #6
 8001be6:	4651      	mov	r1, sl
 8001be8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bec:	4659      	mov	r1, fp
 8001bee:	eb63 0901 	sbc.w	r9, r3, r1
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c06:	4690      	mov	r8, r2
 8001c08:	4699      	mov	r9, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	eb18 0303 	adds.w	r3, r8, r3
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	462b      	mov	r3, r5
 8001c14:	eb49 0303 	adc.w	r3, r9, r3
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c26:	4629      	mov	r1, r5
 8001c28:	024b      	lsls	r3, r1, #9
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c30:	4621      	mov	r1, r4
 8001c32:	024a      	lsls	r2, r1, #9
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c44:	f7fe fad8 	bl	80001f8 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c50:	e058      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c62:	623b      	str	r3, [r7, #32]
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c6c:	4642      	mov	r2, r8
 8001c6e:	464b      	mov	r3, r9
 8001c70:	f04f 0000 	mov.w	r0, #0
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	0159      	lsls	r1, r3, #5
 8001c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7e:	0150      	lsls	r0, r2, #5
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4641      	mov	r1, r8
 8001c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	00eb      	lsls	r3, r5, #3
 8001cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cba:	00e2      	lsls	r2, r4, #3
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	18e3      	adds	r3, r4, r3
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	eb45 0303 	adc.w	r3, r5, r3
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cda:	4629      	mov	r1, r5
 8001cdc:	028b      	lsls	r3, r1, #10
 8001cde:	4621      	mov	r1, r4
 8001ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	028a      	lsls	r2, r1, #10
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	61fa      	str	r2, [r7, #28]
 8001cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf8:	f7fe fa7e 	bl	80001f8 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d1e:	e002      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3750      	adds	r7, #80	@ 0x50
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000040 	.word	0x20000040

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d5c:	f7ff fff0 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0a9b      	lsrs	r3, r3, #10
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4903      	ldr	r1, [pc, #12]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	080023f0 	.word	0x080023f0

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d84:	f7ff ffdc 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0b5b      	lsrs	r3, r3, #13
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	080023f0 	.word	0x080023f0

08001da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e042      	b.n	8001e40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ff84 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	@ 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f82b 	bl	8001e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4c:	b0c0      	sub	sp, #256	@ 0x100
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e64:	68d9      	ldr	r1, [r3, #12]
 8001e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	ea40 0301 	orr.w	r3, r0, r1
 8001e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ea0:	f021 010c 	bic.w	r1, r1, #12
 8001ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec2:	6999      	ldr	r1, [r3, #24]
 8001ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	ea40 0301 	orr.w	r3, r0, r1
 8001ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8002114 <UART_SetConfig+0x2cc>)
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d005      	beq.n	8001ee8 <UART_SetConfig+0xa0>
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8002118 <UART_SetConfig+0x2d0>)
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d104      	bne.n	8001ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ee8:	f7ff ff4a 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8001eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ef0:	e003      	b.n	8001efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ef2:	f7ff ff31 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8001ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f04:	f040 810c 	bne.w	8002120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	1891      	adds	r1, r2, r2
 8001f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f22:	415b      	adcs	r3, r3
 8001f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	eb12 0801 	adds.w	r8, r2, r1
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb43 0901 	adc.w	r9, r3, r1
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	eb18 0303 	adds.w	r3, r8, r3
 8001f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f58:	462b      	mov	r3, r5
 8001f5a:	eb49 0303 	adc.w	r3, r9, r3
 8001f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f76:	460b      	mov	r3, r1
 8001f78:	18db      	adds	r3, r3, r3
 8001f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	eb42 0303 	adc.w	r3, r2, r3
 8001f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f8c:	f7fe f934 	bl	80001f8 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4b61      	ldr	r3, [pc, #388]	@ (800211c <UART_SetConfig+0x2d4>)
 8001f96:	fba3 2302 	umull	r2, r3, r3, r2
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	011c      	lsls	r4, r3, #4
 8001f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	1891      	adds	r1, r2, r2
 8001fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb8:	415b      	adcs	r3, r3
 8001fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fe0:	4692      	mov	sl, r2
 8001fe2:	469b      	mov	fp, r3
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8001fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fee:	464b      	mov	r3, r9
 8001ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800200c:	460b      	mov	r3, r1
 800200e:	18db      	adds	r3, r3, r3
 8002010:	643b      	str	r3, [r7, #64]	@ 0x40
 8002012:	4613      	mov	r3, r2
 8002014:	eb42 0303 	adc.w	r3, r2, r3
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
 800201a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800201e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002022:	f7fe f8e9 	bl	80001f8 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4611      	mov	r1, r2
 800202c:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <UART_SetConfig+0x2d4>)
 800202e:	fba3 2301 	umull	r2, r3, r3, r1
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2264      	movs	r2, #100	@ 0x64
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	1acb      	subs	r3, r1, r3
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <UART_SetConfig+0x2d4>)
 8002044:	fba3 2302 	umull	r2, r3, r3, r2
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002050:	441c      	add	r4, r3
 8002052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002056:	2200      	movs	r2, #0
 8002058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800205c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002064:	4642      	mov	r2, r8
 8002066:	464b      	mov	r3, r9
 8002068:	1891      	adds	r1, r2, r2
 800206a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800206c:	415b      	adcs	r3, r3
 800206e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002074:	4641      	mov	r1, r8
 8002076:	1851      	adds	r1, r2, r1
 8002078:	6339      	str	r1, [r7, #48]	@ 0x30
 800207a:	4649      	mov	r1, r9
 800207c:	414b      	adcs	r3, r1
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800208c:	4659      	mov	r1, fp
 800208e:	00cb      	lsls	r3, r1, #3
 8002090:	4651      	mov	r1, sl
 8002092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002096:	4651      	mov	r1, sl
 8002098:	00ca      	lsls	r2, r1, #3
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	4642      	mov	r2, r8
 80020a2:	189b      	adds	r3, r3, r2
 80020a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020a8:	464b      	mov	r3, r9
 80020aa:	460a      	mov	r2, r1
 80020ac:	eb42 0303 	adc.w	r3, r2, r3
 80020b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80020c8:	460b      	mov	r3, r1
 80020ca:	18db      	adds	r3, r3, r3
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ce:	4613      	mov	r3, r2
 80020d0:	eb42 0303 	adc.w	r3, r2, r3
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020de:	f7fe f88b 	bl	80001f8 <__aeabi_uldivmod>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <UART_SetConfig+0x2d4>)
 80020e8:	fba3 1302 	umull	r1, r3, r3, r2
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	2164      	movs	r1, #100	@ 0x64
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	3332      	adds	r3, #50	@ 0x32
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <UART_SetConfig+0x2d4>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	f003 0207 	and.w	r2, r3, #7
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4422      	add	r2, r4
 800210e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002110:	e106      	b.n	8002320 <UART_SetConfig+0x4d8>
 8002112:	bf00      	nop
 8002114:	40011000 	.word	0x40011000
 8002118:	40011400 	.word	0x40011400
 800211c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002124:	2200      	movs	r2, #0
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800212a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800212e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002132:	4642      	mov	r2, r8
 8002134:	464b      	mov	r3, r9
 8002136:	1891      	adds	r1, r2, r2
 8002138:	6239      	str	r1, [r7, #32]
 800213a:	415b      	adcs	r3, r3
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
 800213e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002142:	4641      	mov	r1, r8
 8002144:	1854      	adds	r4, r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	eb43 0501 	adc.w	r5, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	00eb      	lsls	r3, r5, #3
 8002156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215a:	00e2      	lsls	r2, r4, #3
 800215c:	4614      	mov	r4, r2
 800215e:	461d      	mov	r5, r3
 8002160:	4643      	mov	r3, r8
 8002162:	18e3      	adds	r3, r4, r3
 8002164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002168:	464b      	mov	r3, r9
 800216a:	eb45 0303 	adc.w	r3, r5, r3
 800216e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800217e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800218e:	4629      	mov	r1, r5
 8002190:	008b      	lsls	r3, r1, #2
 8002192:	4621      	mov	r1, r4
 8002194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002198:	4621      	mov	r1, r4
 800219a:	008a      	lsls	r2, r1, #2
 800219c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021a0:	f7fe f82a 	bl	80001f8 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4b60      	ldr	r3, [pc, #384]	@ (800232c <UART_SetConfig+0x4e4>)
 80021aa:	fba3 2302 	umull	r2, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	011c      	lsls	r4, r3, #4
 80021b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80021c4:	4642      	mov	r2, r8
 80021c6:	464b      	mov	r3, r9
 80021c8:	1891      	adds	r1, r2, r2
 80021ca:	61b9      	str	r1, [r7, #24]
 80021cc:	415b      	adcs	r3, r3
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d4:	4641      	mov	r1, r8
 80021d6:	1851      	adds	r1, r2, r1
 80021d8:	6139      	str	r1, [r7, #16]
 80021da:	4649      	mov	r1, r9
 80021dc:	414b      	adcs	r3, r1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021ec:	4659      	mov	r1, fp
 80021ee:	00cb      	lsls	r3, r1, #3
 80021f0:	4651      	mov	r1, sl
 80021f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f6:	4651      	mov	r1, sl
 80021f8:	00ca      	lsls	r2, r1, #3
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	4642      	mov	r2, r8
 8002202:	189b      	adds	r3, r3, r2
 8002204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002208:	464b      	mov	r3, r9
 800220a:	460a      	mov	r2, r1
 800220c:	eb42 0303 	adc.w	r3, r2, r3
 8002210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800221e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800222c:	4649      	mov	r1, r9
 800222e:	008b      	lsls	r3, r1, #2
 8002230:	4641      	mov	r1, r8
 8002232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002236:	4641      	mov	r1, r8
 8002238:	008a      	lsls	r2, r1, #2
 800223a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800223e:	f7fd ffdb 	bl	80001f8 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4611      	mov	r1, r2
 8002248:	4b38      	ldr	r3, [pc, #224]	@ (800232c <UART_SetConfig+0x4e4>)
 800224a:	fba3 2301 	umull	r2, r3, r3, r1
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2264      	movs	r2, #100	@ 0x64
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	3332      	adds	r3, #50	@ 0x32
 800225c:	4a33      	ldr	r2, [pc, #204]	@ (800232c <UART_SetConfig+0x4e4>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002268:	441c      	add	r4, r3
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800226e:	2200      	movs	r2, #0
 8002270:	673b      	str	r3, [r7, #112]	@ 0x70
 8002272:	677a      	str	r2, [r7, #116]	@ 0x74
 8002274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002278:	4642      	mov	r2, r8
 800227a:	464b      	mov	r3, r9
 800227c:	1891      	adds	r1, r2, r2
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	415b      	adcs	r3, r3
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002288:	4641      	mov	r1, r8
 800228a:	1851      	adds	r1, r2, r1
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	4649      	mov	r1, r9
 8002290:	414b      	adcs	r3, r1
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022a0:	4659      	mov	r1, fp
 80022a2:	00cb      	lsls	r3, r1, #3
 80022a4:	4651      	mov	r1, sl
 80022a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022aa:	4651      	mov	r1, sl
 80022ac:	00ca      	lsls	r2, r1, #3
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	4642      	mov	r2, r8
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ba:	464b      	mov	r3, r9
 80022bc:	460a      	mov	r2, r1
 80022be:	eb42 0303 	adc.w	r3, r2, r3
 80022c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80022ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80022dc:	4649      	mov	r1, r9
 80022de:	008b      	lsls	r3, r1, #2
 80022e0:	4641      	mov	r1, r8
 80022e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e6:	4641      	mov	r1, r8
 80022e8:	008a      	lsls	r2, r1, #2
 80022ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022ee:	f7fd ff83 	bl	80001f8 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <UART_SetConfig+0x4e4>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	@ 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	@ 0x32
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <UART_SetConfig+0x4e4>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 020f 	and.w	r2, r3, #15
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4422      	add	r2, r4
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	bf00      	nop
 8002322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002326:	46bd      	mov	sp, r7
 8002328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232c:	51eb851f 	.word	0x51eb851f

08002330 <memset>:
 8002330:	4402      	add	r2, r0
 8002332:	4603      	mov	r3, r0
 8002334:	4293      	cmp	r3, r2
 8002336:	d100      	bne.n	800233a <memset+0xa>
 8002338:	4770      	bx	lr
 800233a:	f803 1b01 	strb.w	r1, [r3], #1
 800233e:	e7f9      	b.n	8002334 <memset+0x4>

08002340 <__libc_init_array>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	4d0d      	ldr	r5, [pc, #52]	@ (8002378 <__libc_init_array+0x38>)
 8002344:	4c0d      	ldr	r4, [pc, #52]	@ (800237c <__libc_init_array+0x3c>)
 8002346:	1b64      	subs	r4, r4, r5
 8002348:	10a4      	asrs	r4, r4, #2
 800234a:	2600      	movs	r6, #0
 800234c:	42a6      	cmp	r6, r4
 800234e:	d109      	bne.n	8002364 <__libc_init_array+0x24>
 8002350:	4d0b      	ldr	r5, [pc, #44]	@ (8002380 <__libc_init_array+0x40>)
 8002352:	4c0c      	ldr	r4, [pc, #48]	@ (8002384 <__libc_init_array+0x44>)
 8002354:	f000 f818 	bl	8002388 <_init>
 8002358:	1b64      	subs	r4, r4, r5
 800235a:	10a4      	asrs	r4, r4, #2
 800235c:	2600      	movs	r6, #0
 800235e:	42a6      	cmp	r6, r4
 8002360:	d105      	bne.n	800236e <__libc_init_array+0x2e>
 8002362:	bd70      	pop	{r4, r5, r6, pc}
 8002364:	f855 3b04 	ldr.w	r3, [r5], #4
 8002368:	4798      	blx	r3
 800236a:	3601      	adds	r6, #1
 800236c:	e7ee      	b.n	800234c <__libc_init_array+0xc>
 800236e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002372:	4798      	blx	r3
 8002374:	3601      	adds	r6, #1
 8002376:	e7f2      	b.n	800235e <__libc_init_array+0x1e>
 8002378:	08002400 	.word	0x08002400
 800237c:	08002400 	.word	0x08002400
 8002380:	08002400 	.word	0x08002400
 8002384:	08002404 	.word	0x08002404

08002388 <_init>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr

08002394 <_fini>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr


Homework 10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  000060c0  2**0
                  CONTENTS
  4 .ARM          00000008  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e4  080049e4  000060c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  080049ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200000c0  08004aac  000060c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08004aac  000063d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d00d  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d24  00000000  00000000  000130fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00014e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a7  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159da  00000000  00000000  0001641f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d789  00000000  00000000  0002bdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcd7  00000000  00000000  00039582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000c529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c8ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004970 	.word	0x08004970

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08004970 	.word	0x08004970

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
char matrix_string[100] = "%d %d %d %d\n\r%d %d %d %d\n\r%d %d %d %d\n\r%d %d %d %d\n\r-------\n\r";
uint8_t buff_tx[100];
int j=0, k=0, h=0, len=0;
int matrix[4][4] = {0};

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b09f      	sub	sp, #124	@ 0x7c
 8000574:	af10      	add	r7, sp, #64	@ 0x40
 8000576:	6278      	str	r0, [r7, #36]	@ 0x24
	if(htim == &htim2){
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057a:	4a9b      	ldr	r2, [pc, #620]	@ (80007e8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800057c:	4293      	cmp	r3, r2
 800057e:	f040 8195 	bne.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x33c>
		if(h<10){
 8000582:	4b9a      	ldr	r3, [pc, #616]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b09      	cmp	r3, #9
 8000588:	f300 8190 	bgt.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x33c>
			matrix[j][0] = matrix[j][0] + !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12);
 800058c:	4b98      	ldr	r3, [pc, #608]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a98      	ldr	r2, [pc, #608]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	4413      	add	r3, r2
 8000596:	681c      	ldr	r4, [r3, #0]
 8000598:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800059c:	4896      	ldr	r0, [pc, #600]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800059e:	f001 fbcb 	bl	8001d38 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf0c      	ite	eq
 80005a8:	2301      	moveq	r3, #1
 80005aa:	2300      	movne	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b8f      	ldr	r3, [pc, #572]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4422      	add	r2, r4
 80005b6:	498f      	ldr	r1, [pc, #572]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	440b      	add	r3, r1
 80005bc:	601a      	str	r2, [r3, #0]
			matrix[j][1] = matrix[j][1] + !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005be:	4b8c      	ldr	r3, [pc, #560]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a8c      	ldr	r2, [pc, #560]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	4413      	add	r3, r2
 80005c8:	3304      	adds	r3, #4
 80005ca:	681c      	ldr	r4, [r3, #0]
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4889      	ldr	r0, [pc, #548]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80005d2:	f001 fbb1 	bl	8001d38 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b82      	ldr	r3, [pc, #520]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4422      	add	r2, r4
 80005ea:	4982      	ldr	r1, [pc, #520]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	440b      	add	r3, r1
 80005f0:	3304      	adds	r3, #4
 80005f2:	601a      	str	r2, [r3, #0]
			matrix[j][2] = matrix[j][2] + !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80005f4:	4b7e      	ldr	r3, [pc, #504]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a7e      	ldr	r2, [pc, #504]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4413      	add	r3, r2
 80005fe:	3308      	adds	r3, #8
 8000600:	681c      	ldr	r4, [r3, #0]
 8000602:	2104      	movs	r1, #4
 8000604:	487c      	ldr	r0, [pc, #496]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000606:	f001 fb97 	bl	8001d38 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	4b75      	ldr	r3, [pc, #468]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4422      	add	r2, r4
 800061e:	4975      	ldr	r1, [pc, #468]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	440b      	add	r3, r1
 8000624:	3308      	adds	r3, #8
 8000626:	601a      	str	r2, [r3, #0]
			matrix[j][3] = matrix[j][3] + !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8000628:	4b71      	ldr	r3, [pc, #452]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a71      	ldr	r2, [pc, #452]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	330c      	adds	r3, #12
 8000634:	681c      	ldr	r4, [r3, #0]
 8000636:	2108      	movs	r1, #8
 8000638:	486f      	ldr	r0, [pc, #444]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800063a:	f001 fb7d 	bl	8001d38 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	4b68      	ldr	r3, [pc, #416]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4422      	add	r2, r4
 8000652:	4968      	ldr	r1, [pc, #416]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	440b      	add	r3, r1
 8000658:	330c      	adds	r3, #12
 800065a:	601a      	str	r2, [r3, #0]

			if(j == 3 && k == SAMPLE_RATE * 4 - 1) {
 800065c:	4b64      	ldr	r3, [pc, #400]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	f040 809c 	bne.w	800079e <HAL_TIM_PeriodElapsedCallback+0x22e>
 8000666:	4b65      	ldr	r3, [pc, #404]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b0b      	cmp	r3, #11
 800066c:	f040 8097 	bne.w	800079e <HAL_TIM_PeriodElapsedCallback+0x22e>
				for(int i=0; i<4;i++){
 8000670:	2300      	movs	r3, #0
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
 8000674:	e025      	b.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x152>
					for(int j=0; j<4; j++){
 8000676:	2300      	movs	r3, #0
 8000678:	633b      	str	r3, [r7, #48]	@ 0x30
 800067a:	e01c      	b.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x146>
						if(matrix[i][j] == SAMPLE_RATE) matrix[i][j]=1;
 800067c:	495d      	ldr	r1, [pc, #372]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800067e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000680:	009a      	lsls	r2, r3, #2
 8000682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000684:	4413      	add	r3, r2
 8000686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d108      	bne.n	80006a0 <HAL_TIM_PeriodElapsedCallback+0x130>
 800068e:	4959      	ldr	r1, [pc, #356]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000692:	009a      	lsls	r2, r3, #2
 8000694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000696:	4413      	add	r3, r2
 8000698:	2201      	movs	r2, #1
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800069e:	e007      	b.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x140>
						else matrix[i][j] = 0;
 80006a0:	4954      	ldr	r1, [pc, #336]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006a4:	009a      	lsls	r2, r3, #2
 80006a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int j=0; j<4; j++){
 80006b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006b2:	3301      	adds	r3, #1
 80006b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80006b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	dddf      	ble.n	800067c <HAL_TIM_PeriodElapsedCallback+0x10c>
				for(int i=0; i<4;i++){
 80006bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006be:	3301      	adds	r3, #1
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80006c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	ddd6      	ble.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x106>
					}
				}
				len = snprintf(buff_tx, 100,matrix_string,
 80006c8:	4b4a      	ldr	r3, [pc, #296]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	623b      	str	r3, [r7, #32]
 80006ce:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006d0:	6918      	ldr	r0, [r3, #16]
 80006d2:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006d4:	6a1c      	ldr	r4, [r3, #32]
 80006d6:	4b47      	ldr	r3, [pc, #284]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006d8:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 80006da:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006dc:	685e      	ldr	r6, [r3, #4]
 80006de:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	61fa      	str	r2, [r7, #28]
 80006e4:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80006e8:	61b9      	str	r1, [r7, #24]
 80006ea:	4b42      	ldr	r3, [pc, #264]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	4b40      	ldr	r3, [pc, #256]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	613a      	str	r2, [r7, #16]
 80006f6:	4b3f      	ldr	r3, [pc, #252]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006f8:	6999      	ldr	r1, [r3, #24]
 80006fa:	60f9      	str	r1, [r7, #12]
 80006fc:	4b3d      	ldr	r3, [pc, #244]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80006fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b3c      	ldr	r3, [pc, #240]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	4b3a      	ldr	r3, [pc, #232]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800070a:	68d9      	ldr	r1, [r3, #12]
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	4b39      	ldr	r3, [pc, #228]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000710:	69d9      	ldr	r1, [r3, #28]
 8000712:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000716:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800071a:	930e      	str	r3, [sp, #56]	@ 0x38
 800071c:	920d      	str	r2, [sp, #52]	@ 0x34
 800071e:	910c      	str	r1, [sp, #48]	@ 0x30
 8000720:	6839      	ldr	r1, [r7, #0]
 8000722:	910b      	str	r1, [sp, #44]	@ 0x2c
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	920a      	str	r2, [sp, #40]	@ 0x28
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	9309      	str	r3, [sp, #36]	@ 0x24
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	9108      	str	r1, [sp, #32]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	9207      	str	r2, [sp, #28]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	9306      	str	r3, [sp, #24]
 8000738:	69b9      	ldr	r1, [r7, #24]
 800073a:	9105      	str	r1, [sp, #20]
 800073c:	69fa      	ldr	r2, [r7, #28]
 800073e:	9204      	str	r2, [sp, #16]
 8000740:	9603      	str	r6, [sp, #12]
 8000742:	9502      	str	r5, [sp, #8]
 8000744:	9401      	str	r4, [sp, #4]
 8000746:	9000      	str	r0, [sp, #0]
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	4a2d      	ldr	r2, [pc, #180]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800074c:	2164      	movs	r1, #100	@ 0x64
 800074e:	482d      	ldr	r0, [pc, #180]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000750:	f003 fc5a 	bl	8004008 <sniprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	4a2c      	ldr	r2, [pc, #176]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000758:	6013      	str	r3, [r2, #0]
						matrix[0][0],matrix[1][0],matrix[2][0],matrix[3][0],
						matrix[0][1],matrix[1][1],matrix[2][1],matrix[3][1],
						matrix[0][2],matrix[1][2],matrix[2][2],matrix[3][2],
						matrix[0][3],matrix[1][3],matrix[2][3],matrix[3][3]);

				HAL_UART_Transmit_DMA(&huart2, buff_tx, len);
 800075a:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	b29b      	uxth	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4928      	ldr	r1, [pc, #160]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000764:	4829      	ldr	r0, [pc, #164]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000766:	f002 fc3b 	bl	8002fe0 <HAL_UART_Transmit_DMA>
				for(int i=0; i<4;i++){
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800076e:	e013      	b.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x228>
					for(int j=0; j<4; j++){
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000774:	e00a      	b.n	800078c <HAL_TIM_PeriodElapsedCallback+0x21c>
						matrix[i][j]=0;
 8000776:	491f      	ldr	r1, [pc, #124]	@ (80007f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077a:	009a      	lsls	r2, r3, #2
 800077c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077e:	4413      	add	r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int j=0; j<4; j++){
 8000786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000788:	3301      	adds	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800078c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078e:	2b03      	cmp	r3, #3
 8000790:	ddf1      	ble.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x206>
				for(int i=0; i<4;i++){
 8000792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000794:	3301      	adds	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079a:	2b03      	cmp	r3, #3
 800079c:	dde8      	ble.n	8000770 <HAL_TIM_PeriodElapsedCallback+0x200>
					}
				}
			}
			switch(j){
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d83b      	bhi.n	800081e <HAL_TIM_PeriodElapsedCallback+0x2ae>
 80007a6:	a201      	add	r2, pc, #4	@ (adr r2, 80007ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	080007cb 	.word	0x080007cb
 80007b4:	080007d9 	.word	0x080007d9
 80007b8:	08000811 	.word	0x08000811
			case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007c4:	f001 fad0 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 80007c8:	e029      	b.n	800081e <HAL_TIM_PeriodElapsedCallback+0x2ae>
			case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007d2:	f001 fac9 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 80007d6:	e022      	b.n	800081e <HAL_TIM_PeriodElapsedCallback+0x2ae>
			case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007e0:	f001 fac2 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 80007e4:	e01b      	b.n	800081e <HAL_TIM_PeriodElapsedCallback+0x2ae>
 80007e6:	bf00      	nop
 80007e8:	200000dc 	.word	0x200000dc
 80007ec:	20000238 	.word	0x20000238
 80007f0:	20000230 	.word	0x20000230
 80007f4:	20000240 	.word	0x20000240
 80007f8:	40020800 	.word	0x40020800
 80007fc:	20000234 	.word	0x20000234
 8000800:	20000000 	.word	0x20000000
 8000804:	200001cc 	.word	0x200001cc
 8000808:	2000023c 	.word	0x2000023c
 800080c:	20000124 	.word	0x20000124
			case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000816:	4827      	ldr	r0, [pc, #156]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000818:	f001 faa6 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 800081c:	bf00      	nop
			}
			j = (j+1)%4;
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	425a      	negs	r2, r3
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	f002 0203 	and.w	r2, r2, #3
 800082e:	bf58      	it	pl
 8000830:	4253      	negpl	r3, r2
 8000832:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000834:	6013      	str	r3, [r2, #0]
			switch(j){
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d826      	bhi.n	800088c <HAL_TIM_PeriodElapsedCallback+0x31c>
 800083e:	a201      	add	r2, pc, #4	@ (adr r2, 8000844 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000855 	.word	0x08000855
 8000848:	08000863 	.word	0x08000863
 800084c:	08000871 	.word	0x08000871
 8000850:	0800087f 	.word	0x0800087f
			case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800085c:	f001 fa84 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 8000860:	e014      	b.n	800088c <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000868:	4812      	ldr	r0, [pc, #72]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800086a:	f001 fa7d 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 800086e:	e00d      	b.n	800088c <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000876:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000878:	f001 fa76 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 800087c:	e006      	b.n	800088c <HAL_TIM_PeriodElapsedCallback+0x31c>
			case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000886:	f001 fa6f 	bl	8001d68 <HAL_GPIO_WritePin>
			break;
 800088a:	bf00      	nop
			}
			k = (k+1)%(SAMPLE_RATE * 4);
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000894:	fb83 2301 	smull	r2, r3, r3, r1
 8000898:	105a      	asrs	r2, r3, #1
 800089a:	17cb      	asrs	r3, r1, #31
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	1aca      	subs	r2, r1, r3
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80008aa:	601a      	str	r2, [r3, #0]
		}
	}
}
 80008ac:	bf00      	nop
 80008ae:	373c      	adds	r7, #60	@ 0x3c
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	40020800 	.word	0x40020800
 80008b8:	20000230 	.word	0x20000230
 80008bc:	20000234 	.word	0x20000234
 80008c0:	2aaaaaab 	.word	0x2aaaaaab

080008c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008c8:	f000 fb2c 	bl	8000f24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008cc:	f000 f810 	bl	80008f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008d0:	f000 f910 	bl	8000af4 <MX_GPIO_Init>
	MX_DMA_Init();
 80008d4:	f000 f8ee 	bl	8000ab4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80008d8:	f000 f8c2 	bl	8000a60 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80008dc:	f000 f874 	bl	80009c8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <main+0x28>)
 80008e2:	f001 ff43 	bl	800276c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <main+0x22>
 80008ea:	bf00      	nop
 80008ec:	200000dc 	.word	0x200000dc

080008f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	@ 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 fbb6 	bl	8004070 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <SystemClock_Config+0xd0>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	4a28      	ldr	r2, [pc, #160]	@ (80009c0 <SystemClock_Config+0xd0>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	@ 0x40
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <SystemClock_Config+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <SystemClock_Config+0xd4>)
 800093e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <SystemClock_Config+0xd4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000964:	2310      	movs	r3, #16
 8000966:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000968:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800096c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800096e:	2304      	movs	r3, #4
 8000970:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fa0e 	bl	8001d9c <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000986:	f000 f937 	bl	8000bf8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fc70 	bl	800228c <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80009b2:	f000 f921 	bl	8000bf8 <Error_Handler>
	}
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	@ 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	2263      	movs	r2, #99	@ 0x63
 80009f0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8399;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_TIM2_Init+0x94>)
 80009fa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80009fe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f001 fe5d 	bl	80026cc <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000a18:	f000 f8ee 	bl	8000bf8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f001 fff1 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000a34:	f000 f8e0 	bl	8000bf8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f002 f9f9 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000a50:	f000 f8d2 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000dc 	.word	0x200000dc

08000a60 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f002 fa52 	bl	8002f40 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000aa2:	f000 f8a9 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000124 	.word	0x20000124
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_DMA_Init+0x3c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <MX_DMA_Init+0x3c>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_DMA_Init+0x3c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2011      	movs	r0, #17
 8000adc:	f000 fb6f 	bl	80011be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ae0:	2011      	movs	r0, #17
 8000ae2:	f000 fb88 	bl	80011f6 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a36      	ldr	r2, [pc, #216]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b34      	ldr	r3, [pc, #208]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_GPIO_Init+0xf8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	481c      	ldr	r0, [pc, #112]	@ (8000bf0 <MX_GPIO_Init+0xfc>)
 8000b80:	f001 f8f2 	bl	8001d68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000b8a:	481a      	ldr	r0, [pc, #104]	@ (8000bf4 <MX_GPIO_Init+0x100>)
 8000b8c:	f001 f8ec 	bl	8001d68 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8000b90:	f243 030c 	movw	r3, #12300	@ 0x300c
 8000b94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <MX_GPIO_Init+0x100>)
 8000ba6:	f000 ff43 	bl	8001a30 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000baa:	2320      	movs	r3, #32
 8000bac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <MX_GPIO_Init+0xfc>)
 8000bc2:	f000 ff35 	bl	8001a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 PC10 PC11 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000bc6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000bca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_GPIO_Init+0x100>)
 8000be0:	f000 ff26 	bl	8001a30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f000 fab0 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c64:	d115      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_TIM_Base_MspInit+0x48>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201c      	movs	r0, #28
 8000c88:	f000 fa99 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f000 fab2 	bl	80011f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a34      	ldr	r2, [pc, #208]	@ (8000d90 <HAL_UART_MspInit+0xf0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d161      	bne.n	8000d86 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a32      	ldr	r2, [pc, #200]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <HAL_UART_MspInit+0xf4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4820      	ldr	r0, [pc, #128]	@ (8000d98 <HAL_UART_MspInit+0xf8>)
 8000d16:	f000 fe8b 	bl	8001a30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d1c:	4a20      	ldr	r2, [pc, #128]	@ (8000da0 <HAL_UART_MspInit+0x100>)
 8000d1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d2a:	2240      	movs	r2, #64	@ 0x40
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d5c:	f000 fa66 	bl	800122c <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d66:	f7ff ff47 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_UART_MspInit+0xfc>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2026      	movs	r0, #38	@ 0x26
 8000d7c:	f000 fa1f 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d80:	2026      	movs	r0, #38	@ 0x26
 8000d82:	f000 fa38 	bl	80011f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	@ 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	2000016c 	.word	0x2000016c
 8000da0:	400260a0 	.word	0x400260a0

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f8e5 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <DMA1_Stream6_IRQHandler+0x10>)
 8000e0a:	f000 fba7 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000016c 	.word	0x2000016c

08000e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <TIM2_IRQHandler+0x10>)
 8000e1e:	f001 fd07 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000dc 	.word	0x200000dc

08000e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <USART2_IRQHandler+0x10>)
 8000e32:	f002 f945 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000124 	.word	0x20000124

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f003 f906 	bl	8004080 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20018000 	.word	0x20018000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000280 	.word	0x20000280
 8000ea8:	200003d0 	.word	0x200003d0

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ed4:	f7ff ffea 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	@ (8000f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f003 f8c5 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fcdf 	bl	80008c4 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000f14:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 8000f18:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000f1c:	200003d0 	.word	0x200003d0

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f92b 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fe54 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f943 	bl	8001212 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa4:	f000 f90b 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000064 	.word	0x20000064
 8000fc0:	2000006c 	.word	0x2000006c
 8000fc4:	20000068 	.word	0x20000068

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000006c 	.word	0x2000006c
 8000fec:	20000284 	.word	0x20000284

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000284 	.word	0x20000284

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	@ (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	@ (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	@ (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	@ 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff feda 	bl	8000ff0 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e099      	b.n	800137c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001268:	e00f      	b.n	800128a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800126a:	f7ff fec1 	bl	8000ff0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b05      	cmp	r3, #5
 8001276:	d908      	bls.n	800128a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e078      	b.n	800137c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e8      	bne.n	800126a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	4b38      	ldr	r3, [pc, #224]	@ (8001384 <HAL_DMA_Init+0x158>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d107      	bne.n	80012f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4313      	orrs	r3, r2
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f023 0307 	bic.w	r3, r3, #7
 800130a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	2b04      	cmp	r3, #4
 800131c:	d117      	bne.n	800134e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00e      	beq.n	800134e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fb01 	bl	8001938 <DMA_CheckFifoParam>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2240      	movs	r2, #64	@ 0x40
 8001340:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800134a:	2301      	movs	r3, #1
 800134c:	e016      	b.n	800137c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fab8 	bl	80018cc <DMA_CalcBaseAndBitshift>
 800135c:	4603      	mov	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	223f      	movs	r2, #63	@ 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	f010803f 	.word	0xf010803f

08001388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_Start_IT+0x26>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e040      	b.n	8001430 <HAL_DMA_Start_IT+0xa8>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d12f      	bne.n	8001422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2202      	movs	r2, #2
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fa4a 	bl	8001870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e0:	223f      	movs	r2, #63	@ 0x3f
 80013e2:	409a      	lsls	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0216 	orr.w	r2, r2, #22
 80013f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0208 	orr.w	r2, r2, #8
 800140e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e005      	b.n	800142e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800142a:	2302      	movs	r3, #2
 800142c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001444:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001446:	f7ff fdd3 	bl	8000ff0 <HAL_GetTick>
 800144a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d008      	beq.n	800146a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2280      	movs	r2, #128	@ 0x80
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e052      	b.n	8001510 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0216 	bic.w	r2, r2, #22
 8001478:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001488:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <HAL_DMA_Abort+0x62>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ba:	e013      	b.n	80014e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014bc:	f7ff fd98 	bl	8000ff0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d90c      	bls.n	80014e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e015      	b.n	8001510 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e4      	bne.n	80014bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f6:	223f      	movs	r2, #63	@ 0x3f
 80014f8:	409a      	lsls	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d004      	beq.n	8001536 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00c      	b.n	8001550 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001568:	4b8e      	ldr	r3, [pc, #568]	@ (80017a4 <HAL_DMA_IRQHandler+0x248>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a8e      	ldr	r2, [pc, #568]	@ (80017a8 <HAL_DMA_IRQHandler+0x24c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	2208      	movs	r2, #8
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b4:	2208      	movs	r2, #8
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015cc:	2201      	movs	r2, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ea:	2201      	movs	r2, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	f043 0202 	orr.w	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	2204      	movs	r2, #4
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d012      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	2204      	movs	r2, #4
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	2210      	movs	r2, #16
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d043      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03c      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001656:	2210      	movs	r2, #16
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d018      	beq.n	800169e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d024      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
 800168a:	e01f      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01b      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e016      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0208 	bic.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d0:	2220      	movs	r2, #32
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 808f 	beq.w	80017fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8087 	beq.w	80017fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f2:	2220      	movs	r2, #32
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d136      	bne.n	8001774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_DMA_IRQHandler+0x1da>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174a:	223f      	movs	r2, #63	@ 0x3f
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001766:	2b00      	cmp	r3, #0
 8001768:	d07e      	beq.n	8001868 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
        }
        return;
 8001772:	e079      	b.n	8001868 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01d      	beq.n	80017be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e02c      	b.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
 80017a2:	bf00      	nop
 80017a4:	20000064 	.word	0x20000064
 80017a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d023      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e01e      	b.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10f      	bne.n	80017ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0210 	bic.w	r2, r2, #16
 80017da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001800:	2b00      	cmp	r3, #0
 8001802:	d032      	beq.n	800186a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d022      	beq.n	8001856 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2205      	movs	r2, #5
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	3301      	adds	r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	d307      	bcc.n	8001844 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f2      	bne.n	8001828 <HAL_DMA_IRQHandler+0x2cc>
 8001842:	e000      	b.n	8001846 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001844:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
 8001866:	e000      	b.n	800186a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001868:	bf00      	nop
    }
  }
}
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800188c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b40      	cmp	r3, #64	@ 0x40
 800189c:	d108      	bne.n	80018b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ae:	e007      	b.n	80018c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3b10      	subs	r3, #16
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <DMA_CalcBaseAndBitshift+0x64>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018e6:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <DMA_CalcBaseAndBitshift+0x68>)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d909      	bls.n	800190e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	1d1a      	adds	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58
 800190c:	e007      	b.n	800191e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	aaaaaaab 	.word	0xaaaaaaab
 8001934:	080049a0 	.word	0x080049a0

08001938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11f      	bne.n	8001992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d856      	bhi.n	8001a06 <DMA_CheckFifoParam+0xce>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <DMA_CheckFifoParam+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001983 	.word	0x08001983
 8001968:	08001971 	.word	0x08001971
 800196c:	08001a07 	.word	0x08001a07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d046      	beq.n	8001a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001980:	e043      	b.n	8001a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800198a:	d140      	bne.n	8001a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001990:	e03d      	b.n	8001a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800199a:	d121      	bne.n	80019e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d837      	bhi.n	8001a12 <DMA_CheckFifoParam+0xda>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <DMA_CheckFifoParam+0x70>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019bf 	.word	0x080019bf
 80019b0:	080019b9 	.word	0x080019b9
 80019b4:	080019d1 	.word	0x080019d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
      break;
 80019bc:	e030      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d025      	beq.n	8001a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ce:	e022      	b.n	8001a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019d8:	d11f      	bne.n	8001a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019de:	e01c      	b.n	8001a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d903      	bls.n	80019ee <DMA_CheckFifoParam+0xb6>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d003      	beq.n	80019f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019ec:	e018      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      break;
 80019f2:	e015      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	e00b      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a06:	bf00      	nop
 8001a08:	e00a      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
 8001a0c:	e008      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e006      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;
 8001a12:	bf00      	nop
 8001a14:	e004      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e002      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a1a:	bf00      	nop
 8001a1c:	e000      	b.n	8001a20 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e159      	b.n	8001d00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 8148 	bne.w	8001cfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d005      	beq.n	8001a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d130      	bne.n	8001ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d017      	beq.n	8001b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80a2 	beq.w	8001cfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a56      	ldr	r2, [pc, #344]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b54      	ldr	r3, [pc, #336]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd2:	4a52      	ldr	r2, [pc, #328]	@ (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	@ (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x202>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a48      	ldr	r2, [pc, #288]	@ (8001d24 <HAL_GPIO_Init+0x2f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x1fe>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a47      	ldr	r2, [pc, #284]	@ (8001d28 <HAL_GPIO_Init+0x2f8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a46      	ldr	r2, [pc, #280]	@ (8001d2c <HAL_GPIO_Init+0x2fc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x1f6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a45      	ldr	r2, [pc, #276]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x1f2>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	@ (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a24      	ldr	r2, [pc, #144]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cca:	4a1a      	ldr	r2, [pc, #104]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f aea2 	bls.w	8001a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dba:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff f8cc 	bl	8000ff0 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f8c8 	bl	8000ff0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f8b8 	bl	8000ff0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f8b4 	bl	8000ff0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f86d 	bl	8000ff0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f869 	bl	8000ff0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f84c 	bl	8000ff0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f848 	bl	8000ff0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f82c 	bl	8000ff0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f828 	bl	8000ff0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f815 	bl	8000ff0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff f811 	bl	8000ff0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7fe ffd1 	bl	8000ff0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe ffcd 	bl	8000ff0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	@ (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	@ 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ff92 	bl	8000ff0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe ff8e 	bl	8000ff0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe ff7c 	bl	8000ff0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe ff78 	bl	8000ff0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe ff4c 	bl	8000ff0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe ff48 	bl	8000ff0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe ff21 	bl	8000ff0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe ff1d 	bl	8000ff0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff0a 	bl	8000ff0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff06 	bl	8000ff0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fe38 	bl	8000ff0 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fe34 	bl	8000ff0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fd98 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	08004988 	.word	0x08004988
 8002450:	20000064 	.word	0x20000064
 8002454:	20000068 	.word	0x20000068

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	@ 0x50
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80e1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e0db      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002490:	e0db      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x208>)
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e0d8      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4651      	mov	r1, sl
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4651      	mov	r1, sl
 800250c:	ebb2 0801 	subs.w	r8, r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	eb63 0901 	sbc.w	r9, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252a:	4690      	mov	r8, r2
 800252c:	4699      	mov	r9, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb18 0303 	adds.w	r3, r8, r3
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	462b      	mov	r3, r5
 8002538:	eb49 0303 	adc.w	r3, r9, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254a:	4629      	mov	r1, r5
 800254c:	024b      	lsls	r3, r1, #9
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002554:	4621      	mov	r1, r4
 8002556:	024a      	lsls	r2, r1, #9
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002568:	f7fd fe8a 	bl	8000280 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	e058      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	4611      	mov	r1, r2
 8002582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a2:	0150      	lsls	r0, r2, #5
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4641      	mov	r1, r8
 80025aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c8:	ebb2 040a 	subs.w	r4, r2, sl
 80025cc:	eb63 050b 	sbc.w	r5, r3, fp
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	00eb      	lsls	r3, r5, #3
 80025da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025de:	00e2      	lsls	r2, r4, #3
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	18e3      	adds	r3, r4, r3
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb45 0303 	adc.w	r3, r5, r3
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	61fa      	str	r2, [r7, #28]
 8002618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261c:	f7fd fe30 	bl	8000280 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800264c:	4618      	mov	r0, r3
 800264e:	3750      	adds	r7, #80	@ 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000064 	.word	0x20000064

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08004998 	.word	0x08004998

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0b5b      	lsrs	r3, r3, #13
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08004998 	.word	0x08004998

080026cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe faae 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 fa70 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d001      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e044      	b.n	800280e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_TIM_Base_Start_IT+0xb0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x6c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ae:	d013      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x6c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <HAL_TIM_Base_Start_IT+0xb4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x6c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_TIM_Base_Start_IT+0xb8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x6c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_TIM_Base_Start_IT+0xbc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x6c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a16      	ldr	r2, [pc, #88]	@ (800282c <HAL_TIM_Base_Start_IT+0xc0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d111      	bne.n	80027fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d010      	beq.n	800280c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	e007      	b.n	800280c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40010000 	.word	0x40010000
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800
 8002828:	40000c00 	.word	0x40000c00
 800282c:	40014000 	.word	0x40014000

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f999 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f98b 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f99c 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f973 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f965 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f976 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0208 	mvn.w	r2, #8
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f94d 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f93f 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f950 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f927 	bl	8002bb2 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f919 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f92a 	bl	8002bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fd fdea 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fab6 	bl	8002f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8fb 	bl	8002bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0220 	mvn.w	r2, #32
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa88 	bl	8002f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_ConfigClockSource+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0b4      	b.n	8002b96 <HAL_TIM_ConfigClockSource+0x186>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a64:	d03e      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a6a:	f200 8087 	bhi.w	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a72:	f000 8086 	beq.w	8002b82 <HAL_TIM_ConfigClockSource+0x172>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7a:	d87f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b70      	cmp	r3, #112	@ 0x70
 8002a7e:	d01a      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8002a80:	2b70      	cmp	r3, #112	@ 0x70
 8002a82:	d87b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b60      	cmp	r3, #96	@ 0x60
 8002a86:	d050      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x11a>
 8002a88:	2b60      	cmp	r3, #96	@ 0x60
 8002a8a:	d877      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b50      	cmp	r3, #80	@ 0x50
 8002a8e:	d03c      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xfa>
 8002a90:	2b50      	cmp	r3, #80	@ 0x50
 8002a92:	d873      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b40      	cmp	r3, #64	@ 0x40
 8002a96:	d058      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x13a>
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d86f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b30      	cmp	r3, #48	@ 0x30
 8002a9e:	d064      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa0:	2b30      	cmp	r3, #48	@ 0x30
 8002aa2:	d86b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d060      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d867      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05c      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d05a      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	e062      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	f000 f999 	bl	8002dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	609a      	str	r2, [r3, #8]
      break;
 8002ae2:	e04f      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	f000 f982 	bl	8002dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b06:	609a      	str	r2, [r3, #8]
      break;
 8002b08:	e03c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f8f6 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2150      	movs	r1, #80	@ 0x50
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f94f 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002b28:	e02c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f915 	bl	8002d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2160      	movs	r1, #96	@ 0x60
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f93f 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002b48:	e01c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 f8d6 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2140      	movs	r1, #64	@ 0x40
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f92f 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e00c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f000 f926 	bl	8002dc6 <TIM_ITRx_SetConfig>
      break;
 8002b7a:	e003      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e000      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	@ (8002cec <TIM_Base_SetConfig+0xfc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00f      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0e:	d00b      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a37      	ldr	r2, [pc, #220]	@ (8002cf0 <TIM_Base_SetConfig+0x100>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a36      	ldr	r2, [pc, #216]	@ (8002cf4 <TIM_Base_SetConfig+0x104>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a35      	ldr	r2, [pc, #212]	@ (8002cf8 <TIM_Base_SetConfig+0x108>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d108      	bne.n	8002c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <TIM_Base_SetConfig+0xfc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	@ (8002cf0 <TIM_Base_SetConfig+0x100>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a27      	ldr	r2, [pc, #156]	@ (8002cf4 <TIM_Base_SetConfig+0x104>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	@ (8002cf8 <TIM_Base_SetConfig+0x108>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	@ (8002cfc <TIM_Base_SetConfig+0x10c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <TIM_Base_SetConfig+0x110>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a23      	ldr	r2, [pc, #140]	@ (8002d04 <TIM_Base_SetConfig+0x114>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <TIM_Base_SetConfig+0xfc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d103      	bne.n	8002cc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40014400 	.word	0x40014400
 8002d04:	40014800 	.word	0x40014800

08002d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 030a 	bic.w	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f023 0210 	bic.w	r2, r3, #16
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	031b      	lsls	r3, r3, #12
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002da2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f043 0307 	orr.w	r3, r3, #7
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	021a      	lsls	r2, r3, #8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e050      	b.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d013      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	@ (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e042      	b.n	8002fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fe9a 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	@ 0x24
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fdcb 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	@ 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d156      	bne.n	80030a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_UART_Transmit_DMA+0x26>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e04f      	b.n	80030aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2221      	movs	r2, #33	@ 0x21
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	4a21      	ldr	r2, [pc, #132]	@ (80030b4 <HAL_UART_Transmit_DMA+0xd4>)
 8003030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	4a20      	ldr	r2, [pc, #128]	@ (80030b8 <HAL_UART_Transmit_DMA+0xd8>)
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <HAL_UART_Transmit_DMA+0xdc>)
 8003040:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003046:	2200      	movs	r2, #0
 8003048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3304      	adds	r3, #4
 800305e:	461a      	mov	r2, r3
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	f7fe f991 	bl	8001388 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800306e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	617b      	str	r3, [r7, #20]
   return(result);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003090:	627a      	str	r2, [r7, #36]	@ 0x24
 8003092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	61fb      	str	r3, [r7, #28]
   return(result);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	0800364d 	.word	0x0800364d
 80030b8:	080036e7 	.word	0x080036e7
 80030bc:	08003703 	.word	0x08003703

080030c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0ba      	sub	sp, #232	@ 0xe8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_UART_IRQHandler+0x66>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fc40 	bl	80039a4 <UART_Receive_IT>
      return;
 8003124:	e25b      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80de 	beq.w	80032ec <HAL_UART_IRQHandler+0x22c>
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80d1 	beq.w	80032ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f043 0201 	orr.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xf6>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_UART_IRQHandler+0x126>
 80031c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d105      	bne.n	80031da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 81f2 	beq.w	80035d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_UART_IRQHandler+0x14e>
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fbcb 	bl	80039a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_UART_IRQHandler+0x17a>
 8003232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d04f      	beq.n	80032da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fad3 	bl	80037e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d141      	bne.n	80032d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800327a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800327e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1d9      	bne.n	800324e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	4a7e      	ldr	r2, [pc, #504]	@ (80034a0 <HAL_UART_IRQHandler+0x3e0>)
 80032a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe f932 	bl	8001518 <HAL_DMA_Abort_IT>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032c4:	4610      	mov	r0, r2
 80032c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00e      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f9a8 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00a      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9a4 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e006      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a0 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032e6:	e175      	b.n	80035d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	bf00      	nop
    return;
 80032ea:	e173      	b.n	80035d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 814f 	bne.w	8003594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8148 	beq.w	8003594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8141 	beq.w	8003594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	f040 80b6 	bne.w	80034a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8145 	beq.w	80035d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003356:	429a      	cmp	r2, r3
 8003358:	f080 813e 	bcs.w	80035d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336e:	f000 8088 	beq.w	8003482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800338c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800339e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d9      	bne.n	8003372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e1      	bne.n	80033be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800340a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800341e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800342c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003452:	f023 0310 	bic.w	r3, r3, #16
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003464:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800346a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e3      	bne.n	8003440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd ffdb 	bl	8001438 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b29b      	uxth	r3, r3
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8cb 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800349e:	e09b      	b.n	80035d8 <HAL_UART_IRQHandler+0x518>
 80034a0:	080038ad 	.word	0x080038ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 808e 	beq.w	80035dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8089 	beq.w	80035dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80034f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	623b      	str	r3, [r7, #32]
   return(result);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003526:	633a      	str	r2, [r7, #48]	@ 0x30
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800356c:	61fa      	str	r2, [r7, #28]
 800356e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	617b      	str	r3, [r7, #20]
   return(result);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e3      	bne.n	8003548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f851 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003592:	e023      	b.n	80035dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_UART_IRQHandler+0x4f4>
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f991 	bl	80038d4 <UART_Transmit_IT>
    return;
 80035b2:	e014      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <HAL_UART_IRQHandler+0x51e>
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9d1 	bl	8003974 <UART_EndTransmit_IT>
    return;
 80035d2:	e004      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
    return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
      return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
      return;
 80035dc:	bf00      	nop
  }
}
 80035de:	37e8      	adds	r7, #232	@ 0xe8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b090      	sub	sp, #64	@ 0x40
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d137      	bne.n	80036d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366a:	2200      	movs	r2, #0
 800366c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800366e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	623b      	str	r3, [r7, #32]
   return(result);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003684:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3314      	adds	r3, #20
 800368c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800368e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e5      	bne.n	800366e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036c2:	61fa      	str	r2, [r7, #28]
 80036c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	617b      	str	r3, [r7, #20]
   return(result);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e5      	bne.n	80036a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036d6:	e002      	b.n	80036de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80036d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80036da:	f7ff ff83 	bl	80035e4 <HAL_UART_TxCpltCallback>
}
 80036de:	bf00      	nop
 80036e0:	3740      	adds	r7, #64	@ 0x40
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff ff7f 	bl	80035f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b21      	cmp	r3, #33	@ 0x21
 8003734:	d108      	bne.n	8003748 <UART_DMAError+0x46>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	f000 f827 	bl	8003796 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b40      	cmp	r3, #64	@ 0x40
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	@ 0x22
 8003768:	d108      	bne.n	800377c <UART_DMAError+0x7a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003776:	68b8      	ldr	r0, [r7, #8]
 8003778:	f000 f835 	bl	80037e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f7ff ff49 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b089      	sub	sp, #36	@ 0x24
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	61ba      	str	r2, [r7, #24]
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	613b      	str	r3, [r7, #16]
   return(result);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e5      	bne.n	800379e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80037da:	bf00      	nop
 80037dc:	3724      	adds	r7, #36	@ 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b095      	sub	sp, #84	@ 0x54
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	330c      	adds	r3, #12
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	330c      	adds	r3, #12
 800380c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800380e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	61fb      	str	r3, [r7, #28]
   return(result);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e5      	bne.n	8003822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	2b01      	cmp	r3, #1
 800385c:	d119      	bne.n	8003892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	60bb      	str	r3, [r7, #8]
   return(result);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0310 	bic.w	r3, r3, #16
 8003874:	647b      	str	r3, [r7, #68]	@ 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800387e:	61ba      	str	r2, [r7, #24]
 8003880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	613b      	str	r3, [r7, #16]
   return(result);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038a0:	bf00      	nop
 80038a2:	3754      	adds	r7, #84	@ 0x54
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff feaa 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b21      	cmp	r3, #33	@ 0x21
 80038e6:	d13e      	bne.n	8003966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f0:	d114      	bne.n	800391c <UART_Transmit_IT+0x48>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]
 800391a:	e008      	b.n	800392e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6211      	str	r1, [r2, #32]
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fe25 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	@ 0x30
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b22      	cmp	r3, #34	@ 0x22
 80039b6:	f040 80ae 	bne.w	8003b16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d117      	bne.n	80039f4 <UART_Receive_IT+0x50>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d113      	bne.n	80039f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f2:	e026      	b.n	8003a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a06:	d007      	beq.n	8003a18 <UART_Receive_IT+0x74>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <UART_Receive_IT+0x82>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e008      	b.n	8003a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d15d      	bne.n	8003b12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0220 	bic.w	r2, r2, #32
 8003a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d135      	bne.n	8003b08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d10a      	bne.n	8003afa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fd97 	bl	8003634 <HAL_UARTEx_RxEventCallback>
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fd7f 	bl	800360c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e002      	b.n	8003b18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3730      	adds	r7, #48	@ 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0c0      	sub	sp, #256	@ 0x100
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	68d9      	ldr	r1, [r3, #12]
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	ea40 0301 	orr.w	r3, r0, r1
 8003b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b78:	f021 010c 	bic.w	r1, r1, #12
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b86:	430b      	orrs	r3, r1
 8003b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9a:	6999      	ldr	r1, [r3, #24]
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	ea40 0301 	orr.w	r3, r0, r1
 8003ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b8f      	ldr	r3, [pc, #572]	@ (8003dec <UART_SetConfig+0x2cc>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <UART_SetConfig+0xa0>
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b8d      	ldr	r3, [pc, #564]	@ (8003df0 <UART_SetConfig+0x2d0>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d104      	bne.n	8003bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7fe fd70 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bc8:	e003      	b.n	8003bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7fe fd57 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8003bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bdc:	f040 810c 	bne.w	8003df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c02:	4621      	mov	r1, r4
 8003c04:	eb12 0801 	adds.w	r8, r2, r1
 8003c08:	4629      	mov	r1, r5
 8003c0a:	eb43 0901 	adc.w	r9, r3, r1
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c22:	4690      	mov	r8, r2
 8003c24:	4699      	mov	r9, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	eb18 0303 	adds.w	r3, r8, r3
 8003c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	18db      	adds	r3, r3, r3
 8003c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c54:	4613      	mov	r3, r2
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c64:	f7fc fb0c 	bl	8000280 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b61      	ldr	r3, [pc, #388]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c90:	415b      	adcs	r3, r3
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c98:	4641      	mov	r1, r8
 8003c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb8:	4692      	mov	sl, r2
 8003cba:	469b      	mov	fp, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cea:	4613      	mov	r3, r2
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cfa:	f7fc fac1 	bl	8000280 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2264      	movs	r2, #100	@ 0x64
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d28:	441c      	add	r4, r3
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d44:	415b      	adcs	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d80:	464b      	mov	r3, r9
 8003d82:	460a      	mov	r2, r1
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003da0:	460b      	mov	r3, r1
 8003da2:	18db      	adds	r3, r3, r3
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da6:	4613      	mov	r3, r2
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003db6:	f7fc fa63 	bl	8000280 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	@ 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	@ 0x32
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 0207 	and.w	r2, r3, #7
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4422      	add	r2, r4
 8003de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de8:	e106      	b.n	8003ff8 <UART_SetConfig+0x4d8>
 8003dea:	bf00      	nop
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	6239      	str	r1, [r7, #32]
 8003e12:	415b      	adcs	r3, r3
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	1854      	adds	r4, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb43 0501 	adc.w	r5, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e40:	464b      	mov	r3, r9
 8003e42:	eb45 0303 	adc.w	r3, r5, r3
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e66:	4629      	mov	r1, r5
 8003e68:	008b      	lsls	r3, r1, #2
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e70:	4621      	mov	r1, r4
 8003e72:	008a      	lsls	r2, r1, #2
 8003e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e78:	f7fc fa02 	bl	8000280 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b60      	ldr	r3, [pc, #384]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	61b9      	str	r1, [r7, #24]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f04:	4649      	mov	r1, r9
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0e:	4641      	mov	r1, r8
 8003f10:	008a      	lsls	r2, r1, #2
 8003f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f16:	f7fc f9b3 	bl	8000280 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4b38      	ldr	r3, [pc, #224]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003f22:	fba3 2301 	umull	r2, r3, r3, r1
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2264      	movs	r2, #100	@ 0x64
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	1acb      	subs	r3, r1, r3
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	3332      	adds	r3, #50	@ 0x32
 8003f34:	4a33      	ldr	r2, [pc, #204]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f92:	464b      	mov	r3, r9
 8003f94:	460a      	mov	r2, r1
 8003f96:	eb42 0303 	adc.w	r3, r2, r3
 8003f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	008b      	lsls	r3, r1, #2
 8003fb8:	4641      	mov	r1, r8
 8003fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	008a      	lsls	r2, r1, #2
 8003fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fc6:	f7fc f95b 	bl	8000280 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	@ 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	3332      	adds	r3, #50	@ 0x32
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4422      	add	r2, r4
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ffe:	46bd      	mov	sp, r7
 8004000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <sniprintf>:
 8004008:	b40c      	push	{r2, r3}
 800400a:	b530      	push	{r4, r5, lr}
 800400c:	4b17      	ldr	r3, [pc, #92]	@ (800406c <sniprintf+0x64>)
 800400e:	1e0c      	subs	r4, r1, #0
 8004010:	681d      	ldr	r5, [r3, #0]
 8004012:	b09d      	sub	sp, #116	@ 0x74
 8004014:	da08      	bge.n	8004028 <sniprintf+0x20>
 8004016:	238b      	movs	r3, #139	@ 0x8b
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800401e:	b01d      	add	sp, #116	@ 0x74
 8004020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004024:	b002      	add	sp, #8
 8004026:	4770      	bx	lr
 8004028:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800402c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004030:	bf14      	ite	ne
 8004032:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004036:	4623      	moveq	r3, r4
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	9307      	str	r3, [sp, #28]
 800403c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004040:	9002      	str	r0, [sp, #8]
 8004042:	9006      	str	r0, [sp, #24]
 8004044:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004048:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800404a:	ab21      	add	r3, sp, #132	@ 0x84
 800404c:	a902      	add	r1, sp, #8
 800404e:	4628      	mov	r0, r5
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	f000 f995 	bl	8004380 <_svfiprintf_r>
 8004056:	1c43      	adds	r3, r0, #1
 8004058:	bfbc      	itt	lt
 800405a:	238b      	movlt	r3, #139	@ 0x8b
 800405c:	602b      	strlt	r3, [r5, #0]
 800405e:	2c00      	cmp	r4, #0
 8004060:	d0dd      	beq.n	800401e <sniprintf+0x16>
 8004062:	9b02      	ldr	r3, [sp, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e7d9      	b.n	800401e <sniprintf+0x16>
 800406a:	bf00      	nop
 800406c:	20000070 	.word	0x20000070

08004070 <memset>:
 8004070:	4402      	add	r2, r0
 8004072:	4603      	mov	r3, r0
 8004074:	4293      	cmp	r3, r2
 8004076:	d100      	bne.n	800407a <memset+0xa>
 8004078:	4770      	bx	lr
 800407a:	f803 1b01 	strb.w	r1, [r3], #1
 800407e:	e7f9      	b.n	8004074 <memset+0x4>

08004080 <__errno>:
 8004080:	4b01      	ldr	r3, [pc, #4]	@ (8004088 <__errno+0x8>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000070 	.word	0x20000070

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	@ (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	@ (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	@ (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	@ (80040d0 <__libc_init_array+0x44>)
 80040a0:	f000 fc66 	bl	8004970 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	080049e4 	.word	0x080049e4
 80040c8:	080049e4 	.word	0x080049e4
 80040cc:	080049e4 	.word	0x080049e4
 80040d0:	080049e8 	.word	0x080049e8

080040d4 <__retarget_lock_acquire_recursive>:
 80040d4:	4770      	bx	lr

080040d6 <__retarget_lock_release_recursive>:
 80040d6:	4770      	bx	lr

080040d8 <_free_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4605      	mov	r5, r0
 80040dc:	2900      	cmp	r1, #0
 80040de:	d041      	beq.n	8004164 <_free_r+0x8c>
 80040e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e4:	1f0c      	subs	r4, r1, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	18e4      	addlt	r4, r4, r3
 80040ec:	f000 f8e0 	bl	80042b0 <__malloc_lock>
 80040f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <_free_r+0x90>)
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	b933      	cbnz	r3, 8004104 <_free_r+0x2c>
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6014      	str	r4, [r2, #0]
 80040fa:	4628      	mov	r0, r5
 80040fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004100:	f000 b8dc 	b.w	80042bc <__malloc_unlock>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d908      	bls.n	800411a <_free_r+0x42>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	1821      	adds	r1, r4, r0
 800410c:	428b      	cmp	r3, r1
 800410e:	bf01      	itttt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	1809      	addeq	r1, r1, r0
 8004116:	6021      	streq	r1, [r4, #0]
 8004118:	e7ed      	b.n	80040f6 <_free_r+0x1e>
 800411a:	461a      	mov	r2, r3
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b10b      	cbz	r3, 8004124 <_free_r+0x4c>
 8004120:	42a3      	cmp	r3, r4
 8004122:	d9fa      	bls.n	800411a <_free_r+0x42>
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	1850      	adds	r0, r2, r1
 8004128:	42a0      	cmp	r0, r4
 800412a:	d10b      	bne.n	8004144 <_free_r+0x6c>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	4401      	add	r1, r0
 8004130:	1850      	adds	r0, r2, r1
 8004132:	4283      	cmp	r3, r0
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	d1e0      	bne.n	80040fa <_free_r+0x22>
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	4408      	add	r0, r1
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	e7da      	b.n	80040fa <_free_r+0x22>
 8004144:	d902      	bls.n	800414c <_free_r+0x74>
 8004146:	230c      	movs	r3, #12
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	e7d6      	b.n	80040fa <_free_r+0x22>
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	1821      	adds	r1, r4, r0
 8004150:	428b      	cmp	r3, r1
 8004152:	bf04      	itt	eq
 8004154:	6819      	ldreq	r1, [r3, #0]
 8004156:	685b      	ldreq	r3, [r3, #4]
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	bf04      	itt	eq
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	6054      	str	r4, [r2, #4]
 8004162:	e7ca      	b.n	80040fa <_free_r+0x22>
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	bf00      	nop
 8004168:	200003cc 	.word	0x200003cc

0800416c <sbrk_aligned>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4e0f      	ldr	r6, [pc, #60]	@ (80041ac <sbrk_aligned+0x40>)
 8004170:	460c      	mov	r4, r1
 8004172:	6831      	ldr	r1, [r6, #0]
 8004174:	4605      	mov	r5, r0
 8004176:	b911      	cbnz	r1, 800417e <sbrk_aligned+0x12>
 8004178:	f000 fba6 	bl	80048c8 <_sbrk_r>
 800417c:	6030      	str	r0, [r6, #0]
 800417e:	4621      	mov	r1, r4
 8004180:	4628      	mov	r0, r5
 8004182:	f000 fba1 	bl	80048c8 <_sbrk_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d103      	bne.n	8004192 <sbrk_aligned+0x26>
 800418a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800418e:	4620      	mov	r0, r4
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	1cc4      	adds	r4, r0, #3
 8004194:	f024 0403 	bic.w	r4, r4, #3
 8004198:	42a0      	cmp	r0, r4
 800419a:	d0f8      	beq.n	800418e <sbrk_aligned+0x22>
 800419c:	1a21      	subs	r1, r4, r0
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fb92 	bl	80048c8 <_sbrk_r>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d1f2      	bne.n	800418e <sbrk_aligned+0x22>
 80041a8:	e7ef      	b.n	800418a <sbrk_aligned+0x1e>
 80041aa:	bf00      	nop
 80041ac:	200003c8 	.word	0x200003c8

080041b0 <_malloc_r>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	1ccd      	adds	r5, r1, #3
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	4606      	mov	r6, r0
 80041c6:	db01      	blt.n	80041cc <_malloc_r+0x1c>
 80041c8:	42a9      	cmp	r1, r5
 80041ca:	d904      	bls.n	80041d6 <_malloc_r+0x26>
 80041cc:	230c      	movs	r3, #12
 80041ce:	6033      	str	r3, [r6, #0]
 80041d0:	2000      	movs	r0, #0
 80041d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042ac <_malloc_r+0xfc>
 80041da:	f000 f869 	bl	80042b0 <__malloc_lock>
 80041de:	f8d8 3000 	ldr.w	r3, [r8]
 80041e2:	461c      	mov	r4, r3
 80041e4:	bb44      	cbnz	r4, 8004238 <_malloc_r+0x88>
 80041e6:	4629      	mov	r1, r5
 80041e8:	4630      	mov	r0, r6
 80041ea:	f7ff ffbf 	bl	800416c <sbrk_aligned>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	4604      	mov	r4, r0
 80041f2:	d158      	bne.n	80042a6 <_malloc_r+0xf6>
 80041f4:	f8d8 4000 	ldr.w	r4, [r8]
 80041f8:	4627      	mov	r7, r4
 80041fa:	2f00      	cmp	r7, #0
 80041fc:	d143      	bne.n	8004286 <_malloc_r+0xd6>
 80041fe:	2c00      	cmp	r4, #0
 8004200:	d04b      	beq.n	800429a <_malloc_r+0xea>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	4639      	mov	r1, r7
 8004206:	4630      	mov	r0, r6
 8004208:	eb04 0903 	add.w	r9, r4, r3
 800420c:	f000 fb5c 	bl	80048c8 <_sbrk_r>
 8004210:	4581      	cmp	r9, r0
 8004212:	d142      	bne.n	800429a <_malloc_r+0xea>
 8004214:	6821      	ldr	r1, [r4, #0]
 8004216:	1a6d      	subs	r5, r5, r1
 8004218:	4629      	mov	r1, r5
 800421a:	4630      	mov	r0, r6
 800421c:	f7ff ffa6 	bl	800416c <sbrk_aligned>
 8004220:	3001      	adds	r0, #1
 8004222:	d03a      	beq.n	800429a <_malloc_r+0xea>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	442b      	add	r3, r5
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	f8d8 3000 	ldr.w	r3, [r8]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	bb62      	cbnz	r2, 800428c <_malloc_r+0xdc>
 8004232:	f8c8 7000 	str.w	r7, [r8]
 8004236:	e00f      	b.n	8004258 <_malloc_r+0xa8>
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	1b52      	subs	r2, r2, r5
 800423c:	d420      	bmi.n	8004280 <_malloc_r+0xd0>
 800423e:	2a0b      	cmp	r2, #11
 8004240:	d917      	bls.n	8004272 <_malloc_r+0xc2>
 8004242:	1961      	adds	r1, r4, r5
 8004244:	42a3      	cmp	r3, r4
 8004246:	6025      	str	r5, [r4, #0]
 8004248:	bf18      	it	ne
 800424a:	6059      	strne	r1, [r3, #4]
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	bf08      	it	eq
 8004250:	f8c8 1000 	streq.w	r1, [r8]
 8004254:	5162      	str	r2, [r4, r5]
 8004256:	604b      	str	r3, [r1, #4]
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f82f 	bl	80042bc <__malloc_unlock>
 800425e:	f104 000b 	add.w	r0, r4, #11
 8004262:	1d23      	adds	r3, r4, #4
 8004264:	f020 0007 	bic.w	r0, r0, #7
 8004268:	1ac2      	subs	r2, r0, r3
 800426a:	bf1c      	itt	ne
 800426c:	1a1b      	subne	r3, r3, r0
 800426e:	50a3      	strne	r3, [r4, r2]
 8004270:	e7af      	b.n	80041d2 <_malloc_r+0x22>
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	42a3      	cmp	r3, r4
 8004276:	bf0c      	ite	eq
 8004278:	f8c8 2000 	streq.w	r2, [r8]
 800427c:	605a      	strne	r2, [r3, #4]
 800427e:	e7eb      	b.n	8004258 <_malloc_r+0xa8>
 8004280:	4623      	mov	r3, r4
 8004282:	6864      	ldr	r4, [r4, #4]
 8004284:	e7ae      	b.n	80041e4 <_malloc_r+0x34>
 8004286:	463c      	mov	r4, r7
 8004288:	687f      	ldr	r7, [r7, #4]
 800428a:	e7b6      	b.n	80041fa <_malloc_r+0x4a>
 800428c:	461a      	mov	r2, r3
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	42a3      	cmp	r3, r4
 8004292:	d1fb      	bne.n	800428c <_malloc_r+0xdc>
 8004294:	2300      	movs	r3, #0
 8004296:	6053      	str	r3, [r2, #4]
 8004298:	e7de      	b.n	8004258 <_malloc_r+0xa8>
 800429a:	230c      	movs	r3, #12
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	4630      	mov	r0, r6
 80042a0:	f000 f80c 	bl	80042bc <__malloc_unlock>
 80042a4:	e794      	b.n	80041d0 <_malloc_r+0x20>
 80042a6:	6005      	str	r5, [r0, #0]
 80042a8:	e7d6      	b.n	8004258 <_malloc_r+0xa8>
 80042aa:	bf00      	nop
 80042ac:	200003cc 	.word	0x200003cc

080042b0 <__malloc_lock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	@ (80042b8 <__malloc_lock+0x8>)
 80042b2:	f7ff bf0f 	b.w	80040d4 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	200003c4 	.word	0x200003c4

080042bc <__malloc_unlock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	@ (80042c4 <__malloc_unlock+0x8>)
 80042be:	f7ff bf0a 	b.w	80040d6 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	200003c4 	.word	0x200003c4

080042c8 <__ssputs_r>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	688e      	ldr	r6, [r1, #8]
 80042ce:	461f      	mov	r7, r3
 80042d0:	42be      	cmp	r6, r7
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	4682      	mov	sl, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	4690      	mov	r8, r2
 80042da:	d82d      	bhi.n	8004338 <__ssputs_r+0x70>
 80042dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042e4:	d026      	beq.n	8004334 <__ssputs_r+0x6c>
 80042e6:	6965      	ldr	r5, [r4, #20]
 80042e8:	6909      	ldr	r1, [r1, #16]
 80042ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ee:	eba3 0901 	sub.w	r9, r3, r1
 80042f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f6:	1c7b      	adds	r3, r7, #1
 80042f8:	444b      	add	r3, r9
 80042fa:	106d      	asrs	r5, r5, #1
 80042fc:	429d      	cmp	r5, r3
 80042fe:	bf38      	it	cc
 8004300:	461d      	movcc	r5, r3
 8004302:	0553      	lsls	r3, r2, #21
 8004304:	d527      	bpl.n	8004356 <__ssputs_r+0x8e>
 8004306:	4629      	mov	r1, r5
 8004308:	f7ff ff52 	bl	80041b0 <_malloc_r>
 800430c:	4606      	mov	r6, r0
 800430e:	b360      	cbz	r0, 800436a <__ssputs_r+0xa2>
 8004310:	6921      	ldr	r1, [r4, #16]
 8004312:	464a      	mov	r2, r9
 8004314:	f000 fae8 	bl	80048e8 <memcpy>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800431e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	6126      	str	r6, [r4, #16]
 8004326:	6165      	str	r5, [r4, #20]
 8004328:	444e      	add	r6, r9
 800432a:	eba5 0509 	sub.w	r5, r5, r9
 800432e:	6026      	str	r6, [r4, #0]
 8004330:	60a5      	str	r5, [r4, #8]
 8004332:	463e      	mov	r6, r7
 8004334:	42be      	cmp	r6, r7
 8004336:	d900      	bls.n	800433a <__ssputs_r+0x72>
 8004338:	463e      	mov	r6, r7
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	4632      	mov	r2, r6
 800433e:	4641      	mov	r1, r8
 8004340:	f000 faa8 	bl	8004894 <memmove>
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	1b9b      	subs	r3, r3, r6
 8004348:	60a3      	str	r3, [r4, #8]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	4433      	add	r3, r6
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	2000      	movs	r0, #0
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	462a      	mov	r2, r5
 8004358:	f000 fad4 	bl	8004904 <_realloc_r>
 800435c:	4606      	mov	r6, r0
 800435e:	2800      	cmp	r0, #0
 8004360:	d1e0      	bne.n	8004324 <__ssputs_r+0x5c>
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	4650      	mov	r0, sl
 8004366:	f7ff feb7 	bl	80040d8 <_free_r>
 800436a:	230c      	movs	r3, #12
 800436c:	f8ca 3000 	str.w	r3, [sl]
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800437c:	e7e9      	b.n	8004352 <__ssputs_r+0x8a>
	...

08004380 <_svfiprintf_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4698      	mov	r8, r3
 8004386:	898b      	ldrh	r3, [r1, #12]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	b09d      	sub	sp, #116	@ 0x74
 800438c:	4607      	mov	r7, r0
 800438e:	460d      	mov	r5, r1
 8004390:	4614      	mov	r4, r2
 8004392:	d510      	bpl.n	80043b6 <_svfiprintf_r+0x36>
 8004394:	690b      	ldr	r3, [r1, #16]
 8004396:	b973      	cbnz	r3, 80043b6 <_svfiprintf_r+0x36>
 8004398:	2140      	movs	r1, #64	@ 0x40
 800439a:	f7ff ff09 	bl	80041b0 <_malloc_r>
 800439e:	6028      	str	r0, [r5, #0]
 80043a0:	6128      	str	r0, [r5, #16]
 80043a2:	b930      	cbnz	r0, 80043b2 <_svfiprintf_r+0x32>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043ac:	b01d      	add	sp, #116	@ 0x74
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	2340      	movs	r3, #64	@ 0x40
 80043b4:	616b      	str	r3, [r5, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ba:	2320      	movs	r3, #32
 80043bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c4:	2330      	movs	r3, #48	@ 0x30
 80043c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004564 <_svfiprintf_r+0x1e4>
 80043ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043ce:	f04f 0901 	mov.w	r9, #1
 80043d2:	4623      	mov	r3, r4
 80043d4:	469a      	mov	sl, r3
 80043d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043da:	b10a      	cbz	r2, 80043e0 <_svfiprintf_r+0x60>
 80043dc:	2a25      	cmp	r2, #37	@ 0x25
 80043de:	d1f9      	bne.n	80043d4 <_svfiprintf_r+0x54>
 80043e0:	ebba 0b04 	subs.w	fp, sl, r4
 80043e4:	d00b      	beq.n	80043fe <_svfiprintf_r+0x7e>
 80043e6:	465b      	mov	r3, fp
 80043e8:	4622      	mov	r2, r4
 80043ea:	4629      	mov	r1, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff6b 	bl	80042c8 <__ssputs_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	f000 80a7 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 80043f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043fa:	445a      	add	r2, fp
 80043fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 809f 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 8004408:	2300      	movs	r3, #0
 800440a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800440e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004412:	f10a 0a01 	add.w	sl, sl, #1
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	9307      	str	r3, [sp, #28]
 800441a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800441e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004420:	4654      	mov	r4, sl
 8004422:	2205      	movs	r2, #5
 8004424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004428:	484e      	ldr	r0, [pc, #312]	@ (8004564 <_svfiprintf_r+0x1e4>)
 800442a:	f7fb fed9 	bl	80001e0 <memchr>
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	b9d8      	cbnz	r0, 800446a <_svfiprintf_r+0xea>
 8004432:	06d0      	lsls	r0, r2, #27
 8004434:	bf44      	itt	mi
 8004436:	2320      	movmi	r3, #32
 8004438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800443c:	0711      	lsls	r1, r2, #28
 800443e:	bf44      	itt	mi
 8004440:	232b      	movmi	r3, #43	@ 0x2b
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004446:	f89a 3000 	ldrb.w	r3, [sl]
 800444a:	2b2a      	cmp	r3, #42	@ 0x2a
 800444c:	d015      	beq.n	800447a <_svfiprintf_r+0xfa>
 800444e:	9a07      	ldr	r2, [sp, #28]
 8004450:	4654      	mov	r4, sl
 8004452:	2000      	movs	r0, #0
 8004454:	f04f 0c0a 	mov.w	ip, #10
 8004458:	4621      	mov	r1, r4
 800445a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445e:	3b30      	subs	r3, #48	@ 0x30
 8004460:	2b09      	cmp	r3, #9
 8004462:	d94b      	bls.n	80044fc <_svfiprintf_r+0x17c>
 8004464:	b1b0      	cbz	r0, 8004494 <_svfiprintf_r+0x114>
 8004466:	9207      	str	r2, [sp, #28]
 8004468:	e014      	b.n	8004494 <_svfiprintf_r+0x114>
 800446a:	eba0 0308 	sub.w	r3, r0, r8
 800446e:	fa09 f303 	lsl.w	r3, r9, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	46a2      	mov	sl, r4
 8004478:	e7d2      	b.n	8004420 <_svfiprintf_r+0xa0>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	1d19      	adds	r1, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	9103      	str	r1, [sp, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbb      	ittet	lt
 8004486:	425b      	neglt	r3, r3
 8004488:	f042 0202 	orrlt.w	r2, r2, #2
 800448c:	9307      	strge	r3, [sp, #28]
 800448e:	9307      	strlt	r3, [sp, #28]
 8004490:	bfb8      	it	lt
 8004492:	9204      	strlt	r2, [sp, #16]
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b2e      	cmp	r3, #46	@ 0x2e
 8004498:	d10a      	bne.n	80044b0 <_svfiprintf_r+0x130>
 800449a:	7863      	ldrb	r3, [r4, #1]
 800449c:	2b2a      	cmp	r3, #42	@ 0x2a
 800449e:	d132      	bne.n	8004506 <_svfiprintf_r+0x186>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	9203      	str	r2, [sp, #12]
 80044a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044ac:	3402      	adds	r4, #2
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004574 <_svfiprintf_r+0x1f4>
 80044b4:	7821      	ldrb	r1, [r4, #0]
 80044b6:	2203      	movs	r2, #3
 80044b8:	4650      	mov	r0, sl
 80044ba:	f7fb fe91 	bl	80001e0 <memchr>
 80044be:	b138      	cbz	r0, 80044d0 <_svfiprintf_r+0x150>
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	eba0 000a 	sub.w	r0, r0, sl
 80044c6:	2240      	movs	r2, #64	@ 0x40
 80044c8:	4082      	lsls	r2, r0
 80044ca:	4313      	orrs	r3, r2
 80044cc:	3401      	adds	r4, #1
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	4824      	ldr	r0, [pc, #144]	@ (8004568 <_svfiprintf_r+0x1e8>)
 80044d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044da:	2206      	movs	r2, #6
 80044dc:	f7fb fe80 	bl	80001e0 <memchr>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d036      	beq.n	8004552 <_svfiprintf_r+0x1d2>
 80044e4:	4b21      	ldr	r3, [pc, #132]	@ (800456c <_svfiprintf_r+0x1ec>)
 80044e6:	bb1b      	cbnz	r3, 8004530 <_svfiprintf_r+0x1b0>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	3307      	adds	r3, #7
 80044ec:	f023 0307 	bic.w	r3, r3, #7
 80044f0:	3308      	adds	r3, #8
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044f6:	4433      	add	r3, r6
 80044f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fa:	e76a      	b.n	80043d2 <_svfiprintf_r+0x52>
 80044fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004500:	460c      	mov	r4, r1
 8004502:	2001      	movs	r0, #1
 8004504:	e7a8      	b.n	8004458 <_svfiprintf_r+0xd8>
 8004506:	2300      	movs	r3, #0
 8004508:	3401      	adds	r4, #1
 800450a:	9305      	str	r3, [sp, #20]
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	4620      	mov	r0, r4
 8004514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004518:	3a30      	subs	r2, #48	@ 0x30
 800451a:	2a09      	cmp	r2, #9
 800451c:	d903      	bls.n	8004526 <_svfiprintf_r+0x1a6>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0c6      	beq.n	80044b0 <_svfiprintf_r+0x130>
 8004522:	9105      	str	r1, [sp, #20]
 8004524:	e7c4      	b.n	80044b0 <_svfiprintf_r+0x130>
 8004526:	fb0c 2101 	mla	r1, ip, r1, r2
 800452a:	4604      	mov	r4, r0
 800452c:	2301      	movs	r3, #1
 800452e:	e7f0      	b.n	8004512 <_svfiprintf_r+0x192>
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	462a      	mov	r2, r5
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <_svfiprintf_r+0x1f0>)
 8004538:	a904      	add	r1, sp, #16
 800453a:	4638      	mov	r0, r7
 800453c:	f3af 8000 	nop.w
 8004540:	1c42      	adds	r2, r0, #1
 8004542:	4606      	mov	r6, r0
 8004544:	d1d6      	bne.n	80044f4 <_svfiprintf_r+0x174>
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	065b      	lsls	r3, r3, #25
 800454a:	f53f af2d 	bmi.w	80043a8 <_svfiprintf_r+0x28>
 800454e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004550:	e72c      	b.n	80043ac <_svfiprintf_r+0x2c>
 8004552:	ab03      	add	r3, sp, #12
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	462a      	mov	r2, r5
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <_svfiprintf_r+0x1f0>)
 800455a:	a904      	add	r1, sp, #16
 800455c:	4638      	mov	r0, r7
 800455e:	f000 f879 	bl	8004654 <_printf_i>
 8004562:	e7ed      	b.n	8004540 <_svfiprintf_r+0x1c0>
 8004564:	080049a8 	.word	0x080049a8
 8004568:	080049b2 	.word	0x080049b2
 800456c:	00000000 	.word	0x00000000
 8004570:	080042c9 	.word	0x080042c9
 8004574:	080049ae 	.word	0x080049ae

08004578 <_printf_common>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	4616      	mov	r6, r2
 800457e:	4698      	mov	r8, r3
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004588:	4293      	cmp	r3, r2
 800458a:	bfb8      	it	lt
 800458c:	4613      	movlt	r3, r2
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004594:	4607      	mov	r7, r0
 8004596:	460c      	mov	r4, r1
 8004598:	b10a      	cbz	r2, 800459e <_printf_common+0x26>
 800459a:	3301      	adds	r3, #1
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	0699      	lsls	r1, r3, #26
 80045a2:	bf42      	ittt	mi
 80045a4:	6833      	ldrmi	r3, [r6, #0]
 80045a6:	3302      	addmi	r3, #2
 80045a8:	6033      	strmi	r3, [r6, #0]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	f015 0506 	ands.w	r5, r5, #6
 80045b0:	d106      	bne.n	80045c0 <_printf_common+0x48>
 80045b2:	f104 0a19 	add.w	sl, r4, #25
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	6832      	ldr	r2, [r6, #0]
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dc26      	bgt.n	800460e <_printf_common+0x96>
 80045c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	3b00      	subs	r3, #0
 80045c8:	bf18      	it	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	0692      	lsls	r2, r2, #26
 80045ce:	d42b      	bmi.n	8004628 <_printf_common+0xb0>
 80045d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045d4:	4641      	mov	r1, r8
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d01e      	beq.n	800461c <_printf_common+0xa4>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf02      	ittt	eq
 80045ea:	68e5      	ldreq	r5, [r4, #12]
 80045ec:	6833      	ldreq	r3, [r6, #0]
 80045ee:	1aed      	subeq	r5, r5, r3
 80045f0:	68a3      	ldr	r3, [r4, #8]
 80045f2:	bf0c      	ite	eq
 80045f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f8:	2500      	movne	r5, #0
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bfc4      	itt	gt
 80045fe:	1a9b      	subgt	r3, r3, r2
 8004600:	18ed      	addgt	r5, r5, r3
 8004602:	2600      	movs	r6, #0
 8004604:	341a      	adds	r4, #26
 8004606:	42b5      	cmp	r5, r6
 8004608:	d11a      	bne.n	8004640 <_printf_common+0xc8>
 800460a:	2000      	movs	r0, #0
 800460c:	e008      	b.n	8004620 <_printf_common+0xa8>
 800460e:	2301      	movs	r3, #1
 8004610:	4652      	mov	r2, sl
 8004612:	4641      	mov	r1, r8
 8004614:	4638      	mov	r0, r7
 8004616:	47c8      	blx	r9
 8004618:	3001      	adds	r0, #1
 800461a:	d103      	bne.n	8004624 <_printf_common+0xac>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	3501      	adds	r5, #1
 8004626:	e7c6      	b.n	80045b6 <_printf_common+0x3e>
 8004628:	18e1      	adds	r1, r4, r3
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	2030      	movs	r0, #48	@ 0x30
 800462e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004632:	4422      	add	r2, r4
 8004634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800463c:	3302      	adds	r3, #2
 800463e:	e7c7      	b.n	80045d0 <_printf_common+0x58>
 8004640:	2301      	movs	r3, #1
 8004642:	4622      	mov	r2, r4
 8004644:	4641      	mov	r1, r8
 8004646:	4638      	mov	r0, r7
 8004648:	47c8      	blx	r9
 800464a:	3001      	adds	r0, #1
 800464c:	d0e6      	beq.n	800461c <_printf_common+0xa4>
 800464e:	3601      	adds	r6, #1
 8004650:	e7d9      	b.n	8004606 <_printf_common+0x8e>
	...

08004654 <_printf_i>:
 8004654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	7e0f      	ldrb	r7, [r1, #24]
 800465a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800465c:	2f78      	cmp	r7, #120	@ 0x78
 800465e:	4691      	mov	r9, r2
 8004660:	4680      	mov	r8, r0
 8004662:	460c      	mov	r4, r1
 8004664:	469a      	mov	sl, r3
 8004666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800466a:	d807      	bhi.n	800467c <_printf_i+0x28>
 800466c:	2f62      	cmp	r7, #98	@ 0x62
 800466e:	d80a      	bhi.n	8004686 <_printf_i+0x32>
 8004670:	2f00      	cmp	r7, #0
 8004672:	f000 80d2 	beq.w	800481a <_printf_i+0x1c6>
 8004676:	2f58      	cmp	r7, #88	@ 0x58
 8004678:	f000 80b9 	beq.w	80047ee <_printf_i+0x19a>
 800467c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004684:	e03a      	b.n	80046fc <_printf_i+0xa8>
 8004686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800468a:	2b15      	cmp	r3, #21
 800468c:	d8f6      	bhi.n	800467c <_printf_i+0x28>
 800468e:	a101      	add	r1, pc, #4	@ (adr r1, 8004694 <_printf_i+0x40>)
 8004690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004694:	080046ed 	.word	0x080046ed
 8004698:	08004701 	.word	0x08004701
 800469c:	0800467d 	.word	0x0800467d
 80046a0:	0800467d 	.word	0x0800467d
 80046a4:	0800467d 	.word	0x0800467d
 80046a8:	0800467d 	.word	0x0800467d
 80046ac:	08004701 	.word	0x08004701
 80046b0:	0800467d 	.word	0x0800467d
 80046b4:	0800467d 	.word	0x0800467d
 80046b8:	0800467d 	.word	0x0800467d
 80046bc:	0800467d 	.word	0x0800467d
 80046c0:	08004801 	.word	0x08004801
 80046c4:	0800472b 	.word	0x0800472b
 80046c8:	080047bb 	.word	0x080047bb
 80046cc:	0800467d 	.word	0x0800467d
 80046d0:	0800467d 	.word	0x0800467d
 80046d4:	08004823 	.word	0x08004823
 80046d8:	0800467d 	.word	0x0800467d
 80046dc:	0800472b 	.word	0x0800472b
 80046e0:	0800467d 	.word	0x0800467d
 80046e4:	0800467d 	.word	0x0800467d
 80046e8:	080047c3 	.word	0x080047c3
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	1d1a      	adds	r2, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6032      	str	r2, [r6, #0]
 80046f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046fc:	2301      	movs	r3, #1
 80046fe:	e09d      	b.n	800483c <_printf_i+0x1e8>
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	1d19      	adds	r1, r3, #4
 8004706:	6031      	str	r1, [r6, #0]
 8004708:	0606      	lsls	r6, r0, #24
 800470a:	d501      	bpl.n	8004710 <_printf_i+0xbc>
 800470c:	681d      	ldr	r5, [r3, #0]
 800470e:	e003      	b.n	8004718 <_printf_i+0xc4>
 8004710:	0645      	lsls	r5, r0, #25
 8004712:	d5fb      	bpl.n	800470c <_printf_i+0xb8>
 8004714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004718:	2d00      	cmp	r5, #0
 800471a:	da03      	bge.n	8004724 <_printf_i+0xd0>
 800471c:	232d      	movs	r3, #45	@ 0x2d
 800471e:	426d      	negs	r5, r5
 8004720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004724:	4859      	ldr	r0, [pc, #356]	@ (800488c <_printf_i+0x238>)
 8004726:	230a      	movs	r3, #10
 8004728:	e011      	b.n	800474e <_printf_i+0xfa>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	0608      	lsls	r0, r1, #24
 8004730:	f853 5b04 	ldr.w	r5, [r3], #4
 8004734:	d402      	bmi.n	800473c <_printf_i+0xe8>
 8004736:	0649      	lsls	r1, r1, #25
 8004738:	bf48      	it	mi
 800473a:	b2ad      	uxthmi	r5, r5
 800473c:	2f6f      	cmp	r7, #111	@ 0x6f
 800473e:	4853      	ldr	r0, [pc, #332]	@ (800488c <_printf_i+0x238>)
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	bf14      	ite	ne
 8004744:	230a      	movne	r3, #10
 8004746:	2308      	moveq	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800474e:	6866      	ldr	r6, [r4, #4]
 8004750:	60a6      	str	r6, [r4, #8]
 8004752:	2e00      	cmp	r6, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90d      	cbnz	r5, 8004764 <_printf_i+0x110>
 8004760:	2e00      	cmp	r6, #0
 8004762:	d04b      	beq.n	80047fc <_printf_i+0x1a8>
 8004764:	4616      	mov	r6, r2
 8004766:	fbb5 f1f3 	udiv	r1, r5, r3
 800476a:	fb03 5711 	mls	r7, r3, r1, r5
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004774:	462f      	mov	r7, r5
 8004776:	42bb      	cmp	r3, r7
 8004778:	460d      	mov	r5, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x112>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x144>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07df      	lsls	r7, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x144>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	@ 0x30
 8004790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004794:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004798:	1b92      	subs	r2, r2, r6
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee6 	bl	8004578 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14a      	bne.n	8004846 <_printf_i+0x1f2>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f043 0320 	orr.w	r3, r3, #32
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	4833      	ldr	r0, [pc, #204]	@ (8004890 <_printf_i+0x23c>)
 80047c4:	2778      	movs	r7, #120	@ 0x78
 80047c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	6831      	ldr	r1, [r6, #0]
 80047ce:	061f      	lsls	r7, r3, #24
 80047d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0x188>
 80047d6:	065f      	lsls	r7, r3, #25
 80047d8:	bf48      	it	mi
 80047da:	b2ad      	uxthmi	r5, r5
 80047dc:	6031      	str	r1, [r6, #0]
 80047de:	07d9      	lsls	r1, r3, #31
 80047e0:	bf44      	itt	mi
 80047e2:	f043 0320 	orrmi.w	r3, r3, #32
 80047e6:	6023      	strmi	r3, [r4, #0]
 80047e8:	b11d      	cbz	r5, 80047f2 <_printf_i+0x19e>
 80047ea:	2310      	movs	r3, #16
 80047ec:	e7ac      	b.n	8004748 <_printf_i+0xf4>
 80047ee:	4827      	ldr	r0, [pc, #156]	@ (800488c <_printf_i+0x238>)
 80047f0:	e7e9      	b.n	80047c6 <_printf_i+0x172>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f023 0320 	bic.w	r3, r3, #32
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	e7f6      	b.n	80047ea <_printf_i+0x196>
 80047fc:	4616      	mov	r6, r2
 80047fe:	e7bd      	b.n	800477c <_printf_i+0x128>
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	1d18      	adds	r0, r3, #4
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	062e      	lsls	r6, r5, #24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	d501      	bpl.n	8004814 <_printf_i+0x1c0>
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	e002      	b.n	800481a <_printf_i+0x1c6>
 8004814:	0668      	lsls	r0, r5, #25
 8004816:	d5fb      	bpl.n	8004810 <_printf_i+0x1bc>
 8004818:	8019      	strh	r1, [r3, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	4616      	mov	r6, r2
 8004820:	e7bc      	b.n	800479c <_printf_i+0x148>
 8004822:	6833      	ldr	r3, [r6, #0]
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	6032      	str	r2, [r6, #0]
 8004828:	681e      	ldr	r6, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	2100      	movs	r1, #0
 800482e:	4630      	mov	r0, r6
 8004830:	f7fb fcd6 	bl	80001e0 <memchr>
 8004834:	b108      	cbz	r0, 800483a <_printf_i+0x1e6>
 8004836:	1b80      	subs	r0, r0, r6
 8004838:	6060      	str	r0, [r4, #4]
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	2300      	movs	r3, #0
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004844:	e7aa      	b.n	800479c <_printf_i+0x148>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	4632      	mov	r2, r6
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d0ad      	beq.n	80047b0 <_printf_i+0x15c>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d413      	bmi.n	8004882 <_printf_i+0x22e>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e7a6      	b.n	80047b4 <_printf_i+0x160>
 8004866:	2301      	movs	r3, #1
 8004868:	4632      	mov	r2, r6
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	47d0      	blx	sl
 8004870:	3001      	adds	r0, #1
 8004872:	d09d      	beq.n	80047b0 <_printf_i+0x15c>
 8004874:	3501      	adds	r5, #1
 8004876:	68e3      	ldr	r3, [r4, #12]
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	1a5b      	subs	r3, r3, r1
 800487c:	42ab      	cmp	r3, r5
 800487e:	dcf2      	bgt.n	8004866 <_printf_i+0x212>
 8004880:	e7eb      	b.n	800485a <_printf_i+0x206>
 8004882:	2500      	movs	r5, #0
 8004884:	f104 0619 	add.w	r6, r4, #25
 8004888:	e7f5      	b.n	8004876 <_printf_i+0x222>
 800488a:	bf00      	nop
 800488c:	080049b9 	.word	0x080049b9
 8004890:	080049ca 	.word	0x080049ca

08004894 <memmove>:
 8004894:	4288      	cmp	r0, r1
 8004896:	b510      	push	{r4, lr}
 8004898:	eb01 0402 	add.w	r4, r1, r2
 800489c:	d902      	bls.n	80048a4 <memmove+0x10>
 800489e:	4284      	cmp	r4, r0
 80048a0:	4623      	mov	r3, r4
 80048a2:	d807      	bhi.n	80048b4 <memmove+0x20>
 80048a4:	1e43      	subs	r3, r0, #1
 80048a6:	42a1      	cmp	r1, r4
 80048a8:	d008      	beq.n	80048bc <memmove+0x28>
 80048aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048b2:	e7f8      	b.n	80048a6 <memmove+0x12>
 80048b4:	4402      	add	r2, r0
 80048b6:	4601      	mov	r1, r0
 80048b8:	428a      	cmp	r2, r1
 80048ba:	d100      	bne.n	80048be <memmove+0x2a>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048c6:	e7f7      	b.n	80048b8 <memmove+0x24>

080048c8 <_sbrk_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	@ (80048e4 <_sbrk_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fab4 	bl	8000e40 <_sbrk>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_sbrk_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_sbrk_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200003c0 	.word	0x200003c0

080048e8 <memcpy>:
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80048f0:	d100      	bne.n	80048f4 <memcpy+0xc>
 80048f2:	4770      	bx	lr
 80048f4:	b510      	push	{r4, lr}
 80048f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048fe:	4291      	cmp	r1, r2
 8004900:	d1f9      	bne.n	80048f6 <memcpy+0xe>
 8004902:	bd10      	pop	{r4, pc}

08004904 <_realloc_r>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4680      	mov	r8, r0
 800490a:	4615      	mov	r5, r2
 800490c:	460c      	mov	r4, r1
 800490e:	b921      	cbnz	r1, 800491a <_realloc_r+0x16>
 8004910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	4611      	mov	r1, r2
 8004916:	f7ff bc4b 	b.w	80041b0 <_malloc_r>
 800491a:	b92a      	cbnz	r2, 8004928 <_realloc_r+0x24>
 800491c:	f7ff fbdc 	bl	80040d8 <_free_r>
 8004920:	2400      	movs	r4, #0
 8004922:	4620      	mov	r0, r4
 8004924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004928:	f000 f81a 	bl	8004960 <_malloc_usable_size_r>
 800492c:	4285      	cmp	r5, r0
 800492e:	4606      	mov	r6, r0
 8004930:	d802      	bhi.n	8004938 <_realloc_r+0x34>
 8004932:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004936:	d8f4      	bhi.n	8004922 <_realloc_r+0x1e>
 8004938:	4629      	mov	r1, r5
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fc38 	bl	80041b0 <_malloc_r>
 8004940:	4607      	mov	r7, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0ec      	beq.n	8004920 <_realloc_r+0x1c>
 8004946:	42b5      	cmp	r5, r6
 8004948:	462a      	mov	r2, r5
 800494a:	4621      	mov	r1, r4
 800494c:	bf28      	it	cs
 800494e:	4632      	movcs	r2, r6
 8004950:	f7ff ffca 	bl	80048e8 <memcpy>
 8004954:	4621      	mov	r1, r4
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff fbbe 	bl	80040d8 <_free_r>
 800495c:	463c      	mov	r4, r7
 800495e:	e7e0      	b.n	8004922 <_realloc_r+0x1e>

08004960 <_malloc_usable_size_r>:
 8004960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004964:	1f18      	subs	r0, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfbc      	itt	lt
 800496a:	580b      	ldrlt	r3, [r1, r0]
 800496c:	18c0      	addlt	r0, r0, r3
 800496e:	4770      	bx	lr

08004970 <_init>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr

0800497c <_fini>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

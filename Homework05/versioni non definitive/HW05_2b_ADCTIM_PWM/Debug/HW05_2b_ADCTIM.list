
HW05_2b_ADCTIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f6c  08004f6c  00005f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f74  08004f74  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00005f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f78  08004f78  00005f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08004fd8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004fd8  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e16d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea0  00000000  00000000  000141f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000160a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a78  00000000  00000000  00016df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017646  00000000  00000000  00017870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7cb  00000000  00000000  0002eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ec5  00000000  00000000  0003e681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  000d758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000db458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ef4 	.word	0x08004ef4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004ef4 	.word	0x08004ef4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 fca4 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db4:	f000 f822 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db8:	f000 fa00 	bl	80011bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dbc:	f000 f9d4 	bl	8001168 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000dc0:	f000 f888 	bl	8000ed4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000dc4:	f000 f8d8 	bl	8000f78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dc8:	f000 f978 	bl	80010bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc1);

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <main+0x48>)
 8000dce:	f000 fd4b 	bl	8001868 <HAL_ADC_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <main+0x30>
                  Error_Handler();
 8000dd8:	f000 faa6 	bl	8001328 <Error_Handler>

    // start pwm generation
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <main+0x4c>)
 8000de0:	f002 f99a 	bl	8003118 <HAL_TIM_PWM_Start>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <main+0x44>
                  Error_Handler();
 8000dea:	f000 fa9d 	bl	8001328 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <main+0x44>
 8000df4:	20000078 	.word	0x20000078
 8000df8:	200000c0 	.word	0x200000c0

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	@ 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fbf2 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a28      	ldr	r2, [pc, #160]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e70:	2310      	movs	r3, #16
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e74:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fbb6 	bl	80025f8 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e92:	f000 fa49 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fe18 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 fa33 	bl	8001328 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000ee8:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eec:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f18:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f3a:	f000 fc51 	bl	80017e0 <HAL_ADC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f44:	f000 f9f0 	bl	8001328 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f50:	2307      	movs	r3, #7
 8000f52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000f5a:	f000 fe75 	bl	8001c48 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f64:	f000 f9e0 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000078 	.word	0x20000078
 8000f74:	40012000 	.word	0x40012000

08000f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b096      	sub	sp, #88	@ 0x58
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2220      	movs	r2, #32
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fb1f 	bl	80045f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80010b8 <MX_TIM1_Init+0x140>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fbe:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000fc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000fca:	4b3a      	ldr	r3, [pc, #232]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd8:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b35      	ldr	r3, [pc, #212]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe4:	4833      	ldr	r0, [pc, #204]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8000fe6:	f001 ff9f 	bl	8002f28 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f99a 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ffe:	4619      	mov	r1, r3
 8001000:	482c      	ldr	r0, [pc, #176]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8001002:	f002 fa57 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800100c:	f000 f98c 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001010:	4828      	ldr	r0, [pc, #160]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8001012:	f001 ffd8 	bl	8002fc6 <HAL_TIM_OC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800101c:	f000 f984 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001028:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800102c:	4619      	mov	r1, r3
 800102e:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8001030:	f002 fde0 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800103a:	f000 f975 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8001064:	f002 f908 	bl	8003278 <HAL_TIM_OC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800106e:	f000 f95b 	bl	8001328 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 8001096:	f002 fe1b 	bl	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80010a0:	f000 f942 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM1_Init+0x13c>)
 80010a6:	f000 f9fb 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3758      	adds	r7, #88	@ 0x58
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000c0 	.word	0x200000c0
 80010b8:	40010000 	.word	0x40010000

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_TIM2_Init+0xa8>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_TIM2_Init+0xa8>)
 80010e8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_TIM2_Init+0xa8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_TIM2_Init+0xa8>)
 80010f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_TIM2_Init+0xa8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_TIM2_Init+0xa8>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001108:	4816      	ldr	r0, [pc, #88]	@ (8001164 <MX_TIM2_Init+0xa8>)
 800110a:	f001 ffb5 	bl	8003078 <HAL_TIM_PWM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 f908 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001118:	2320      	movs	r3, #32
 800111a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	@ (8001164 <MX_TIM2_Init+0xa8>)
 8001128:	f002 fd64 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001132:	f000 f8f9 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2360      	movs	r3, #96	@ 0x60
 8001138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_TIM2_Init+0xa8>)
 800114e:	f002 f8ef 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001158:	f000 f8e6 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000108 	.word	0x20000108

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f002 fde8 	bl	8003d74 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 f8bd 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000150 	.word	0x20000150
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a25      	ldr	r2, [pc, #148]	@ (800128c <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <MX_GPIO_Init+0xd0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a17      	ldr	r2, [pc, #92]	@ (800128c <MX_GPIO_Init+0xd0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_GPIO_Init+0xd4>)
 8001248:	f001 f9bc 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001252:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_GPIO_Init+0xd8>)
 8001264:	f001 f82a 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001268:	2320      	movs	r3, #32
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_GPIO_Init+0xd4>)
 8001280:	f001 f81c 	bl	80022bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	@ 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020800 	.word	0x40020800

08001298 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b098      	sub	sp, #96	@ 0x60
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
  int conversion =HAL_ADC_GetValue(&hadc1);
 80012a0:	481d      	ldr	r0, [pc, #116]	@ (8001318 <HAL_ADC_ConvCpltCallback+0x80>)
 80012a2:	f000 fcaf 	bl	8001c04 <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	657b      	str	r3, [r7, #84]	@ 0x54
  float voltage =conversion*3.3/4096.0;
 80012aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80012ac:	f7ff f93a 	bl	8000524 <__aeabi_i2d>
 80012b0:	a317      	add	r3, pc, #92	@ (adr r3, 8001310 <HAL_ADC_ConvCpltCallback+0x78>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f99f 	bl	80005f8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_ADC_ConvCpltCallback+0x84>)
 80012c8:	f7ff fac0 	bl	800084c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fba2 	bl	8000a1c <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	653b      	str	r3, [r7, #80]	@ 0x50
  char string[64];
  int lenght = snprintf(string, sizeof(string), "voltage: %.3f V\r\n", voltage);
 80012dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	f107 000c 	add.w	r0, r7, #12
 80012ea:	e9cd 2300 	strd	r2, r3, [sp]
 80012ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x88>)
 80012f0:	2140      	movs	r1, #64	@ 0x40
 80012f2:	f003 f94b 	bl	800458c <sniprintf>
 80012f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
  HAL_UART_Transmit(&huart2, string, lenght, 100);
 80012f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	2364      	movs	r3, #100	@ 0x64
 8001302:	4808      	ldr	r0, [pc, #32]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001304:	f002 fd86 	bl	8003e14 <HAL_UART_Transmit>

}
 8001308:	bf00      	nop
 800130a:	3758      	adds	r7, #88	@ 0x58
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	66666666 	.word	0x66666666
 8001314:	400a6666 	.word	0x400a6666
 8001318:	20000078 	.word	0x20000078
 800131c:	40b00000 	.word	0x40b00000
 8001320:	08004f0c 	.word	0x08004f0c
 8001324:	20000150 	.word	0x20000150

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <Error_Handler+0x8>

08001334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001372:	2007      	movs	r0, #7
 8001374:	f000 ff60 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_ADC_MspInit+0x8c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12f      	bne.n	8001406 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_ADC_MspInit+0x90>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013de:	2302      	movs	r3, #2
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4809      	ldr	r0, [pc, #36]	@ (8001418 <HAL_ADC_MspInit+0x94>)
 80013f2:	f000 ff63 	bl	80022bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2012      	movs	r0, #18
 80013fc:	f000 ff27 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001400:	2012      	movs	r0, #18
 8001402:	f000 ff40 	bl	8002286 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40012000 	.word	0x40012000
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_TIM_Base_MspInit+0x3c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10d      	bne.n	800144a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_TIM_Base_MspInit+0x40>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_TIM_Base_MspInit+0x40>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_Base_MspInit+0x40>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001470:	d10d      	bne.n	800148e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11e      	bne.n	8001500 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <HAL_TIM_MspPostInit+0x70>)
 80014fc:	f000 fede 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010000 	.word	0x40010000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <HAL_UART_MspInit+0x84>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12b      	bne.n	800158e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_UART_MspInit+0x88>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	6413      	str	r3, [r2, #64]	@ 0x40
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <HAL_UART_MspInit+0x88>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800156e:	230c      	movs	r3, #12
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157e:	2307      	movs	r3, #7
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <HAL_UART_MspInit+0x8c>)
 800158a:	f000 fe97 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004400 	.word	0x40004400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f8d1 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <ADC_IRQHandler+0x10>)
 800160a:	f000 f9eb 	bl	80019e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000078 	.word	0x20000078

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f002 ffdc 	bl	8004604 <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20018000 	.word	0x20018000
 8001678:	00000400 	.word	0x00000400
 800167c:	20000198 	.word	0x20000198
 8001680:	200002e8 	.word	0x200002e8

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f002 ff9b 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fb67 	bl	8000dac <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016ec:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 80016f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016f4:	200002e8 	.word	0x200002e8

080016f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <DMA1_Stream0_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 fd87 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fe00 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fd9f 	bl	80022a2 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 fd67 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000000 	.word	0x20000000
 8001798:	20000008 	.word	0x20000008
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008
 80017c4:	2000019c 	.word	0x2000019c

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2000019c 	.word	0x2000019c

080017e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e033      	b.n	800185e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fdc0 	bl	8001384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001826:	f023 0302 	bic.w	r3, r3, #2
 800182a:	f043 0202 	orr.w	r2, r3, #2
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fb2a 	bl	8001e8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	@ 0x40
 800184e:	e001      	b.n	8001854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Start_IT+0x1a>
 800187e:	2302      	movs	r3, #2
 8001880:	e0a1      	b.n	80019c6 <HAL_ADC_Start_IT+0x15e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d018      	beq.n	80018ca <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_ADC_Start_IT+0x16c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	@ (80019d8 <HAL_ADC_Start_IT+0x170>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9a      	lsrs	r2, r3, #18
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d169      	bne.n	80019ac <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001902:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001916:	d106      	bne.n	8001926 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	f023 0206 	bic.w	r2, r3, #6
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	645a      	str	r2, [r3, #68]	@ 0x44
 8001924:	e002      	b.n	800192c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001934:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_ADC_Start_IT+0x174>)
 8001936:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001940:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d129      	bne.n	80019c4 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e020      	b.n	80019c4 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	@ (80019e0 <HAL_ADC_Start_IT+0x178>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11b      	bne.n	80019c4 <HAL_ADC_Start_IT+0x15c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d114      	bne.n	80019c4 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	e00b      	b.n	80019c4 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	f043 0210 	orr.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	40012300 	.word	0x40012300
 80019e0:	40012000 	.word	0x40012000

080019e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d049      	beq.n	8001aae <HAL_ADC_IRQHandler+0xca>
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d046      	beq.n	8001aae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12b      	bne.n	8001a9e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d127      	bne.n	8001a9e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d119      	bne.n	8001a9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0220 	bic.w	r2, r2, #32
 8001a78:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fbfa 	bl	8001298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0212 	mvn.w	r2, #18
 8001aac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d057      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x190>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d054      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d139      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12b      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d124      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11d      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d119      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b3e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa8d 	bl	8002084 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f06f 020c 	mvn.w	r2, #12
 8001b72:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d017      	beq.n	8001bba <HAL_ADC_IRQHandler+0x1d6>
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d014      	beq.n	8001bba <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10d      	bne.n	8001bba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f837 	bl	8001c1e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0201 	mvn.w	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bc8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x218>
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d012      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0220 	mvn.w	r2, #32
 8001bea:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f820 	bl	8001c32 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f06f 0220 	mvn.w	r2, #32
 8001bfa:	601a      	str	r2, [r3, #0]
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1c>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e105      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x228>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d925      	bls.n	8001cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	3b1e      	subs	r3, #30
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43da      	mvns	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	400a      	ands	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	4603      	mov	r3, r0
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4403      	add	r3, r0
 8001cb2:	3b1e      	subs	r3, #30
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	e022      	b.n	8001d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4403      	add	r3, r0
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d824      	bhi.n	8001d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b05      	subs	r3, #5
 8001d20:	221f      	movs	r2, #31
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b05      	subs	r3, #5
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d56:	e04c      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d824      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b23      	subs	r3, #35	@ 0x23
 8001d72:	221f      	movs	r2, #31
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b23      	subs	r3, #35	@ 0x23
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da8:	e023      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b41      	subs	r3, #65	@ 0x41
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b41      	subs	r3, #65	@ 0x41
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df2:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <HAL_ADC_ConfigChannel+0x234>)
 8001df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_ADC_ConfigChannel+0x238>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1cc>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b12      	cmp	r3, #18
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_ADC_ConfigChannel+0x238>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d123      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x21e>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d003      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x1e6>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b11      	cmp	r3, #17
 8001e2c:	d11b      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d111      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_ADC_ConfigChannel+0x23c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_ADC_ConfigChannel+0x240>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9a      	lsrs	r2, r3, #18
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	40012000 	.word	0x40012000
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83

08001e8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e94:	4b79      	ldr	r3, [pc, #484]	@ (800207c <ADC_Init+0x1f0>)
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	021a      	lsls	r2, r3, #8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	4a58      	ldr	r2, [pc, #352]	@ (8002080 <ADC_Init+0x1f4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d022      	beq.n	8001f6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	e00f      	b.n	8001f8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0202 	bic.w	r2, r2, #2
 8001f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e1b      	ldrb	r3, [r3, #24]
 8001fa4:	005a      	lsls	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	035a      	lsls	r2, r3, #13
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	e007      	b.n	8002000 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800200e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	3b01      	subs	r3, #1
 800201c:	051a      	lsls	r2, r3, #20
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002042:	025a      	lsls	r2, r3, #9
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800205a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	029a      	lsls	r2, r3, #10
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	0f000001 	.word	0x0f000001

08002084 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e159      	b.n	800258c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8148 	bne.w	8002586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a2 	beq.w	8002586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b57      	ldr	r3, [pc, #348]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a56      	ldr	r2, [pc, #344]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a49      	ldr	r2, [pc, #292]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x202>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a48      	ldr	r2, [pc, #288]	@ (80025b0 <HAL_GPIO_Init+0x2f4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x1fe>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a47      	ldr	r2, [pc, #284]	@ (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x1fa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a46      	ldr	r2, [pc, #280]	@ (80025b8 <HAL_GPIO_Init+0x2fc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <HAL_GPIO_Init+0x300>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x1f2>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a2f      	ldr	r2, [pc, #188]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f aea2 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	@ 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f88a 	bl	80017c8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f886 	bl	80017c8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f876 	bl	80017c8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f872 	bl	80017c8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800270e:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff f82b 	bl	80017c8 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff f827 	bl	80017c8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff f80a 	bl	80017c8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff f806 	bl	80017c8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe ffea 	bl	80017c8 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe ffe6 	bl	80017c8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe ffd3 	bl	80017c8 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe ffcf 	bl	80017c8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	@ 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe ff8f 	bl	80017c8 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe ff8b 	bl	80017c8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe ff50 	bl	80017c8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe ff4c 	bl	80017c8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe ff3a 	bl	80017c8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe ff36 	bl	80017c8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe ff0a 	bl	80017c8 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe ff06 	bl	80017c8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fedf 	bl	80017c8 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fedb 	bl	80017c8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fec8 	bl	80017c8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fec4 	bl	80017c8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fdf6 	bl	80017c8 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fdf2 	bl	80017c8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd56 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08004f20 	.word	0x08004f20
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	@ 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc4:	f7fd fe7a 	bl	8000abc <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fe20 	bl	8000abc <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	@ 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08004f30 	.word	0x08004f30

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08004f30 	.word	0x08004f30

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fa64 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fb6c 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e041      	b.n	800305c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f839 	bl	8003064 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fb1d 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f9de 	bl	8001460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 fac4 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_TIM_PWM_Start+0x24>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e022      	b.n	8003182 <HAL_TIM_PWM_Start+0x6a>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d109      	bne.n	8003156 <HAL_TIM_PWM_Start+0x3e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e015      	b.n	8003182 <HAL_TIM_PWM_Start+0x6a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d109      	bne.n	8003170 <HAL_TIM_PWM_Start+0x58>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e008      	b.n	8003182 <HAL_TIM_PWM_Start+0x6a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e068      	b.n	800325c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0x82>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003198:	e013      	b.n	80031c2 <HAL_TIM_PWM_Start+0xaa>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start+0x92>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_PWM_Start+0xaa>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start+0xa2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b8:	e003      	b.n	80031c2 <HAL_TIM_PWM_Start+0xaa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	6839      	ldr	r1, [r7, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fcec 	bl	8003ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_TIM_PWM_Start+0x14c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d107      	bne.n	80031ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003264 <HAL_TIM_PWM_Start+0x14c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_TIM_PWM_Start+0x10e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fc:	d013      	beq.n	8003226 <HAL_TIM_PWM_Start+0x10e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <HAL_TIM_PWM_Start+0x150>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIM_PWM_Start+0x10e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a17      	ldr	r2, [pc, #92]	@ (800326c <HAL_TIM_PWM_Start+0x154>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_TIM_PWM_Start+0x10e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a16      	ldr	r2, [pc, #88]	@ (8003270 <HAL_TIM_PWM_Start+0x158>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIM_PWM_Start+0x10e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a14      	ldr	r2, [pc, #80]	@ (8003274 <HAL_TIM_PWM_Start+0x15c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d010      	beq.n	800325a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	e007      	b.n	800325a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40014000 	.word	0x40014000

08003278 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003292:	2302      	movs	r3, #2
 8003294:	e048      	b.n	8003328 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d839      	bhi.n	8003318 <HAL_TIM_OC_ConfigChannel+0xa0>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	08003319 	.word	0x08003319
 80032b4:	08003319 	.word	0x08003319
 80032b8:	08003319 	.word	0x08003319
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	08003319 	.word	0x08003319
 80032c4:	08003319 	.word	0x08003319
 80032c8:	08003319 	.word	0x08003319
 80032cc:	080032fd 	.word	0x080032fd
 80032d0:	08003319 	.word	0x08003319
 80032d4:	08003319 	.word	0x08003319
 80032d8:	08003319 	.word	0x08003319
 80032dc:	0800330b 	.word	0x0800330b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa38 	bl	800375c <TIM_OC1_SetConfig>
      break;
 80032ec:	e017      	b.n	800331e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fa97 	bl	8003828 <TIM_OC2_SetConfig>
      break;
 80032fa:	e010      	b.n	800331e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fafc 	bl	8003900 <TIM_OC3_SetConfig>
      break;
 8003308:	e009      	b.n	800331e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fb5f 	bl	80039d4 <TIM_OC4_SetConfig>
      break;
 8003316:	e002      	b.n	800331e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
      break;
 800331c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800334a:	2302      	movs	r3, #2
 800334c:	e0ae      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	f200 809f 	bhi.w	800349c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800335e:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003399 	.word	0x08003399
 8003368:	0800349d 	.word	0x0800349d
 800336c:	0800349d 	.word	0x0800349d
 8003370:	0800349d 	.word	0x0800349d
 8003374:	080033d9 	.word	0x080033d9
 8003378:	0800349d 	.word	0x0800349d
 800337c:	0800349d 	.word	0x0800349d
 8003380:	0800349d 	.word	0x0800349d
 8003384:	0800341b 	.word	0x0800341b
 8003388:	0800349d 	.word	0x0800349d
 800338c:	0800349d 	.word	0x0800349d
 8003390:	0800349d 	.word	0x0800349d
 8003394:	0800345b 	.word	0x0800345b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9dc 	bl	800375c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0208 	orr.w	r2, r2, #8
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	619a      	str	r2, [r3, #24]
      break;
 80033d6:	e064      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa22 	bl	8003828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
      break;
 8003418:	e043      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa6d 	bl	8003900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0208 	orr.w	r2, r2, #8
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	61da      	str	r2, [r3, #28]
      break;
 8003458:	e023      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fab7 	bl	80039d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	61da      	str	r2, [r3, #28]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
      break;
 80034a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0b4      	b.n	800363a <HAL_TIM_ConfigClockSource+0x186>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003508:	d03e      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xd4>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350e:	f200 8087 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	f000 8086 	beq.w	8003626 <HAL_TIM_ConfigClockSource+0x172>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	d87f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d01a      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xa6>
 8003524:	2b70      	cmp	r3, #112	@ 0x70
 8003526:	d87b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d050      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x11a>
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d877      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xfa>
 8003534:	2b50      	cmp	r3, #80	@ 0x50
 8003536:	d873      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d058      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x13a>
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d86f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d064      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b30      	cmp	r3, #48	@ 0x30
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d867      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d05a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003558:	e062      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	f000 fafd 	bl	8003b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800357c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e04f      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	f000 fae6 	bl	8003b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 fa5a 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	@ 0x50
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fab3 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa79 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	@ 0x60
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 faa3 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fa3a 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	@ 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa93 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 800360c:	e00c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fa8a 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 800361e:	e003      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e000      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3a      	ldr	r2, [pc, #232]	@ (8003740 <TIM_Base_SetConfig+0xfc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00f      	beq.n	800367c <TIM_Base_SetConfig+0x38>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003662:	d00b      	beq.n	800367c <TIM_Base_SetConfig+0x38>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a37      	ldr	r2, [pc, #220]	@ (8003744 <TIM_Base_SetConfig+0x100>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <TIM_Base_SetConfig+0x38>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a36      	ldr	r2, [pc, #216]	@ (8003748 <TIM_Base_SetConfig+0x104>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_Base_SetConfig+0x38>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a35      	ldr	r2, [pc, #212]	@ (800374c <TIM_Base_SetConfig+0x108>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <TIM_Base_SetConfig+0xfc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01b      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369c:	d017      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <TIM_Base_SetConfig+0x100>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <TIM_Base_SetConfig+0x104>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a26      	ldr	r2, [pc, #152]	@ (800374c <TIM_Base_SetConfig+0x108>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <TIM_Base_SetConfig+0x10c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <TIM_Base_SetConfig+0x110>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <TIM_Base_SetConfig+0x114>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a0e      	ldr	r2, [pc, #56]	@ (8003740 <TIM_Base_SetConfig+0xfc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]
  }
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40014000 	.word	0x40014000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f023 0201 	bic.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <TIM_OC1_SetConfig+0xc8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10c      	bne.n	80037d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0308 	bic.w	r3, r3, #8
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a13      	ldr	r2, [pc, #76]	@ (8003824 <TIM_OC1_SetConfig+0xc8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d111      	bne.n	80037fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40010000 	.word	0x40010000

08003828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f023 0210 	bic.w	r2, r3, #16
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0320 	bic.w	r3, r3, #32
 8003872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1e      	ldr	r2, [pc, #120]	@ (80038fc <TIM_OC2_SetConfig+0xd4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10d      	bne.n	80038a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <TIM_OC2_SetConfig+0xd4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40010000 	.word	0x40010000

08003900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <TIM_OC3_SetConfig+0xd0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10d      	bne.n	800397a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <TIM_OC3_SetConfig+0xd0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d113      	bne.n	80039aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	621a      	str	r2, [r3, #32]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40010000 	.word	0x40010000

080039d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <TIM_OC4_SetConfig+0x9c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 0210 	bic.w	r2, r3, #16
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f043 0307 	orr.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e050      	b.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d013      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10c      	bne.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e03d      	b.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e042      	b.n	8003e0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd fbba 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2224      	movs	r2, #36	@ 0x24
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f973 	bl	80040a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	@ 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d175      	bne.n	8003f20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Transmit+0x2c>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e06e      	b.n	8003f22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2221      	movs	r2, #33	@ 0x21
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e52:	f7fd fcb9 	bl	80017c8 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6c:	d108      	bne.n	8003e80 <HAL_UART_Transmit+0x6c>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d104      	bne.n	8003e80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e003      	b.n	8003e88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e88:	e02e      	b.n	8003ee8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f848 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e03a      	b.n	8003f22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	e007      	b.n	8003eda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	781a      	ldrb	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1cb      	bne.n	8003e8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	@ 0x40
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f814 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e006      	b.n	8003f22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	e03b      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d037      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fd fc40 	bl	80017c8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e03a      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d023      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b80      	cmp	r3, #128	@ 0x80
 8003f70:	d020      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d01d      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d116      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f81d 	bl	8003fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e00f      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d0b4      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b095      	sub	sp, #84	@ 0x54
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004004:	643a      	str	r2, [r7, #64]	@ 0x40
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	61fb      	str	r3, [r7, #28]
   return(result);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800403e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	d119      	bne.n	8004088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60bb      	str	r3, [r7, #8]
   return(result);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0310 	bic.w	r3, r3, #16
 800406a:	647b      	str	r3, [r7, #68]	@ 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004074:	61ba      	str	r2, [r7, #24]
 8004076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	613b      	str	r3, [r7, #16]
   return(result);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004096:	bf00      	nop
 8004098:	3754      	adds	r7, #84	@ 0x54
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a8:	b0c0      	sub	sp, #256	@ 0x100
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	68d9      	ldr	r1, [r3, #12]
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	ea40 0301 	orr.w	r3, r0, r1
 80040cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040fc:	f021 010c 	bic.w	r1, r1, #12
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800410a:	430b      	orrs	r3, r1
 800410c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	6999      	ldr	r1, [r3, #24]
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	ea40 0301 	orr.w	r3, r0, r1
 800412a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b8f      	ldr	r3, [pc, #572]	@ (8004370 <UART_SetConfig+0x2cc>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d005      	beq.n	8004144 <UART_SetConfig+0xa0>
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b8d      	ldr	r3, [pc, #564]	@ (8004374 <UART_SetConfig+0x2d0>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d104      	bne.n	800414e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fedc 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8004148:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800414c:	e003      	b.n	8004156 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800414e:	f7fe fec3 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8004152:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004160:	f040 810c 	bne.w	800437c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800416e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004172:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	1891      	adds	r1, r2, r2
 800417c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800417e:	415b      	adcs	r3, r3
 8004180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004182:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004186:	4621      	mov	r1, r4
 8004188:	eb12 0801 	adds.w	r8, r2, r1
 800418c:	4629      	mov	r1, r5
 800418e:	eb43 0901 	adc.w	r9, r3, r1
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a6:	4690      	mov	r8, r2
 80041a8:	4699      	mov	r9, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	eb18 0303 	adds.w	r3, r8, r3
 80041b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b4:	462b      	mov	r3, r5
 80041b6:	eb49 0303 	adc.w	r3, r9, r3
 80041ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041d2:	460b      	mov	r3, r1
 80041d4:	18db      	adds	r3, r3, r3
 80041d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d8:	4613      	mov	r3, r2
 80041da:	eb42 0303 	adc.w	r3, r2, r3
 80041de:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041e8:	f7fc fc68 	bl	8000abc <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2302 	umull	r2, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	011c      	lsls	r4, r3, #4
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004204:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004208:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004214:	415b      	adcs	r3, r3
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800421c:	4641      	mov	r1, r8
 800421e:	eb12 0a01 	adds.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb43 0b01 	adc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423c:	4692      	mov	sl, r2
 800423e:	469b      	mov	fp, r3
 8004240:	4643      	mov	r3, r8
 8004242:	eb1a 0303 	adds.w	r3, sl, r3
 8004246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424a:	464b      	mov	r3, r9
 800424c:	eb4b 0303 	adc.w	r3, fp, r3
 8004250:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004260:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004264:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004268:	460b      	mov	r3, r1
 800426a:	18db      	adds	r3, r3, r3
 800426c:	643b      	str	r3, [r7, #64]	@ 0x40
 800426e:	4613      	mov	r3, r2
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	647b      	str	r3, [r7, #68]	@ 0x44
 8004276:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800427e:	f7fc fc1d 	bl	8000abc <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <UART_SetConfig+0x2d4>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	@ 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800429e:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <UART_SetConfig+0x2d4>)
 80042a0:	fba3 2302 	umull	r2, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042ac:	441c      	add	r4, r3
 80042ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042c8:	415b      	adcs	r3, r3
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d0:	4641      	mov	r1, r8
 80042d2:	1851      	adds	r1, r2, r1
 80042d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042d6:	4649      	mov	r1, r9
 80042d8:	414b      	adcs	r3, r1
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042e8:	4659      	mov	r1, fp
 80042ea:	00cb      	lsls	r3, r1, #3
 80042ec:	4651      	mov	r1, sl
 80042ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f2:	4651      	mov	r1, sl
 80042f4:	00ca      	lsls	r2, r1, #3
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	4642      	mov	r2, r8
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004304:	464b      	mov	r3, r9
 8004306:	460a      	mov	r2, r1
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800431c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004324:	460b      	mov	r3, r1
 8004326:	18db      	adds	r3, r3, r3
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432a:	4613      	mov	r3, r2
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004336:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800433a:	f7fc fbbf 	bl	8000abc <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <UART_SetConfig+0x2d4>)
 8004344:	fba3 1302 	umull	r1, r3, r3, r2
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	2164      	movs	r1, #100	@ 0x64
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	3332      	adds	r3, #50	@ 0x32
 8004356:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <UART_SetConfig+0x2d4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	f003 0207 	and.w	r2, r3, #7
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4422      	add	r2, r4
 800436a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800436c:	e106      	b.n	800457c <UART_SetConfig+0x4d8>
 800436e:	bf00      	nop
 8004370:	40011000 	.word	0x40011000
 8004374:	40011400 	.word	0x40011400
 8004378:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800437c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004386:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800438a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800438e:	4642      	mov	r2, r8
 8004390:	464b      	mov	r3, r9
 8004392:	1891      	adds	r1, r2, r2
 8004394:	6239      	str	r1, [r7, #32]
 8004396:	415b      	adcs	r3, r3
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800439e:	4641      	mov	r1, r8
 80043a0:	1854      	adds	r4, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb43 0501 	adc.w	r5, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	00eb      	lsls	r3, r5, #3
 80043b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b6:	00e2      	lsls	r2, r4, #3
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	4643      	mov	r3, r8
 80043be:	18e3      	adds	r3, r4, r3
 80043c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c4:	464b      	mov	r3, r9
 80043c6:	eb45 0303 	adc.w	r3, r5, r3
 80043ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ea:	4629      	mov	r1, r5
 80043ec:	008b      	lsls	r3, r1, #2
 80043ee:	4621      	mov	r1, r4
 80043f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f4:	4621      	mov	r1, r4
 80043f6:	008a      	lsls	r2, r1, #2
 80043f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043fc:	f7fc fb5e 	bl	8000abc <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4b60      	ldr	r3, [pc, #384]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004406:	fba3 2302 	umull	r2, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	011c      	lsls	r4, r3, #4
 800440e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004418:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800441c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	61b9      	str	r1, [r7, #24]
 8004428:	415b      	adcs	r3, r3
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6139      	str	r1, [r7, #16]
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004488:	4649      	mov	r1, r9
 800448a:	008b      	lsls	r3, r1, #2
 800448c:	4641      	mov	r1, r8
 800448e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004492:	4641      	mov	r1, r8
 8004494:	008a      	lsls	r2, r1, #2
 8004496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800449a:	f7fc fb0f 	bl	8000abc <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2301 	umull	r2, r3, r3, r1
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2264      	movs	r2, #100	@ 0x64
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	1acb      	subs	r3, r1, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	@ 0x32
 80044b8:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <UART_SetConfig+0x4e4>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c4:	441c      	add	r4, r3
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	1891      	adds	r1, r2, r2
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	415b      	adcs	r3, r3
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e4:	4641      	mov	r1, r8
 80044e6:	1851      	adds	r1, r2, r1
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	4649      	mov	r1, r9
 80044ec:	414b      	adcs	r3, r1
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044fc:	4659      	mov	r1, fp
 80044fe:	00cb      	lsls	r3, r1, #3
 8004500:	4651      	mov	r1, sl
 8004502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004506:	4651      	mov	r1, sl
 8004508:	00ca      	lsls	r2, r1, #3
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	4603      	mov	r3, r0
 8004510:	4642      	mov	r2, r8
 8004512:	189b      	adds	r3, r3, r2
 8004514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004516:	464b      	mov	r3, r9
 8004518:	460a      	mov	r2, r1
 800451a:	eb42 0303 	adc.w	r3, r2, r3
 800451e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	663b      	str	r3, [r7, #96]	@ 0x60
 800452a:	667a      	str	r2, [r7, #100]	@ 0x64
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004538:	4649      	mov	r1, r9
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004542:	4641      	mov	r1, r8
 8004544:	008a      	lsls	r2, r1, #2
 8004546:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800454a:	f7fc fab7 	bl	8000abc <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	@ 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	@ 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <UART_SetConfig+0x4e4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004582:	46bd      	mov	sp, r7
 8004584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <sniprintf>:
 800458c:	b40c      	push	{r2, r3}
 800458e:	b530      	push	{r4, r5, lr}
 8004590:	4b17      	ldr	r3, [pc, #92]	@ (80045f0 <sniprintf+0x64>)
 8004592:	1e0c      	subs	r4, r1, #0
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	b09d      	sub	sp, #116	@ 0x74
 8004598:	da08      	bge.n	80045ac <sniprintf+0x20>
 800459a:	238b      	movs	r3, #139	@ 0x8b
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	b01d      	add	sp, #116	@ 0x74
 80045a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a8:	b002      	add	sp, #8
 80045aa:	4770      	bx	lr
 80045ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80045b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045b4:	bf14      	ite	ne
 80045b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045ba:	4623      	moveq	r3, r4
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	9307      	str	r3, [sp, #28]
 80045c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	9006      	str	r0, [sp, #24]
 80045c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80045ce:	ab21      	add	r3, sp, #132	@ 0x84
 80045d0:	a902      	add	r1, sp, #8
 80045d2:	4628      	mov	r0, r5
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	f000 f995 	bl	8004904 <_svfiprintf_r>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	bfbc      	itt	lt
 80045de:	238b      	movlt	r3, #139	@ 0x8b
 80045e0:	602b      	strlt	r3, [r5, #0]
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d0dd      	beq.n	80045a2 <sniprintf+0x16>
 80045e6:	9b02      	ldr	r3, [sp, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e7d9      	b.n	80045a2 <sniprintf+0x16>
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <memset>:
 80045f4:	4402      	add	r2, r0
 80045f6:	4603      	mov	r3, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <__errno>:
 8004604:	4b01      	ldr	r3, [pc, #4]	@ (800460c <__errno+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4d0d      	ldr	r5, [pc, #52]	@ (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	@ (800464c <__libc_init_array+0x3c>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2600      	movs	r6, #0
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4d0b      	ldr	r5, [pc, #44]	@ (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	@ (8004654 <__libc_init_array+0x44>)
 8004624:	f000 fc66 	bl	8004ef4 <_init>
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2600      	movs	r6, #0
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	08004f74 	.word	0x08004f74
 800464c:	08004f74 	.word	0x08004f74
 8004650:	08004f74 	.word	0x08004f74
 8004654:	08004f78 	.word	0x08004f78

08004658 <__retarget_lock_acquire_recursive>:
 8004658:	4770      	bx	lr

0800465a <__retarget_lock_release_recursive>:
 800465a:	4770      	bx	lr

0800465c <_free_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4605      	mov	r5, r0
 8004660:	2900      	cmp	r1, #0
 8004662:	d041      	beq.n	80046e8 <_free_r+0x8c>
 8004664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004668:	1f0c      	subs	r4, r1, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	bfb8      	it	lt
 800466e:	18e4      	addlt	r4, r4, r3
 8004670:	f000 f8e0 	bl	8004834 <__malloc_lock>
 8004674:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <_free_r+0x90>)
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	b933      	cbnz	r3, 8004688 <_free_r+0x2c>
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	6014      	str	r4, [r2, #0]
 800467e:	4628      	mov	r0, r5
 8004680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004684:	f000 b8dc 	b.w	8004840 <__malloc_unlock>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d908      	bls.n	800469e <_free_r+0x42>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	1821      	adds	r1, r4, r0
 8004690:	428b      	cmp	r3, r1
 8004692:	bf01      	itttt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	1809      	addeq	r1, r1, r0
 800469a:	6021      	streq	r1, [r4, #0]
 800469c:	e7ed      	b.n	800467a <_free_r+0x1e>
 800469e:	461a      	mov	r2, r3
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b10b      	cbz	r3, 80046a8 <_free_r+0x4c>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d9fa      	bls.n	800469e <_free_r+0x42>
 80046a8:	6811      	ldr	r1, [r2, #0]
 80046aa:	1850      	adds	r0, r2, r1
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d10b      	bne.n	80046c8 <_free_r+0x6c>
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	4401      	add	r1, r0
 80046b4:	1850      	adds	r0, r2, r1
 80046b6:	4283      	cmp	r3, r0
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	d1e0      	bne.n	800467e <_free_r+0x22>
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	6053      	str	r3, [r2, #4]
 80046c2:	4408      	add	r0, r1
 80046c4:	6010      	str	r0, [r2, #0]
 80046c6:	e7da      	b.n	800467e <_free_r+0x22>
 80046c8:	d902      	bls.n	80046d0 <_free_r+0x74>
 80046ca:	230c      	movs	r3, #12
 80046cc:	602b      	str	r3, [r5, #0]
 80046ce:	e7d6      	b.n	800467e <_free_r+0x22>
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	1821      	adds	r1, r4, r0
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf04      	itt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	bf04      	itt	eq
 80046e0:	1809      	addeq	r1, r1, r0
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	6054      	str	r4, [r2, #4]
 80046e6:	e7ca      	b.n	800467e <_free_r+0x22>
 80046e8:	bd38      	pop	{r3, r4, r5, pc}
 80046ea:	bf00      	nop
 80046ec:	200002e4 	.word	0x200002e4

080046f0 <sbrk_aligned>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004730 <sbrk_aligned+0x40>)
 80046f4:	460c      	mov	r4, r1
 80046f6:	6831      	ldr	r1, [r6, #0]
 80046f8:	4605      	mov	r5, r0
 80046fa:	b911      	cbnz	r1, 8004702 <sbrk_aligned+0x12>
 80046fc:	f000 fba6 	bl	8004e4c <_sbrk_r>
 8004700:	6030      	str	r0, [r6, #0]
 8004702:	4621      	mov	r1, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 fba1 	bl	8004e4c <_sbrk_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d103      	bne.n	8004716 <sbrk_aligned+0x26>
 800470e:	f04f 34ff 	mov.w	r4, #4294967295
 8004712:	4620      	mov	r0, r4
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d0f8      	beq.n	8004712 <sbrk_aligned+0x22>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4628      	mov	r0, r5
 8004724:	f000 fb92 	bl	8004e4c <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d1f2      	bne.n	8004712 <sbrk_aligned+0x22>
 800472c:	e7ef      	b.n	800470e <sbrk_aligned+0x1e>
 800472e:	bf00      	nop
 8004730:	200002e0 	.word	0x200002e0

08004734 <_malloc_r>:
 8004734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004738:	1ccd      	adds	r5, r1, #3
 800473a:	f025 0503 	bic.w	r5, r5, #3
 800473e:	3508      	adds	r5, #8
 8004740:	2d0c      	cmp	r5, #12
 8004742:	bf38      	it	cc
 8004744:	250c      	movcc	r5, #12
 8004746:	2d00      	cmp	r5, #0
 8004748:	4606      	mov	r6, r0
 800474a:	db01      	blt.n	8004750 <_malloc_r+0x1c>
 800474c:	42a9      	cmp	r1, r5
 800474e:	d904      	bls.n	800475a <_malloc_r+0x26>
 8004750:	230c      	movs	r3, #12
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	2000      	movs	r0, #0
 8004756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004830 <_malloc_r+0xfc>
 800475e:	f000 f869 	bl	8004834 <__malloc_lock>
 8004762:	f8d8 3000 	ldr.w	r3, [r8]
 8004766:	461c      	mov	r4, r3
 8004768:	bb44      	cbnz	r4, 80047bc <_malloc_r+0x88>
 800476a:	4629      	mov	r1, r5
 800476c:	4630      	mov	r0, r6
 800476e:	f7ff ffbf 	bl	80046f0 <sbrk_aligned>
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	4604      	mov	r4, r0
 8004776:	d158      	bne.n	800482a <_malloc_r+0xf6>
 8004778:	f8d8 4000 	ldr.w	r4, [r8]
 800477c:	4627      	mov	r7, r4
 800477e:	2f00      	cmp	r7, #0
 8004780:	d143      	bne.n	800480a <_malloc_r+0xd6>
 8004782:	2c00      	cmp	r4, #0
 8004784:	d04b      	beq.n	800481e <_malloc_r+0xea>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	4639      	mov	r1, r7
 800478a:	4630      	mov	r0, r6
 800478c:	eb04 0903 	add.w	r9, r4, r3
 8004790:	f000 fb5c 	bl	8004e4c <_sbrk_r>
 8004794:	4581      	cmp	r9, r0
 8004796:	d142      	bne.n	800481e <_malloc_r+0xea>
 8004798:	6821      	ldr	r1, [r4, #0]
 800479a:	1a6d      	subs	r5, r5, r1
 800479c:	4629      	mov	r1, r5
 800479e:	4630      	mov	r0, r6
 80047a0:	f7ff ffa6 	bl	80046f0 <sbrk_aligned>
 80047a4:	3001      	adds	r0, #1
 80047a6:	d03a      	beq.n	800481e <_malloc_r+0xea>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	442b      	add	r3, r5
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	f8d8 3000 	ldr.w	r3, [r8]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	bb62      	cbnz	r2, 8004810 <_malloc_r+0xdc>
 80047b6:	f8c8 7000 	str.w	r7, [r8]
 80047ba:	e00f      	b.n	80047dc <_malloc_r+0xa8>
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	1b52      	subs	r2, r2, r5
 80047c0:	d420      	bmi.n	8004804 <_malloc_r+0xd0>
 80047c2:	2a0b      	cmp	r2, #11
 80047c4:	d917      	bls.n	80047f6 <_malloc_r+0xc2>
 80047c6:	1961      	adds	r1, r4, r5
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	6025      	str	r5, [r4, #0]
 80047cc:	bf18      	it	ne
 80047ce:	6059      	strne	r1, [r3, #4]
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	bf08      	it	eq
 80047d4:	f8c8 1000 	streq.w	r1, [r8]
 80047d8:	5162      	str	r2, [r4, r5]
 80047da:	604b      	str	r3, [r1, #4]
 80047dc:	4630      	mov	r0, r6
 80047de:	f000 f82f 	bl	8004840 <__malloc_unlock>
 80047e2:	f104 000b 	add.w	r0, r4, #11
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	f020 0007 	bic.w	r0, r0, #7
 80047ec:	1ac2      	subs	r2, r0, r3
 80047ee:	bf1c      	itt	ne
 80047f0:	1a1b      	subne	r3, r3, r0
 80047f2:	50a3      	strne	r3, [r4, r2]
 80047f4:	e7af      	b.n	8004756 <_malloc_r+0x22>
 80047f6:	6862      	ldr	r2, [r4, #4]
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	bf0c      	ite	eq
 80047fc:	f8c8 2000 	streq.w	r2, [r8]
 8004800:	605a      	strne	r2, [r3, #4]
 8004802:	e7eb      	b.n	80047dc <_malloc_r+0xa8>
 8004804:	4623      	mov	r3, r4
 8004806:	6864      	ldr	r4, [r4, #4]
 8004808:	e7ae      	b.n	8004768 <_malloc_r+0x34>
 800480a:	463c      	mov	r4, r7
 800480c:	687f      	ldr	r7, [r7, #4]
 800480e:	e7b6      	b.n	800477e <_malloc_r+0x4a>
 8004810:	461a      	mov	r2, r3
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	42a3      	cmp	r3, r4
 8004816:	d1fb      	bne.n	8004810 <_malloc_r+0xdc>
 8004818:	2300      	movs	r3, #0
 800481a:	6053      	str	r3, [r2, #4]
 800481c:	e7de      	b.n	80047dc <_malloc_r+0xa8>
 800481e:	230c      	movs	r3, #12
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f80c 	bl	8004840 <__malloc_unlock>
 8004828:	e794      	b.n	8004754 <_malloc_r+0x20>
 800482a:	6005      	str	r5, [r0, #0]
 800482c:	e7d6      	b.n	80047dc <_malloc_r+0xa8>
 800482e:	bf00      	nop
 8004830:	200002e4 	.word	0x200002e4

08004834 <__malloc_lock>:
 8004834:	4801      	ldr	r0, [pc, #4]	@ (800483c <__malloc_lock+0x8>)
 8004836:	f7ff bf0f 	b.w	8004658 <__retarget_lock_acquire_recursive>
 800483a:	bf00      	nop
 800483c:	200002dc 	.word	0x200002dc

08004840 <__malloc_unlock>:
 8004840:	4801      	ldr	r0, [pc, #4]	@ (8004848 <__malloc_unlock+0x8>)
 8004842:	f7ff bf0a 	b.w	800465a <__retarget_lock_release_recursive>
 8004846:	bf00      	nop
 8004848:	200002dc 	.word	0x200002dc

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	461f      	mov	r7, r3
 8004854:	42be      	cmp	r6, r7
 8004856:	680b      	ldr	r3, [r1, #0]
 8004858:	4682      	mov	sl, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4690      	mov	r8, r2
 800485e:	d82d      	bhi.n	80048bc <__ssputs_r+0x70>
 8004860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004864:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004868:	d026      	beq.n	80048b8 <__ssputs_r+0x6c>
 800486a:	6965      	ldr	r5, [r4, #20]
 800486c:	6909      	ldr	r1, [r1, #16]
 800486e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004872:	eba3 0901 	sub.w	r9, r3, r1
 8004876:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800487a:	1c7b      	adds	r3, r7, #1
 800487c:	444b      	add	r3, r9
 800487e:	106d      	asrs	r5, r5, #1
 8004880:	429d      	cmp	r5, r3
 8004882:	bf38      	it	cc
 8004884:	461d      	movcc	r5, r3
 8004886:	0553      	lsls	r3, r2, #21
 8004888:	d527      	bpl.n	80048da <__ssputs_r+0x8e>
 800488a:	4629      	mov	r1, r5
 800488c:	f7ff ff52 	bl	8004734 <_malloc_r>
 8004890:	4606      	mov	r6, r0
 8004892:	b360      	cbz	r0, 80048ee <__ssputs_r+0xa2>
 8004894:	6921      	ldr	r1, [r4, #16]
 8004896:	464a      	mov	r2, r9
 8004898:	f000 fae8 	bl	8004e6c <memcpy>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	6126      	str	r6, [r4, #16]
 80048aa:	6165      	str	r5, [r4, #20]
 80048ac:	444e      	add	r6, r9
 80048ae:	eba5 0509 	sub.w	r5, r5, r9
 80048b2:	6026      	str	r6, [r4, #0]
 80048b4:	60a5      	str	r5, [r4, #8]
 80048b6:	463e      	mov	r6, r7
 80048b8:	42be      	cmp	r6, r7
 80048ba:	d900      	bls.n	80048be <__ssputs_r+0x72>
 80048bc:	463e      	mov	r6, r7
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	4632      	mov	r2, r6
 80048c2:	4641      	mov	r1, r8
 80048c4:	f000 faa8 	bl	8004e18 <memmove>
 80048c8:	68a3      	ldr	r3, [r4, #8]
 80048ca:	1b9b      	subs	r3, r3, r6
 80048cc:	60a3      	str	r3, [r4, #8]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	4433      	add	r3, r6
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	2000      	movs	r0, #0
 80048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048da:	462a      	mov	r2, r5
 80048dc:	f000 fad4 	bl	8004e88 <_realloc_r>
 80048e0:	4606      	mov	r6, r0
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d1e0      	bne.n	80048a8 <__ssputs_r+0x5c>
 80048e6:	6921      	ldr	r1, [r4, #16]
 80048e8:	4650      	mov	r0, sl
 80048ea:	f7ff feb7 	bl	800465c <_free_r>
 80048ee:	230c      	movs	r3, #12
 80048f0:	f8ca 3000 	str.w	r3, [sl]
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048fa:	81a3      	strh	r3, [r4, #12]
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	e7e9      	b.n	80048d6 <__ssputs_r+0x8a>
	...

08004904 <_svfiprintf_r>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4698      	mov	r8, r3
 800490a:	898b      	ldrh	r3, [r1, #12]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	b09d      	sub	sp, #116	@ 0x74
 8004910:	4607      	mov	r7, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4614      	mov	r4, r2
 8004916:	d510      	bpl.n	800493a <_svfiprintf_r+0x36>
 8004918:	690b      	ldr	r3, [r1, #16]
 800491a:	b973      	cbnz	r3, 800493a <_svfiprintf_r+0x36>
 800491c:	2140      	movs	r1, #64	@ 0x40
 800491e:	f7ff ff09 	bl	8004734 <_malloc_r>
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	6128      	str	r0, [r5, #16]
 8004926:	b930      	cbnz	r0, 8004936 <_svfiprintf_r+0x32>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	b01d      	add	sp, #116	@ 0x74
 8004932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004936:	2340      	movs	r3, #64	@ 0x40
 8004938:	616b      	str	r3, [r5, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9309      	str	r3, [sp, #36]	@ 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004944:	f8cd 800c 	str.w	r8, [sp, #12]
 8004948:	2330      	movs	r3, #48	@ 0x30
 800494a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ae8 <_svfiprintf_r+0x1e4>
 800494e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004952:	f04f 0901 	mov.w	r9, #1
 8004956:	4623      	mov	r3, r4
 8004958:	469a      	mov	sl, r3
 800495a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495e:	b10a      	cbz	r2, 8004964 <_svfiprintf_r+0x60>
 8004960:	2a25      	cmp	r2, #37	@ 0x25
 8004962:	d1f9      	bne.n	8004958 <_svfiprintf_r+0x54>
 8004964:	ebba 0b04 	subs.w	fp, sl, r4
 8004968:	d00b      	beq.n	8004982 <_svfiprintf_r+0x7e>
 800496a:	465b      	mov	r3, fp
 800496c:	4622      	mov	r2, r4
 800496e:	4629      	mov	r1, r5
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff6b 	bl	800484c <__ssputs_r>
 8004976:	3001      	adds	r0, #1
 8004978:	f000 80a7 	beq.w	8004aca <_svfiprintf_r+0x1c6>
 800497c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800497e:	445a      	add	r2, fp
 8004980:	9209      	str	r2, [sp, #36]	@ 0x24
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 809f 	beq.w	8004aca <_svfiprintf_r+0x1c6>
 800498c:	2300      	movs	r3, #0
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004996:	f10a 0a01 	add.w	sl, sl, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9307      	str	r3, [sp, #28]
 800499e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80049a4:	4654      	mov	r4, sl
 80049a6:	2205      	movs	r2, #5
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	484e      	ldr	r0, [pc, #312]	@ (8004ae8 <_svfiprintf_r+0x1e4>)
 80049ae:	f7fb fc17 	bl	80001e0 <memchr>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	b9d8      	cbnz	r0, 80049ee <_svfiprintf_r+0xea>
 80049b6:	06d0      	lsls	r0, r2, #27
 80049b8:	bf44      	itt	mi
 80049ba:	2320      	movmi	r3, #32
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c0:	0711      	lsls	r1, r2, #28
 80049c2:	bf44      	itt	mi
 80049c4:	232b      	movmi	r3, #43	@ 0x2b
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d0:	d015      	beq.n	80049fe <_svfiprintf_r+0xfa>
 80049d2:	9a07      	ldr	r2, [sp, #28]
 80049d4:	4654      	mov	r4, sl
 80049d6:	2000      	movs	r0, #0
 80049d8:	f04f 0c0a 	mov.w	ip, #10
 80049dc:	4621      	mov	r1, r4
 80049de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e2:	3b30      	subs	r3, #48	@ 0x30
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d94b      	bls.n	8004a80 <_svfiprintf_r+0x17c>
 80049e8:	b1b0      	cbz	r0, 8004a18 <_svfiprintf_r+0x114>
 80049ea:	9207      	str	r2, [sp, #28]
 80049ec:	e014      	b.n	8004a18 <_svfiprintf_r+0x114>
 80049ee:	eba0 0308 	sub.w	r3, r0, r8
 80049f2:	fa09 f303 	lsl.w	r3, r9, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	46a2      	mov	sl, r4
 80049fc:	e7d2      	b.n	80049a4 <_svfiprintf_r+0xa0>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9103      	str	r1, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfbb      	ittet	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a10:	9307      	strge	r3, [sp, #28]
 8004a12:	9307      	strlt	r3, [sp, #28]
 8004a14:	bfb8      	it	lt
 8004a16:	9204      	strlt	r2, [sp, #16]
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a1c:	d10a      	bne.n	8004a34 <_svfiprintf_r+0x130>
 8004a1e:	7863      	ldrb	r3, [r4, #1]
 8004a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a22:	d132      	bne.n	8004a8a <_svfiprintf_r+0x186>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1d1a      	adds	r2, r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	9203      	str	r2, [sp, #12]
 8004a2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a30:	3402      	adds	r4, #2
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004af8 <_svfiprintf_r+0x1f4>
 8004a38:	7821      	ldrb	r1, [r4, #0]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	f7fb fbcf 	bl	80001e0 <memchr>
 8004a42:	b138      	cbz	r0, 8004a54 <_svfiprintf_r+0x150>
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	eba0 000a 	sub.w	r0, r0, sl
 8004a4a:	2240      	movs	r2, #64	@ 0x40
 8004a4c:	4082      	lsls	r2, r0
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	3401      	adds	r4, #1
 8004a52:	9304      	str	r3, [sp, #16]
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	4824      	ldr	r0, [pc, #144]	@ (8004aec <_svfiprintf_r+0x1e8>)
 8004a5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a5e:	2206      	movs	r2, #6
 8004a60:	f7fb fbbe 	bl	80001e0 <memchr>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d036      	beq.n	8004ad6 <_svfiprintf_r+0x1d2>
 8004a68:	4b21      	ldr	r3, [pc, #132]	@ (8004af0 <_svfiprintf_r+0x1ec>)
 8004a6a:	bb1b      	cbnz	r3, 8004ab4 <_svfiprintf_r+0x1b0>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	3307      	adds	r3, #7
 8004a70:	f023 0307 	bic.w	r3, r3, #7
 8004a74:	3308      	adds	r3, #8
 8004a76:	9303      	str	r3, [sp, #12]
 8004a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a7a:	4433      	add	r3, r6
 8004a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a7e:	e76a      	b.n	8004956 <_svfiprintf_r+0x52>
 8004a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a84:	460c      	mov	r4, r1
 8004a86:	2001      	movs	r0, #1
 8004a88:	e7a8      	b.n	80049dc <_svfiprintf_r+0xd8>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	9305      	str	r3, [sp, #20]
 8004a90:	4619      	mov	r1, r3
 8004a92:	f04f 0c0a 	mov.w	ip, #10
 8004a96:	4620      	mov	r0, r4
 8004a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9c:	3a30      	subs	r2, #48	@ 0x30
 8004a9e:	2a09      	cmp	r2, #9
 8004aa0:	d903      	bls.n	8004aaa <_svfiprintf_r+0x1a6>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0c6      	beq.n	8004a34 <_svfiprintf_r+0x130>
 8004aa6:	9105      	str	r1, [sp, #20]
 8004aa8:	e7c4      	b.n	8004a34 <_svfiprintf_r+0x130>
 8004aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aae:	4604      	mov	r4, r0
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e7f0      	b.n	8004a96 <_svfiprintf_r+0x192>
 8004ab4:	ab03      	add	r3, sp, #12
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4b0e      	ldr	r3, [pc, #56]	@ (8004af4 <_svfiprintf_r+0x1f0>)
 8004abc:	a904      	add	r1, sp, #16
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f3af 8000 	nop.w
 8004ac4:	1c42      	adds	r2, r0, #1
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	d1d6      	bne.n	8004a78 <_svfiprintf_r+0x174>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	065b      	lsls	r3, r3, #25
 8004ace:	f53f af2d 	bmi.w	800492c <_svfiprintf_r+0x28>
 8004ad2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ad4:	e72c      	b.n	8004930 <_svfiprintf_r+0x2c>
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <_svfiprintf_r+0x1f0>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f000 f879 	bl	8004bd8 <_printf_i>
 8004ae6:	e7ed      	b.n	8004ac4 <_svfiprintf_r+0x1c0>
 8004ae8:	08004f38 	.word	0x08004f38
 8004aec:	08004f42 	.word	0x08004f42
 8004af0:	00000000 	.word	0x00000000
 8004af4:	0800484d 	.word	0x0800484d
 8004af8:	08004f3e 	.word	0x08004f3e

08004afc <_printf_common>:
 8004afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b00:	4616      	mov	r6, r2
 8004b02:	4698      	mov	r8, r3
 8004b04:	688a      	ldr	r2, [r1, #8]
 8004b06:	690b      	ldr	r3, [r1, #16]
 8004b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bfb8      	it	lt
 8004b10:	4613      	movlt	r3, r2
 8004b12:	6033      	str	r3, [r6, #0]
 8004b14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b18:	4607      	mov	r7, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	b10a      	cbz	r2, 8004b22 <_printf_common+0x26>
 8004b1e:	3301      	adds	r3, #1
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	0699      	lsls	r1, r3, #26
 8004b26:	bf42      	ittt	mi
 8004b28:	6833      	ldrmi	r3, [r6, #0]
 8004b2a:	3302      	addmi	r3, #2
 8004b2c:	6033      	strmi	r3, [r6, #0]
 8004b2e:	6825      	ldr	r5, [r4, #0]
 8004b30:	f015 0506 	ands.w	r5, r5, #6
 8004b34:	d106      	bne.n	8004b44 <_printf_common+0x48>
 8004b36:	f104 0a19 	add.w	sl, r4, #25
 8004b3a:	68e3      	ldr	r3, [r4, #12]
 8004b3c:	6832      	ldr	r2, [r6, #0]
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	dc26      	bgt.n	8004b92 <_printf_common+0x96>
 8004b44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	3b00      	subs	r3, #0
 8004b4c:	bf18      	it	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	0692      	lsls	r2, r2, #26
 8004b52:	d42b      	bmi.n	8004bac <_printf_common+0xb0>
 8004b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b58:	4641      	mov	r1, r8
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c8      	blx	r9
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d01e      	beq.n	8004ba0 <_printf_common+0xa4>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	f003 0306 	and.w	r3, r3, #6
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf02      	ittt	eq
 8004b6e:	68e5      	ldreq	r5, [r4, #12]
 8004b70:	6833      	ldreq	r3, [r6, #0]
 8004b72:	1aed      	subeq	r5, r5, r3
 8004b74:	68a3      	ldr	r3, [r4, #8]
 8004b76:	bf0c      	ite	eq
 8004b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b7c:	2500      	movne	r5, #0
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	bfc4      	itt	gt
 8004b82:	1a9b      	subgt	r3, r3, r2
 8004b84:	18ed      	addgt	r5, r5, r3
 8004b86:	2600      	movs	r6, #0
 8004b88:	341a      	adds	r4, #26
 8004b8a:	42b5      	cmp	r5, r6
 8004b8c:	d11a      	bne.n	8004bc4 <_printf_common+0xc8>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e008      	b.n	8004ba4 <_printf_common+0xa8>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4652      	mov	r2, sl
 8004b96:	4641      	mov	r1, r8
 8004b98:	4638      	mov	r0, r7
 8004b9a:	47c8      	blx	r9
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d103      	bne.n	8004ba8 <_printf_common+0xac>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	3501      	adds	r5, #1
 8004baa:	e7c6      	b.n	8004b3a <_printf_common+0x3e>
 8004bac:	18e1      	adds	r1, r4, r3
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	2030      	movs	r0, #48	@ 0x30
 8004bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb6:	4422      	add	r2, r4
 8004bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	e7c7      	b.n	8004b54 <_printf_common+0x58>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4638      	mov	r0, r7
 8004bcc:	47c8      	blx	r9
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0e6      	beq.n	8004ba0 <_printf_common+0xa4>
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7d9      	b.n	8004b8a <_printf_common+0x8e>
	...

08004bd8 <_printf_i>:
 8004bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	7e0f      	ldrb	r7, [r1, #24]
 8004bde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be0:	2f78      	cmp	r7, #120	@ 0x78
 8004be2:	4691      	mov	r9, r2
 8004be4:	4680      	mov	r8, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	469a      	mov	sl, r3
 8004bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bee:	d807      	bhi.n	8004c00 <_printf_i+0x28>
 8004bf0:	2f62      	cmp	r7, #98	@ 0x62
 8004bf2:	d80a      	bhi.n	8004c0a <_printf_i+0x32>
 8004bf4:	2f00      	cmp	r7, #0
 8004bf6:	f000 80d2 	beq.w	8004d9e <_printf_i+0x1c6>
 8004bfa:	2f58      	cmp	r7, #88	@ 0x58
 8004bfc:	f000 80b9 	beq.w	8004d72 <_printf_i+0x19a>
 8004c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c08:	e03a      	b.n	8004c80 <_printf_i+0xa8>
 8004c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0e:	2b15      	cmp	r3, #21
 8004c10:	d8f6      	bhi.n	8004c00 <_printf_i+0x28>
 8004c12:	a101      	add	r1, pc, #4	@ (adr r1, 8004c18 <_printf_i+0x40>)
 8004c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c18:	08004c71 	.word	0x08004c71
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c01 	.word	0x08004c01
 8004c24:	08004c01 	.word	0x08004c01
 8004c28:	08004c01 	.word	0x08004c01
 8004c2c:	08004c01 	.word	0x08004c01
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004c01 	.word	0x08004c01
 8004c38:	08004c01 	.word	0x08004c01
 8004c3c:	08004c01 	.word	0x08004c01
 8004c40:	08004c01 	.word	0x08004c01
 8004c44:	08004d85 	.word	0x08004d85
 8004c48:	08004caf 	.word	0x08004caf
 8004c4c:	08004d3f 	.word	0x08004d3f
 8004c50:	08004c01 	.word	0x08004c01
 8004c54:	08004c01 	.word	0x08004c01
 8004c58:	08004da7 	.word	0x08004da7
 8004c5c:	08004c01 	.word	0x08004c01
 8004c60:	08004caf 	.word	0x08004caf
 8004c64:	08004c01 	.word	0x08004c01
 8004c68:	08004c01 	.word	0x08004c01
 8004c6c:	08004d47 	.word	0x08004d47
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6032      	str	r2, [r6, #0]
 8004c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c80:	2301      	movs	r3, #1
 8004c82:	e09d      	b.n	8004dc0 <_printf_i+0x1e8>
 8004c84:	6833      	ldr	r3, [r6, #0]
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	6031      	str	r1, [r6, #0]
 8004c8c:	0606      	lsls	r6, r0, #24
 8004c8e:	d501      	bpl.n	8004c94 <_printf_i+0xbc>
 8004c90:	681d      	ldr	r5, [r3, #0]
 8004c92:	e003      	b.n	8004c9c <_printf_i+0xc4>
 8004c94:	0645      	lsls	r5, r0, #25
 8004c96:	d5fb      	bpl.n	8004c90 <_printf_i+0xb8>
 8004c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xd0>
 8004ca0:	232d      	movs	r3, #45	@ 0x2d
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca8:	4859      	ldr	r0, [pc, #356]	@ (8004e10 <_printf_i+0x238>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e011      	b.n	8004cd2 <_printf_i+0xfa>
 8004cae:	6821      	ldr	r1, [r4, #0]
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	0608      	lsls	r0, r1, #24
 8004cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb8:	d402      	bmi.n	8004cc0 <_printf_i+0xe8>
 8004cba:	0649      	lsls	r1, r1, #25
 8004cbc:	bf48      	it	mi
 8004cbe:	b2ad      	uxthmi	r5, r5
 8004cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cc2:	4853      	ldr	r0, [pc, #332]	@ (8004e10 <_printf_i+0x238>)
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	bf14      	ite	ne
 8004cc8:	230a      	movne	r3, #10
 8004cca:	2308      	moveq	r3, #8
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cd2:	6866      	ldr	r6, [r4, #4]
 8004cd4:	60a6      	str	r6, [r4, #8]
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	bfa2      	ittt	ge
 8004cda:	6821      	ldrge	r1, [r4, #0]
 8004cdc:	f021 0104 	bicge.w	r1, r1, #4
 8004ce0:	6021      	strge	r1, [r4, #0]
 8004ce2:	b90d      	cbnz	r5, 8004ce8 <_printf_i+0x110>
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	d04b      	beq.n	8004d80 <_printf_i+0x1a8>
 8004ce8:	4616      	mov	r6, r2
 8004cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cee:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf2:	5dc7      	ldrb	r7, [r0, r7]
 8004cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf8:	462f      	mov	r7, r5
 8004cfa:	42bb      	cmp	r3, r7
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	d9f4      	bls.n	8004cea <_printf_i+0x112>
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d10b      	bne.n	8004d1c <_printf_i+0x144>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	07df      	lsls	r7, r3, #31
 8004d08:	d508      	bpl.n	8004d1c <_printf_i+0x144>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	6861      	ldr	r1, [r4, #4]
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	bfde      	ittt	le
 8004d12:	2330      	movle	r3, #48	@ 0x30
 8004d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d1c:	1b92      	subs	r2, r2, r6
 8004d1e:	6122      	str	r2, [r4, #16]
 8004d20:	f8cd a000 	str.w	sl, [sp]
 8004d24:	464b      	mov	r3, r9
 8004d26:	aa03      	add	r2, sp, #12
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7ff fee6 	bl	8004afc <_printf_common>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d14a      	bne.n	8004dca <_printf_i+0x1f2>
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	b004      	add	sp, #16
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f043 0320 	orr.w	r3, r3, #32
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	4833      	ldr	r0, [pc, #204]	@ (8004e14 <_printf_i+0x23c>)
 8004d48:	2778      	movs	r7, #120	@ 0x78
 8004d4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	6831      	ldr	r1, [r6, #0]
 8004d52:	061f      	lsls	r7, r3, #24
 8004d54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d58:	d402      	bmi.n	8004d60 <_printf_i+0x188>
 8004d5a:	065f      	lsls	r7, r3, #25
 8004d5c:	bf48      	it	mi
 8004d5e:	b2ad      	uxthmi	r5, r5
 8004d60:	6031      	str	r1, [r6, #0]
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b11d      	cbz	r5, 8004d76 <_printf_i+0x19e>
 8004d6e:	2310      	movs	r3, #16
 8004d70:	e7ac      	b.n	8004ccc <_printf_i+0xf4>
 8004d72:	4827      	ldr	r0, [pc, #156]	@ (8004e10 <_printf_i+0x238>)
 8004d74:	e7e9      	b.n	8004d4a <_printf_i+0x172>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f023 0320 	bic.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	e7f6      	b.n	8004d6e <_printf_i+0x196>
 8004d80:	4616      	mov	r6, r2
 8004d82:	e7bd      	b.n	8004d00 <_printf_i+0x128>
 8004d84:	6833      	ldr	r3, [r6, #0]
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	6961      	ldr	r1, [r4, #20]
 8004d8a:	1d18      	adds	r0, r3, #4
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	062e      	lsls	r6, r5, #24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0x1c0>
 8004d94:	6019      	str	r1, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0x1c6>
 8004d98:	0668      	lsls	r0, r5, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0x1bc>
 8004d9c:	8019      	strh	r1, [r3, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	4616      	mov	r6, r2
 8004da4:	e7bc      	b.n	8004d20 <_printf_i+0x148>
 8004da6:	6833      	ldr	r3, [r6, #0]
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	6032      	str	r2, [r6, #0]
 8004dac:	681e      	ldr	r6, [r3, #0]
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7fb fa14 	bl	80001e0 <memchr>
 8004db8:	b108      	cbz	r0, 8004dbe <_printf_i+0x1e6>
 8004dba:	1b80      	subs	r0, r0, r6
 8004dbc:	6060      	str	r0, [r4, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc8:	e7aa      	b.n	8004d20 <_printf_i+0x148>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	47d0      	blx	sl
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d0ad      	beq.n	8004d34 <_printf_i+0x15c>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	079b      	lsls	r3, r3, #30
 8004ddc:	d413      	bmi.n	8004e06 <_printf_i+0x22e>
 8004dde:	68e0      	ldr	r0, [r4, #12]
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	4298      	cmp	r0, r3
 8004de4:	bfb8      	it	lt
 8004de6:	4618      	movlt	r0, r3
 8004de8:	e7a6      	b.n	8004d38 <_printf_i+0x160>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4632      	mov	r2, r6
 8004dee:	4649      	mov	r1, r9
 8004df0:	4640      	mov	r0, r8
 8004df2:	47d0      	blx	sl
 8004df4:	3001      	adds	r0, #1
 8004df6:	d09d      	beq.n	8004d34 <_printf_i+0x15c>
 8004df8:	3501      	adds	r5, #1
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	1a5b      	subs	r3, r3, r1
 8004e00:	42ab      	cmp	r3, r5
 8004e02:	dcf2      	bgt.n	8004dea <_printf_i+0x212>
 8004e04:	e7eb      	b.n	8004dde <_printf_i+0x206>
 8004e06:	2500      	movs	r5, #0
 8004e08:	f104 0619 	add.w	r6, r4, #25
 8004e0c:	e7f5      	b.n	8004dfa <_printf_i+0x222>
 8004e0e:	bf00      	nop
 8004e10:	08004f49 	.word	0x08004f49
 8004e14:	08004f5a 	.word	0x08004f5a

08004e18 <memmove>:
 8004e18:	4288      	cmp	r0, r1
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	eb01 0402 	add.w	r4, r1, r2
 8004e20:	d902      	bls.n	8004e28 <memmove+0x10>
 8004e22:	4284      	cmp	r4, r0
 8004e24:	4623      	mov	r3, r4
 8004e26:	d807      	bhi.n	8004e38 <memmove+0x20>
 8004e28:	1e43      	subs	r3, r0, #1
 8004e2a:	42a1      	cmp	r1, r4
 8004e2c:	d008      	beq.n	8004e40 <memmove+0x28>
 8004e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e36:	e7f8      	b.n	8004e2a <memmove+0x12>
 8004e38:	4402      	add	r2, r0
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	428a      	cmp	r2, r1
 8004e3e:	d100      	bne.n	8004e42 <memmove+0x2a>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e4a:	e7f7      	b.n	8004e3c <memmove+0x24>

08004e4c <_sbrk_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	@ (8004e68 <_sbrk_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc fbde 	bl	8001618 <_sbrk>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_sbrk_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_sbrk_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	200002d8 	.word	0x200002d8

08004e6c <memcpy>:
 8004e6c:	440a      	add	r2, r1
 8004e6e:	4291      	cmp	r1, r2
 8004e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e74:	d100      	bne.n	8004e78 <memcpy+0xc>
 8004e76:	4770      	bx	lr
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e82:	4291      	cmp	r1, r2
 8004e84:	d1f9      	bne.n	8004e7a <memcpy+0xe>
 8004e86:	bd10      	pop	{r4, pc}

08004e88 <_realloc_r>:
 8004e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	4680      	mov	r8, r0
 8004e8e:	4615      	mov	r5, r2
 8004e90:	460c      	mov	r4, r1
 8004e92:	b921      	cbnz	r1, 8004e9e <_realloc_r+0x16>
 8004e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e98:	4611      	mov	r1, r2
 8004e9a:	f7ff bc4b 	b.w	8004734 <_malloc_r>
 8004e9e:	b92a      	cbnz	r2, 8004eac <_realloc_r+0x24>
 8004ea0:	f7ff fbdc 	bl	800465c <_free_r>
 8004ea4:	2400      	movs	r4, #0
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eac:	f000 f81a 	bl	8004ee4 <_malloc_usable_size_r>
 8004eb0:	4285      	cmp	r5, r0
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	d802      	bhi.n	8004ebc <_realloc_r+0x34>
 8004eb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eba:	d8f4      	bhi.n	8004ea6 <_realloc_r+0x1e>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f7ff fc38 	bl	8004734 <_malloc_r>
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d0ec      	beq.n	8004ea4 <_realloc_r+0x1c>
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	462a      	mov	r2, r5
 8004ece:	4621      	mov	r1, r4
 8004ed0:	bf28      	it	cs
 8004ed2:	4632      	movcs	r2, r6
 8004ed4:	f7ff ffca 	bl	8004e6c <memcpy>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4640      	mov	r0, r8
 8004edc:	f7ff fbbe 	bl	800465c <_free_r>
 8004ee0:	463c      	mov	r4, r7
 8004ee2:	e7e0      	b.n	8004ea6 <_realloc_r+0x1e>

08004ee4 <_malloc_usable_size_r>:
 8004ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee8:	1f18      	subs	r0, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfbc      	itt	lt
 8004eee:	580b      	ldrlt	r3, [r1, r0]
 8004ef0:	18c0      	addlt	r0, r0, r3
 8004ef2:	4770      	bx	lr

08004ef4 <_init>:
 8004ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef6:	bf00      	nop
 8004ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efa:	bc08      	pop	{r3}
 8004efc:	469e      	mov	lr, r3
 8004efe:	4770      	bx	lr

08004f00 <_fini>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr
